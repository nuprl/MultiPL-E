{
  "name": "mbpp_776_count_vowels",
  "language": "rs",
  "prompt": "/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfn count_vowels(test_str: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = count_vowels;\n    assert_eq!(candidate(String::from(\"bestinstareels\")), 7);\n    assert_eq!(candidate(String::from(\"partofthejourneyistheend\")), 12);\n    assert_eq!(candidate(String::from(\"amazonprime\")), 5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut iter = test_str.chars();\n    let mut prev = iter.next();\n    for c in iter {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) && is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while let Some(c) = curr {\n        if is_vowel(c) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut prev_char = ' ';\n    let mut next_char = ' ';\n    for (i, c) in test_str.chars().enumerate() {\n        if i > 0 {\n            prev_char = test_str.chars().nth(i - 1).unwrap();\n        }\n        if i < test_str.len() - 1 {\n            next_char = test_str.chars().nth(i + 1).unwrap();\n        }\n        if is_vowel(c) && (is_vowel(prev_char) || is_vowel(next_char)) {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if let Some(p) = prev {\n            if is_vowel(p) && is_vowel(c) {\n                count += 1;\n            }\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if vowels.contains(&c) && vowels.contains(&prev.unwrap()) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for (i, c) in test_str.chars().enumerate() {\n        if vowels.contains(&c) {\n            if i > 0 && vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n            if i < test_str.len() - 1 && vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut vowels = HashSet::new();\n    vowels.insert('a');\n    vowels.insert('e');\n    vowels.insert('i');\n    vowels.insert('o');\n    vowels.insert('u');\n    for (i, c) in test_str.chars().enumerate() {\n        if vowels.contains(&c) {\n            if i > 0 && vowels.contains(&test_str.chars().nth(i - 1).unwrap()) {\n                count += 1;\n            }\n            if i < test_str.len() - 1 && vowels.contains(&test_str.chars().nth(i + 1).unwrap()) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = test_str.chars();\n    let mut prev = chars.next().unwrap();\n    for c in chars {\n        if vowels.contains(&c) || vowels.contains(&prev) {\n            count += 1;\n        }\n        prev = c;\n    }\n    count",
    "    let mut count = 0;\n    let mut prev_char = ' ';\n    for c in test_str.chars() {\n        if is_vowel(c) {\n            if is_vowel(prev_char) {\n                count += 1;\n            }\n        }\n        prev_char = c;\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr.is_some() {\n        if is_vowel(curr.unwrap()) && (prev.is_some() && is_vowel(prev.unwrap()) || next.is_some() && is_vowel(next.unwrap())) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev.unwrap()) && is_vowel(next.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev.unwrap()) && is_vowel(next.unwrap()) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(c) && is_vowel(*prev) {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while next != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count",
    "    let mut count = 0;\n    let mut chars = test_str.chars();\n    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next = chars.next();\n    while curr != None {\n        if is_vowel(prev) || is_vowel(next) {\n            count += 1;\n        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n    }\n    count"
  ]
}