{
  "name": "mbpp_736_left_insertion",
  "language": "rs",
  "prompt": "/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfn left_insertion(a: Vec<isize>, x: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = left_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid;\n    while low <= high {\n        mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid - 1;\n        } else if x > a[mid as usize] {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;",
    "    let mut low = 0;\n    let mut high = a.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if a[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low as isize",
    "    let mut low = 0;\n    let mut high = a.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if a[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut low = 0;\n    let mut high = a.len() - 1;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if a[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    low as isize",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if a[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n        if x > a[mid as usize] {\n            low = mid + 1;\n        } else if x < a[mid as usize] {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n\n    if x > a[mid as usize] {\n        return mid + 1;\n    } else {\n        return mid;\n    }",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut low = 0;\n    let mut high = a.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if a[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    low as isize",
    "    let mut start = 0;\n    let mut end = a.len() - 1;\n    while start <= end {\n        let mid = (start + end) / 2;\n        if a[mid] < x {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    start as isize",
    "    let mut left = 0;\n    let mut right = a.len() as isize - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left",
    "    let mut i = 0;\n    let mut j = a.len() as isize - 1;\n    while i < j {\n        let m = (i + j) / 2;\n        if a[m as usize] < x {\n            i = m + 1;\n        } else {\n            j = m;\n        }\n    }\n    i",
    "    let mut low = 0;\n    let mut high = a.len() as isize;\n    while low < high {\n        let mid = (low + high) / 2;\n        if x <= a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left <= right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    left as isize",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut low = 0;\n    let mut high = a.len() as isize;\n    let mut mid = 0;\n    while low < high {\n        mid = (low + high) / 2;\n        if x <= a[mid as usize] {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    low",
    "    let mut left = 0;\n    let mut right = a.len() - 1;\n    while left < right {\n        let mid = (left + right) / 2;\n        if a[mid] < x {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    left as isize",
    "    let mut low = 0;\n    let mut high = a.len() as isize - 1;\n    let mut mid = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n        if x < a[mid as usize] {\n            high = mid - 1;\n        } else if x > a[mid as usize] {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return mid;"
  ]
}