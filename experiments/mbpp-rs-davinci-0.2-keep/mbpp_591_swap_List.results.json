{
  "name": "mbpp_591_swap_List",
  "language": "rs",
  "prompt": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    return newList;\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpv3ded283.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpv3ded283.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpv3ded283.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut list = newList.clone();\n    let first = list[0];\n    let last = list[list.len() - 1];\n    list[0] = last;\n    list[list.len() - 1] = first;\n    list\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `list` as immutable because it is also borrowed as mutable\n --> /tmp/tmp4zevbjif.rs:7:10\n  |\n7 |     list[list.len() - 1] = first;\n  |     -----^^^^^^^^^^-----\n  |     |    |\n  |     |    immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmp4zevbjif.rs:7:10\n  |\n7 |     list[list.len() - 1] = first;\n  |          ^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmp4zevbjif.rs:7:5\n  |\n7 |     list[list.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let last = newList.len() - 1;\n    newList.swap(0, last);\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let last = newList.len() - 1;\n    let temp = newList[0];\n    newList[0] = newList[last];\n    newList[last] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    return newList;\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpvph5lqvz.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpvph5lqvz.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpvph5lqvz.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let len = newList.len();\n    let temp = newList[0];\n    newList[0] = newList[len - 1];\n    newList[len - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList.remove(0);\n    let last = newList.pop().unwrap();\n    newList.insert(0, last);\n    newList.push(first);\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut list = newList;\n    let temp = list[0];\n    list[0] = list[list.len() - 1];\n    list[list.len() - 1] = temp;\n    list\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `list` as immutable because it is also borrowed as mutable\n --> /tmp/tmpsieyqiat.rs:6:10\n  |\n6 |     list[list.len() - 1] = temp;\n  |     -----^^^^^^^^^^-----\n  |     |    |\n  |     |    immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpsieyqiat.rs:6:10\n  |\n6 |     list[list.len() - 1] = temp;\n  |          ^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpsieyqiat.rs:6:5\n  |\n6 |     list[list.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let temp = newList[0];\n    newList[0] = newList[newList.len() - 1];\n    newList[newList.len() - 1] = temp;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpkhke7ncd.rs:6:13\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpkhke7ncd.rs:6:5\n  |\n6 |     newList[newList.len() - 1] = temp;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    let mut newList = newList;\n    let first = newList[0];\n    let last = newList[newList.len() - 1];\n    newList[0] = last;\n    newList[newList.len() - 1] = first;\n    newList\n}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n",
      "timestamp": 1665510608,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `newList` as immutable because it is also borrowed as mutable\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     --------^^^^^^^^^^^^^-----\n  |     |       |\n  |     |       immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     mutable borrow later used here\n  |\nhelp: try adding a local storing this...\n --> /tmp/tmpanaba9gk.rs:7:13\n  |\n7 |     newList[newList.len() - 1] = first;\n  |             ^^^^^^^^^^^^^\nhelp: ...and then using that local here\n --> /tmp/tmpanaba9gk.rs:7:5\n  |\n7 |     newList[newList.len() - 1] = first;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}