{
  "name": "mbpp_799_left_rotate",
  "language": "rs",
  "prompt": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        let left_most_bit = n & 0x80000000;\n        n <<= 1;\n        if left_most_bit == 0x80000000 {\n            n |= 1;\n        }\n        d -= 1;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for i in 0..d {\n        mask = mask | 1 << i;\n    }\n    let mut left = n << d;\n    let mut right = n >> (32 - d);\n    right = right & mask;\n    left = left | right;\n    left",
    "    let mut n = n;\n    for _ in 0..d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = (result << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    result",
    "    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        result = (result << 1) | (n & 1);\n        n = n >> 1;\n        d -= 1;\n    }\n    result = result << (32 - d);\n    result | n;",
    "    (n << d) | (n >> (32 - d))",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut mask = 0;\n    for _ in 0..d {\n        mask = mask << 1;\n        mask = mask | 1;\n    }\n    n = n << d;\n    n = n | mask;\n    n",
    "    let mut n = n;\n    let mut d = d;\n    let mut i = 0;\n    while i < d {\n        let left_most_bit = n & 1;\n        n = n >> 1;\n        n = n | (left_most_bit << 31);\n        i += 1;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    if d > 32 {\n        d = d % 32;\n    }\n    let mut i = 0;\n    while i < d {\n        n = left_rotate_by_one(n);\n        i += 1;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = (n << d) | (n >> (32 - d));\n    n",
    "    let mut n = n;\n    let mut d = d;\n    while d > 0 {\n        n = (n << 1) | (n >> 31);\n        d -= 1;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    let mut mask = 0;\n    let mut i = 0;\n    while i < d {\n        mask |= 1 << i;\n        i += 1;\n    }\n    let mask = !mask;\n    let left = n & mask;\n    let right = n & !mask;\n    let left = left << d;\n    let right = right >> (32 - d);\n    left | right",
    "    let mut n = n;\n    for _ in 0..d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    let mut result = 0;\n    while d > 0 {\n        let bit = n & 1;\n        n >>= 1;\n        result <<= 1;\n        result |= bit;\n        d -= 1;\n    }\n    n | (result << (32 - d))",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut res = 0;\n    for _ in 0..d {\n        res = res | (n & 1);\n        res = res << 1;\n        n = n >> 1;\n    }\n    res = res | n;\n    res",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    let mut i = 0;\n    while i < d {\n        let mut last_bit = n & 1;\n        n = n >> 1;\n        last_bit = last_bit << 31;\n        n = n | last_bit;\n        i += 1;\n    }\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d %= 32;\n    n = n << d;\n    n | n >> (32 - d);\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> 32 - d);\n    n",
    "    let mut n = n;\n    let mut d = d;\n    d = d % 32;\n    n = n << d;\n    n = n | (n >> (32 - d));\n    n"
  ]
}