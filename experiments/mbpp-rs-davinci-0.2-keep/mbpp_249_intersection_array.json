{
  "name": "mbpp_249_intersection_array",
  "language": "rs",
  "prompt": "/// Write a function to find the intersection of two arrays.\nfn intersection_array(array_nums1: Vec<isize>, array_nums2: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = intersection_array;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![1, 2, 4, 8, 9]), vec![1, 2, 8, 9]);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![3, 5, 7, 9]), vec![3, 5, 7, 9]);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![10, 20, 30, 40]), vec![10]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = Vec::new();\n    let mut map = HashMap::new();\n    for num in array_nums1 {\n        map.insert(num, true);\n    }\n\n    for num in array_nums2 {\n        if map.contains_key(&num) {\n            result.push(num);\n        }\n    }\n\n    result",
    "    let mut result = vec![];\n    let mut hash_map = HashMap::new();\n\n    for num in array_nums1 {\n        hash_map.insert(num, 1);\n    }\n\n    for num in array_nums2 {\n        if hash_map.contains_key(&num) {\n            result.push(num);\n        }\n    }\n\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    for num in array_nums1 {\n        hash_map.insert(num, 1);\n    }\n    for num in array_nums2 {\n        if hash_map.contains_key(&num) {\n            result.push(num);\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for num in array_nums1 {\n        if map.contains_key(&num) {\n            let count = map.get_mut(&num).unwrap();\n            *count += 1;\n        } else {\n            map.insert(num, 1);\n        }\n    }\n    for num in array_nums2 {\n        if map.contains_key(&num) {\n            let count = map.get_mut(&num).unwrap();\n            if *count > 0 {\n                result.push(num);\n                *count -= 1;\n            }\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    for num in array_nums1 {\n        if hash_map.contains_key(&num) {\n            let count = hash_map.get(&num).unwrap();\n            hash_map.insert(num, count + 1);\n        } else {\n            hash_map.insert(num, 1);\n        }\n    }\n    for num in array_nums2 {\n        if hash_map.contains_key(&num) {\n            result.push(num);\n            let count = hash_map.get(&num).unwrap();\n            if *count == 1 {\n                hash_map.remove(&num);\n            } else {\n                hash_map.insert(num, count - 1);\n            }\n        }\n    }\n    result",
    "    let mut result = vec![];\n    for num in array_nums1 {\n        if array_nums2.contains(&num) {\n            result.push(num);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut array_nums1 = array_nums1;\n    let mut array_nums2 = array_nums2;\n    array_nums1.sort();\n    array_nums2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    while i < array_nums1.len() && j < array_nums2.len() {\n        if array_nums1[i] == array_nums2[j] {\n            result.push(array_nums1[i]);\n            i += 1;\n            j += 1;\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut array_nums1 = array_nums1;\n    let mut array_nums2 = array_nums2;\n    array_nums1.sort();\n    array_nums2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    while i < array_nums1.len() && j < array_nums2.len() {\n        if array_nums1[i] == array_nums2[j] {\n            result.push(array_nums1[i]);\n            i += 1;\n            j += 1;\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    for num in array_nums1 {\n        if hash_map.contains_key(&num) {\n            let count = hash_map.get_mut(&num).unwrap();\n            *count += 1;\n        } else {\n            hash_map.insert(num, 1);\n        }\n    }\n    for num in array_nums2 {\n        if hash_map.contains_key(&num) {\n            let count = hash_map.get_mut(&num).unwrap();\n            if *count > 0 {\n                result.push(num);\n                *count -= 1;\n            }\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut map = HashMap::new();\n    for num in array_nums1 {\n        map.insert(num, 1);\n    }\n    for num in array_nums2 {\n        if map.contains_key(&num) {\n            result.push(num);\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut set: HashSet<isize> = HashSet::new();\n    for num in array_nums1 {\n        set.insert(num);\n    }\n    for num in array_nums2 {\n        if set.contains(&num) {\n            result.push(num);\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut set_nums1: HashSet<isize> = HashSet::new();\n    let mut set_nums2: HashSet<isize> = HashSet::new();\n\n    for num in array_nums1 {\n        set_nums1.insert(num);\n    }\n\n    for num in array_nums2 {\n        set_nums2.insert(num);\n    }\n\n    for num in set_nums1 {\n        if set_nums2.contains(&num) {\n            result.push(num);\n        }\n    }\n\n    result",
    "    let mut result = Vec::new();\n    let mut map = HashMap::new();\n    for num in array_nums1 {\n        map.insert(num, 1);\n    }\n    for num in array_nums2 {\n        if map.contains_key(&num) {\n            result.push(num);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut map = HashMap::new();\n\n    for num in array_nums1 {\n        map.insert(num, true);\n    }\n\n    for num in array_nums2 {\n        if map.contains_key(&num) {\n            result.push(num);\n        }\n    }\n\n    result",
    "    let mut result = Vec::new();\n    let mut set = HashSet::new();\n    for num in array_nums1 {\n        set.insert(num);\n    }\n    for num in array_nums2 {\n        if set.contains(&num) {\n            result.push(num);\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..array_nums1.len() {\n        if map.contains_key(&array_nums1[i]) {\n            let count = map.get_mut(&array_nums1[i]).unwrap();\n            *count += 1;\n        } else {\n            map.insert(array_nums1[i], 1);\n        }\n    }\n    for i in 0..array_nums2.len() {\n        if map.contains_key(&array_nums2[i]) {\n            let count = map.get_mut(&array_nums2[i]).unwrap();\n            if *count > 0 {\n                result.push(array_nums2[i]);\n                *count -= 1;\n            }\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut set_nums1: HashSet<isize> = HashSet::new();\n    let mut set_nums2: HashSet<isize> = HashSet::new();\n    for num in array_nums1 {\n        set_nums1.insert(num);\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num);\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(&num) {\n            result.push(num);\n        }\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for num in array_nums1 {\n        if map.contains_key(&num) {\n            let count = map.get_mut(&num).unwrap();\n            *count += 1;\n        } else {\n            map.insert(num, 1);\n        }\n    }\n    for num in array_nums2 {\n        if map.contains_key(&num) {\n            let count = map.get_mut(&num).unwrap();\n            if *count > 0 {\n                result.push(num);\n                *count -= 1;\n            }\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut hash_map = HashMap::new();\n\n    for num in array_nums1 {\n        hash_map.insert(num, 1);\n    }\n\n    for num in array_nums2 {\n        if hash_map.contains_key(&num) {\n            result.push(num);\n        }\n    }\n\n    result",
    "    let mut result = Vec::new();\n    for num in array_nums1 {\n        if array_nums2.contains(&num) {\n            result.push(num);\n        }\n    }\n    result"
  ]
}