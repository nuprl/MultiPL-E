{
  "name": "mbpp_743_rotate_right",
  "language": "rs",
  "prompt": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list",
    "    let mut result = Vec::new();\n    let mut i = 0;\n    while i < list.len() {\n        result.push(list[((i as isize) + m) as usize % list.len()]);\n        i += 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut i = 0;\n    let n = list.len() as isize;\n    while i < n {\n        result.push(list[((i + m) % n) as usize]);\n        i += 1;\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut list_len = list.len();\n    let mut m = m % list_len;\n    for i in 0..list_len {\n        result.push(list[(list_len - m + i) % list_len]);\n    }\n    result",
    "    let mut new_list = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        new_list.push(list[(i + m as usize) % len]);\n    }\n    new_list",
    "    let mut new_list = Vec::new();\n    let n = list.len();\n    for i in 0..n {\n        new_list.push(list[((i + m) % n) as usize]);\n    }\n    new_list",
    "    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        m -= 1;\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last_item = list.pop().unwrap();\n        list.insert(0, last_item);\n        m -= 1;\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    if m > 0 {\n        while m > 0 {\n            let last_element = list.pop().unwrap();\n            list.insert(0, last_element);\n            m -= 1;\n        }\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    if m == 0 {\n        return list;\n    }\n    let mut gcd = gcd(m, n);\n    while gcd != 0 {\n        let temp = list[(n - gcd) as usize];\n        let mut j = n - gcd;\n        while j >= gcd {\n            list[j as usize] = list[(j - gcd) as usize];\n            j -= gcd;\n        }\n        list[(gcd - 1) as usize] = temp;\n        gcd -= 1;\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list",
    "    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result",
    "    let mut rotated_list: Vec<isize> = Vec::new();\n    let mut list_len = list.len();\n    let mut m = m;\n    if m > list_len as isize {\n        m = m % list_len as isize;\n    }\n    for i in 0..list_len {\n        rotated_list.push(list[(i + list_len - m as usize) % list_len]);\n    }\n    rotated_list",
    "    let mut new_list = Vec::new();\n    let mut list = list.clone();\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        new_list.push(last);\n        m -= 1;\n    }\n    new_list.reverse();\n    list.append(&mut new_list);\n    list",
    "    let mut result: Vec<isize> = Vec::new();\n    let mut m = m;\n    let mut list = list;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    for i in 0..n {\n        result.push(list[(n - m + i) as usize % n as usize]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    for i in list {\n        result.push(i);\n    }\n    result",
    "    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    let mut i = 0;\n    while i < m {\n        let temp = list[len - 1];\n        for j in (0..len).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list",
    "    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut list = list.clone();\n    list.reverse();\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    result.reverse();\n    result.append(&mut list);\n    result",
    "    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut new_list = Vec::new();\n    for i in 0..len {\n        let index = (i as isize + m) % len as isize;\n        new_list.push(list[index as usize]);\n    }\n    new_list"
  ]
}