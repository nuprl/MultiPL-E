{
  "name": "mbpp_622_get_median",
  "language": "rs",
  "prompt": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpu5gxdw_2.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpaon5py7o.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaon5py7o.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaon5py7o.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaon5py7o.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpyj78dqv9.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    return (m1 + m2) as f64 / 2.0;\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3f28v2r2.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3f28v2r2.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3f28v2r2.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3f28v2r2.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4kg1zanm.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    loop {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n\n        if count == n {\n            break;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp5mypt2y4.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5mypt2y4.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5mypt2y4.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5mypt2y4.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for count in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0djzs20h.rs:20:12\n   |\n20 |         if arr1[i] < arr2[j] {\n   |            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0djzs20h.rs:20:22\n   |\n20 |         if arr1[i] < arr2[j] {\n   |                      ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0djzs20h.rs:22:18\n   |\n22 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0djzs20h.rs:26:18\n   |\n26 |             m2 = arr2[j];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = 0;\n    let mut m2 = 0;\n    let mut median = 0.0;\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    median = (m1 + m2) as f64 / 2.0;\n    median\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmptkyiklvq.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptkyiklvq.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptkyiklvq.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptkyiklvq.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count: isize = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    loop {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n\n        if count == n {\n            break;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmplrfti32f.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpk0i1_zz7.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4kg1zanm.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpu5gxdw_2.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = 0;\n    let mut m2 = 0;\n\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmp1qlhhxuw.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpovnzxb3b.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1.0;\n    let mut m2 = -1.0;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j] as f64;\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i] as f64;\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i] as f64;\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j] as f64;\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzvy5fri0.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzvy5fri0.rs:16:18\n   |\n16 |             m2 = arr1[i] as f64;\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzvy5fri0.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzvy5fri0.rs:20:18\n   |\n20 |             m2 = arr1[i] as f64;\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpovnzxb3b.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpu5gxdw_2.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpu5gxdw_2.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpu5gxdw_2.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpu5gxdw_2.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu5gxdw_2.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4kg1zanm.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpovnzxb3b.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpovnzxb3b.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = 0;\n    let mut m2 = 0;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpiuepuh_i.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiuepuh_i.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiuepuh_i.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiuepuh_i.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    let mut median = 0.0;\n    while count <= n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        median = (m1 + m2) as f64 / 2.0;\n    } else {\n        median = m2 as f64;\n    }\n    median\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4sso27h_.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4sso27h_.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4sso27h_.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4sso27h_.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpb6bs1erf.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpb6bs1erf.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpovnzxb3b.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.0`,\n right: `16.0`', /tmp/tmpnyt5vjzi.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    let mut count = 0;\n    while count < n {\n        count += 1;\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmp2ukiucxz.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmptyr1jea_.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptyr1jea_.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptyr1jea_.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptyr1jea_.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkgrhfacu.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkgrhfacu.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpk0i1_zz7.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    let mut count = 0;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmp8elv01ib.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count: isize = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpj_o7_zee.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpj_o7_zee.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpj_o7_zee.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpj_o7_zee.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpyj78dqv9.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4kg1zanm.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4kg1zanm.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpovnzxb3b.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovnzxb3b.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphc21ib38.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphc21ib38.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbglmwt0h.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbglmwt0h.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2meqymun.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2meqymun.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpk0i1_zz7.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsun36asm.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun36asm.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}