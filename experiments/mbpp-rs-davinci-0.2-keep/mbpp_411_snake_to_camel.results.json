{
  "name": "mbpp_411_snake_to_camel",
  "language": "rs",
  "prompt": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for ch in word.chars() {\n        if ch == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(ch.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(ch);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_char_is_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_char_is_upper = true;\n        } else {\n            if next_char_is_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_char_is_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpr8ifzn1h.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmp3h0bg44p.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_ascii_uppercase());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else if next_upper {\n            result.push(c.to_uppercase().next().unwrap());\n            next_upper = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpgl_s9feo.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push_str(&c.to_uppercase().to_string());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut last_char_is_underscore = false;\n    for c in word.chars() {\n        if c == '_' {\n            last_char_is_underscore = true;\n        } else {\n            if last_char_is_underscore {\n                result.push(c.to_uppercase().next().unwrap());\n                last_char_is_underscore = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpq1erkzcu.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_ascii_uppercase());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpcbzutgl5.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut last_char_is_underscore = false;\n    for c in word.chars() {\n        if c == '_' {\n            last_char_is_underscore = true;\n        } else {\n            if last_char_is_underscore {\n                result.push(c.to_uppercase().next().unwrap());\n                last_char_is_underscore = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpq1erkzcu.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut last_char_was_underscore = false;\n    for c in word.chars() {\n        if c == '_' {\n            last_char_was_underscore = true;\n        } else {\n            if last_char_was_underscore {\n                result.push(c.to_uppercase().next().unwrap());\n            } else {\n                result.push(c);\n            }\n            last_char_was_underscore = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmp9fu1jka7.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push_str(&c.to_uppercase().to_string());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n\n    if let Some(first) = chars.next() {\n        result.push(first);\n    }\n\n    for c in chars {\n        if c == '_' {\n            if let Some(next) = chars.next() {\n                result.push(next.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `chars`\n   --> /tmp/tmp2aogq4o6.rs:12:33\n    |\n3   |     let mut chars = word.chars();\n    |         --------- move occurs because `chars` has type `Chars<'_>`, which does not implement the `Copy` trait\n...\n10  |     for c in chars {\n    |              ----- `chars` moved due to this implicit call to `.into_iter()`\n11  |         if c == '_' {\n12  |             if let Some(next) = chars.next() {\n    |                                 ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `chars`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut iter = word.chars();\n    let mut first = true;\n    while let Some(c) = iter.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for ch in word.chars() {\n        if ch == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&ch.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(ch);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpgr_2lheu.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let c = chars.next().unwrap();\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpzbih48ro.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut last_char = ' ';\n    for c in word.chars() {\n        if c == '_' {\n            last_char = '_';\n        } else {\n            if last_char == '_' {\n                result.push(c.to_uppercase().next().unwrap());\n            } else {\n                result.push(c);\n            }\n            last_char = c;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpef1qebph.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpghvmuwna.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in word.chars() {\n        if prev_char == '_' {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"android_Tv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpotyrlcx3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_letter = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_letter = true;\n        } else {\n            if first_letter {\n                result.push(c.to_uppercase().next().unwrap());\n                first_letter = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut word = word.chars().peekable();\n    let mut result = String::new();\n\n    while let Some(c) = word.next() {\n        if c == '_' {\n            result.push(word.next().unwrap().to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpc3nb8px2.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_letter = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_letter = true;\n        } else if first_letter {\n            result.push(c.to_uppercase().next().unwrap());\n            first_letter = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_ascii_uppercase());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpcbzutgl5.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in word.chars() {\n        if c == '_' {\n            prev_char = '_';\n        } else if prev_char == '_' {\n            result.push(c.to_uppercase().next().unwrap());\n            prev_char = c;\n        } else {\n            result.push(c);\n            prev_char = c;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmp6xglyk75.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            result.push(if is_first {\n                is_first = false;\n                c.to_uppercase().next().unwrap()\n            } else {\n                c\n            });\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize_next = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize_next = true;\n        } else {\n            if capitalize_next {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize_next = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmp0d_pzp4s.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_word = true;\n    for w in word.split('_') {\n        if first_word {\n            result.push_str(w);\n            first_word = false;\n        } else {\n            result.push_str(&w.to_uppercase());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTV\"`,\n right: `\"AndroidTv\"`', /tmp/tmpb1xlqhvz.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next_char = chars.next().unwrap();\n            result.push(next_char.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplq6r6tzt.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmppmn8an9r.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmp3h0bg44p.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push_str(&c.to_uppercase().to_string());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n            } else {\n                result.push(c);\n            }\n            next_upper = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpqyhcc0_a.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_word = true;\n    for w in word.split(\"_\") {\n        if first_word {\n            result.push_str(w);\n            first_word = false;\n        } else {\n            result.push_str(&w.to_uppercase());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTV\"`,\n right: `\"AndroidTv\"`', /tmp/tmpfagi52hr.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first_char = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else if first_char {\n            result.push(c.to_uppercase().next().unwrap());\n            first_char = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first_char = true;\n        } else {\n            if is_first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for ch in word.chars() {\n        if ch == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(ch.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(ch);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmp3h0bg44p.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_letter = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_letter = true;\n        } else {\n            if first_letter {\n                result.push(c.to_uppercase().next().unwrap());\n                first_letter = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n            } else {\n                result.push(c);\n            }\n            first = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else if first_char {\n            result.push(c.to_uppercase().next().unwrap());\n            first_char = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpar5ilrzo.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_ascii_uppercase());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_letter = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_letter = true;\n        } else if first_letter {\n            result.push(c.to_ascii_uppercase());\n            first_letter = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut words = word.split('_');\n    let mut result = String::new();\n    result.push_str(words.next().unwrap());\n    for word in words {\n        result.push_str(&word.chars().enumerate().map(|(i, c)| {\n            if i == 0 {\n                c.to_uppercase().collect::<String>()\n            } else {\n                c.to_lowercase().collect::<String>()\n            }\n        }).collect::<String>());\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmppu95ov5v.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else if first_char {\n            result.push(c.to_uppercase().next().unwrap());\n            first_char = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmppmn8an9r.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmppmn8an9r.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpghvmuwna.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_letter = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_letter = true;\n        } else {\n            if first_letter {\n                result.push(c.to_uppercase().next().unwrap());\n                first_letter = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut res = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                res.push_str(&c.to_uppercase().to_string());\n                first = false;\n            } else {\n                res.push(c);\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            if let Some(c) = chars.next() {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpe6x_mesb.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first_char = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmpn_7qqja5.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut is_first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first_char = true;\n        } else {\n            if is_first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmprhh2fvy9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmplin_9qnw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut iter = word.chars();\n    let mut first = true;\n    while let Some(c) = iter.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"androidTv\"`,\n right: `\"AndroidTv\"`', /tmp/tmphepdappk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}