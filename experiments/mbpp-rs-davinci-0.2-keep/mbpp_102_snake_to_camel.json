{
  "name": "mbpp_102_snake_to_camel",
  "language": "rs",
  "prompt": "/// Write a function to convert a snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"python_program\")), String::from(\"PythonProgram\"));\n    assert_eq!(candidate(String::from(\"python_language\")), String::from(\"PythonLanguage\"));\n    assert_eq!(candidate(String::from(\"programming_language\")), String::from(\"ProgrammingLanguage\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char_was_underscore = false;\n    for c in word.chars() {\n        if c == '_' {\n            last_char_was_underscore = true;\n        } else {\n            if last_char_was_underscore {\n                result.push(c.to_uppercase().next().unwrap());\n                last_char_was_underscore = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            result.push(if is_first {\n                is_first = false;\n                c.to_uppercase().next().unwrap()\n            } else {\n                c\n            });\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            if let Some(c) = chars.next() {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in word.chars() {\n        if c == '_' {\n            prev_char = ' ';\n        } else if prev_char == ' ' {\n            result.push(c.to_uppercase().next().unwrap());\n            prev_char = c;\n        } else {\n            result.push(c);\n            prev_char = c;\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            if let Some(c) = chars.next() {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            if let Some(c) = chars.next() {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut camel_word = String::new();\n    let mut capitalize_next = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize_next = true;\n        } else {\n            if capitalize_next {\n                camel_word.push(c.to_uppercase().next().unwrap());\n                capitalize_next = false;\n            } else {\n                camel_word.push(c);\n            }\n        }\n    }\n    camel_word",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            if let Some(c) = chars.next() {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            result.push(if capitalize {\n                capitalize = false;\n                c.to_uppercase().next().unwrap()\n            } else {\n                c\n            });\n        }\n    }\n    result",
    "    word.split(\"_\")\n        .map(|s| s.to_string())\n        .enumerate()\n        .map(|(i, s)| {\n            if i == 0 {\n                s.to_lowercase()\n            } else {\n                s.chars().enumerate().map(|(j, c)| {\n                    if j == 0 {\n                        c.to_uppercase().next().unwrap()\n                    } else {\n                        c\n                    }\n                }).collect()\n            }\n        }).collect()",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut first_word = true;\n    for w in word.split('_') {\n        if first_word {\n            result.push_str(w);\n            first_word = false;\n        } else {\n            result.push_str(&w.to_uppercase());\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_ascii_uppercase());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else if first_char {\n            result.push(c.to_uppercase().next().unwrap());\n            first_char = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            if let Some(c) = chars.next() {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut next_char = chars.next();\n    while let Some(c) = next_char {\n        if c == '_' {\n            next_char = chars.next();\n            if let Some(c) = next_char {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n        next_char = chars.next();\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut chars = word.chars();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_letter = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            first_letter = true;\n        } else {\n            if first_letter {\n                result.push(c.to_uppercase().next().unwrap());\n                first_letter = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n            } else {\n                result.push(c);\n            }\n            is_first = false;\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char_is_underscore = false;\n    for c in word.chars() {\n        if c == '_' {\n            last_char_is_underscore = true;\n        } else {\n            if last_char_is_underscore {\n                result.push(c.to_uppercase().next().unwrap());\n            } else {\n                result.push(c);\n            }\n            last_char_is_underscore = false;\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char_was_underscore = false;\n    for c in word.chars() {\n        if c == '_' {\n            last_char_was_underscore = true;\n        } else {\n            if last_char_was_underscore {\n                result.push(c.to_ascii_uppercase());\n            } else {\n                result.push(c);\n            }\n            last_char_was_underscore = false;\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char_is_underscore = false;\n    for c in word.chars() {\n        if c == '_' {\n            last_char_is_underscore = true;\n        } else {\n            if last_char_is_underscore {\n                result.push(c.to_uppercase().next().unwrap());\n                last_char_is_underscore = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            match chars.next() {\n                Some(c) => result.push(c.to_ascii_uppercase()),\n                None => break,\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut chars = word.chars();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in word.chars() {\n        if c == '_' {\n            prev_char = c;\n            continue;\n        }\n        if prev_char == '_' {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut previous_char_is_underscore = false;\n    for c in word.chars() {\n        if previous_char_is_underscore {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n        previous_char_is_underscore = c == '_';\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n\n    loop {\n        match chars.next() {\n            Some(c) => {\n                if c == '_' {\n                    result.push(chars.next().unwrap().to_uppercase().next().unwrap());\n                } else {\n                    result.push(c);\n                }\n            }\n            None => break,\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut word = word;\n    word.insert(0, '_');\n    let mut result = String::new();\n    let mut is_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            is_upper = true;\n        } else {\n            if is_upper {\n                result.push(c.to_ascii_uppercase());\n                is_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first_word = true;\n    for word in word.split('_') {\n        if is_first_word {\n            result.push_str(word);\n            is_first_word = false;\n        } else {\n            result.push_str(&word.to_uppercase());\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push_str(&c.to_uppercase().to_string());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut is_first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in word.chars() {\n        if c == '_' {\n            prev_char = c;\n            continue;\n        }\n        if prev_char == '_' {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first_char = true;\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_ascii_uppercase());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_is_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_is_upper = true;\n        } else {\n            if next_is_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_is_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for ch in word.chars() {\n        if ch == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(ch.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(ch);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in word.chars() {\n        if c == '_' {\n            prev_char = c;\n            continue;\n        }\n        if prev_char == '_' {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push_str(&c.to_uppercase().to_string());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            match chars.next() {\n                Some(c) => result.push(c.to_uppercase().next().unwrap()),\n                None => break,\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize_next = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize_next = true;\n        } else {\n            if capitalize_next {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize_next = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char_is_underscore = false;\n    for c in word.chars() {\n        if last_char_is_underscore {\n            result.push(c.to_uppercase().next().unwrap());\n            last_char_is_underscore = false;\n        } else if c == '_' {\n            last_char_is_underscore = true;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            result.push(if is_first { c.to_uppercase().next().unwrap() } else { c });\n            is_first = false;\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_ascii_uppercase());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else if next_upper {\n            result.push(c.to_uppercase().next().unwrap());\n            next_upper = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            result.push(if next_upper { c.to_uppercase().next().unwrap() } else { c });\n            next_upper = false;\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    let mut next_upper = false;\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            if let Some(c) = chars.next() {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            is_upper = true;\n        } else {\n            if is_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                is_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut chars = word.chars();\n    let mut next_char = chars.next();\n    while next_char.is_some() {\n        let c = next_char.unwrap();\n        if c == '_' {\n            next_char = chars.next();\n            let c = next_char.unwrap();\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n        next_char = chars.next();\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first_char = true;\n        } else {\n            if is_first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            result.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_word = String::new();\n    let mut first_letter = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_letter = true;\n        } else {\n            if first_letter {\n                new_word.push(c.to_uppercase().collect::<Vec<char>>()[0]);\n                first_letter = false;\n            } else {\n                new_word.push(c);\n            }\n        }\n    }\n    new_word"
  ]
}