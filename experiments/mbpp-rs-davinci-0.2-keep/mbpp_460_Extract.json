{
  "name": "mbpp_460_Extract",
  "language": "rs",
  "prompt": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res",
    "    lst.iter().map(|x| x[0]).collect()",
    "    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res",
    "    let mut res: Vec<isize> = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res",
    "    lst.iter().map(|x| x[0]).collect()",
    "    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result",
    "    lst.iter().map(|x| x[0]).collect()",
    "    lst.iter().map(|x| x[0]).collect()",
    "    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result",
    "    lst.iter().map(|x| x[0]).collect()",
    "    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res",
    "    lst.iter().map(|x| x[0]).collect()",
    "    lst.iter().map(|x| x[0]).collect()",
    "    lst.iter().map(|x| x[0]).collect()",
    "    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res",
    "    lst.iter().map(|x| x[0]).collect()",
    "    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for sublist in lst.iter() {\n        result.push(sublist[0]);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res"
  ]
}