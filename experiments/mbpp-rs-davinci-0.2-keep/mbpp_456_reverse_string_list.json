{
  "name": "mbpp_456_reverse_string_list",
  "language": "rs",
  "prompt": "/// Write a function to reverse each string in a given list of string values.\nfn reverse_string_list(stringlist: Vec<String>) -> Vec<String> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = reverse_string_list;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\"), String::from(\"White\"), String::from(\"Black\")]), vec![String::from(\"deR\"), String::from(\"neerG\"), String::from(\"eulB\"), String::from(\"etihW\"), String::from(\"kcalB\")]);\n    assert_eq!(candidate(vec![String::from(\"john\"), String::from(\"amal\"), String::from(\"joel\"), String::from(\"george\")]), vec![String::from(\"nhoj\"), String::from(\"lama\"), String::from(\"leoj\"), String::from(\"egroeg\")]);\n    assert_eq!(candidate(vec![String::from(\"jack\"), String::from(\"john\"), String::from(\"mary\")]), vec![String::from(\"kcaj\"), String::from(\"nhoj\"), String::from(\"yram\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    stringlist.iter().map(|s| s.chars().rev().collect::<String>()).collect()",
    "    let mut result: Vec<String> = Vec::new();\n    for s in stringlist {\n        result.push(s.chars().rev().collect());\n    }\n    result",
    "    let mut reversed_list: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string: String = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    return reversed_list;",
    "    let mut reversed_list: Vec<String> = Vec::new();\n    for s in stringlist {\n        let mut reversed_string = String::new();\n        for c in s.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    return reversed_list;",
    "    let mut reversed_stringlist: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string: String = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_stringlist.push(reversed_string);\n    }\n    reversed_stringlist",
    "    let mut reversed_list: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string: String = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    reversed_list",
    "    let mut reversed_list: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string: String = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    reversed_list",
    "    let mut reversed_list = Vec::new();\n    for string in stringlist {\n        let mut reversed_string = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    reversed_list",
    "    stringlist.iter().map(|s| s.chars().rev().collect::<String>()).collect()",
    "    let mut new_stringlist = Vec::new();\n    for string in stringlist {\n        let mut new_string = String::new();\n        for c in string.chars().rev() {\n            new_string.push(c);\n        }\n        new_stringlist.push(new_string);\n    }\n    new_stringlist",
    "    let mut reversed_list: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string: String = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    reversed_list",
    "    let mut reversed_list: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string: String = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    reversed_list",
    "    stringlist.iter().map(|s| s.chars().rev().collect()).collect()",
    "    let mut reversed_stringlist: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_stringlist.push(reversed_string);\n    }\n    reversed_stringlist",
    "    let mut reversed_stringlist: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string: String = String::new();\n        for c in string.chars() {\n            reversed_string.insert(0, c);\n        }\n        reversed_stringlist.push(reversed_string);\n    }\n    return reversed_stringlist;",
    "    let mut reversed_list: Vec<String> = Vec::new();\n    for string in stringlist {\n        let mut reversed_string = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    reversed_list",
    "    let mut reversed_list: Vec<String> = vec![];\n    for string in stringlist {\n        let mut reversed_string: String = String::new();\n        for c in string.chars().rev() {\n            reversed_string.push(c);\n        }\n        reversed_list.push(reversed_string);\n    }\n    return reversed_list;",
    "    stringlist.iter().map(|s| s.chars().rev().collect::<String>()).collect()",
    "    stringlist.iter().map(|s| s.chars().rev().collect()).collect()",
    "    stringlist.iter().map(|s| s.chars().rev().collect()).collect()"
  ]
}