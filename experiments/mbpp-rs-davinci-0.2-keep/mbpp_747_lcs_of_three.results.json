{
  "name": "mbpp_747_lcs_of_three",
  "language": "rs",
  "prompt": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(\n                        std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpjzujucin.rs:20:35\n   |\n20 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpjzujucin.rs:20:56\n   |\n20 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0bnsrx87.rs:19:36\n   |\n19 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0bnsrx87.rs:19:58\n   |\n19 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphz4xm_kx.rs:16:34\n   |\n16 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphz4xm_kx.rs:16:38\n   |\n16 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp56zba4m3.rs:15:34\n   |\n15 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp56zba4m3.rs:15:54\n   |\n15 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6xzaybhi.rs:16:34\n   |\n16 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6xzaybhi.rs:17:25\n   |\n17 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp8lcrpf81.rs:19:34\n   |\n19 |                     L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpfuqvba0r.rs:13:35\n   |\n13 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpfuqvba0r.rs:13:56\n   |\n13 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzlo4c149.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzlo4c149.rs:20:25\n   |\n20 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpppx5tkqz.rs:18:34\n   |\n18 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpppx5tkqz.rs:19:25\n   |\n19 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpl592ps_u.rs:21:35\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpl592ps_u.rs:21:56\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:19:34\n   |\n19 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:20:25\n   |\n20 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 0..=x_len {\n        for j in 0..=y_len {\n            for k in 0..=z_len {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = dp[i - 1][j][k].max(dp[i][j - 1][k].max(dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[x_len][y_len][z_len]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n    let mut lcs_matrix = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n    for i in 0..x_len + 1 {\n        for j in 0..y_len + 1 {\n            for k in 0..z_len + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs_matrix[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs_matrix[i][j][k] = lcs_matrix[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs_matrix[i][j][k] = max(max(lcs_matrix[i - 1][j][k], lcs_matrix[i][j - 1][k]), lcs_matrix[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    lcs_matrix[x_len][y_len][z_len]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw5i8_z7s.rs:15:43\n   |\n15 |                     lcs_matrix[i][j][k] = max(max(lcs_matrix[i - 1][j][k], lcs_matrix[i][j - 1][k]), lcs_matrix[i][j][k - 1]);\n   |                                           ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw5i8_z7s.rs:15:47\n   |\n15 |                     lcs_matrix[i][j][k] = max(max(lcs_matrix[i - 1][j][k], lcs_matrix[i][j - 1][k]), lcs_matrix[i][j][k - 1]);\n   |                                               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpb9n4ws1w.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpb9n4ws1w.rs:19:56\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmprsjpcvvb.rs:15:34\n   |\n15 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmprsjpcvvb.rs:15:38\n   |\n15 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmprmwede52.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmprmwede52.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4c43b390.rs:21:35\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]);\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:34\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:54\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp: Vec<Vec<Vec<isize>>> = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0ncsoks5.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0ncsoks5.rs:20:25\n   |\n20 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmptiyszlo1.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmptiyszlo1.rs:17:39\n   |\n17 |                     dp[i][j][k] = max(max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpo7befcv5.rs:18:36\n   |\n18 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpo7befcv5.rs:18:58\n   |\n18 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplq4al38m.rs:13:34\n   |\n13 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplq4al38m.rs:13:38\n   |\n13 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut l = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    l[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    l[i][j][k] = l[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    l[i][j][k] = max(\n                        max(l[i - 1][j][k], l[i][j - 1][k]),\n                        l[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    return l[m][n][o];\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpx2u_s640.rs:18:34\n   |\n18 |                     l[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpx2u_s640.rs:19:25\n   |\n19 |                         max(l[i - 1][j][k], l[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(\n                        std::cmp::max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n                        lcs[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    return dp[m][n][o];\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4de_hegv.rs:16:35\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4de_hegv.rs:16:56\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(\n                        std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppl4l6r0g.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppl4l6r0g.rs:18:25\n   |\n18 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpbu6_izc3.rs:15:34\n   |\n15 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpbu6_izc3.rs:15:38\n   |\n15 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp1oiliwh0.rs:17:36\n   |\n17 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp1oiliwh0.rs:17:58\n   |\n17 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = dp[i - 1][j][k].max(dp[i][j - 1][k].max(dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppi33t14x.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppi33t14x.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvsy93ya8.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvsy93ya8.rs:19:56\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n    for i in 0..x_len {\n        for j in 0..y_len {\n            for k in 0..z_len {\n                if X.chars().nth(i) == Y.chars().nth(j) && X.chars().nth(i) == Z.chars().nth(k) {\n                    dp[i + 1][j + 1][k + 1] = dp[i][j][k] + 1;\n                } else {\n                    dp[i + 1][j + 1][k + 1] = max(dp[i][j + 1][k + 1], max(dp[i + 1][j][k + 1], dp[i + 1][j + 1][k]));\n                }\n            }\n        }\n    }\n    dp[x_len][y_len][z_len]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmprcdxwedk.rs:13:47\n   |\n13 |                     dp[i + 1][j + 1][k + 1] = max(dp[i][j + 1][k + 1], max(dp[i + 1][j][k + 1], dp[i + 1][j + 1][k]));\n   |                                               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmprcdxwedk.rs:13:72\n   |\n13 |                     dp[i + 1][j + 1][k + 1] = max(dp[i][j + 1][k + 1], max(dp[i + 1][j][k + 1], dp[i + 1][j + 1][k]));\n   |                                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp32dnv0q_.rs:17:36\n   |\n17 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp32dnv0q_.rs:17:58\n   |\n17 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpibykxhee.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpibykxhee.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:34\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:54\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(std::cmp::max(lcs[i - 1][j][k], lcs[i][j - 1][k]), lcs[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppl4l6r0g.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppl4l6r0g.rs:18:25\n   |\n18 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:34\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:38\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(\n                        max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n                        lcs[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpm3y9yisq.rs:18:36\n   |\n18 |                     lcs[i][j][k] = max(\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpm3y9yisq.rs:19:25\n   |\n19 |                         max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:34\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:38\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:34\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:38\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzmkdfyel.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzmkdfyel.rs:19:25\n   |\n19 |                         max(dp[i][j - 1][k], dp[i][j][k - 1]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzmkdfyel.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzmkdfyel.rs:19:25\n   |\n19 |                         max(dp[i][j - 1][k], dp[i][j][k - 1]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(std::cmp::max(lcs[i - 1][j][k], lcs[i][j - 1][k]), lcs[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpppx5tkqz.rs:18:34\n   |\n18 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpppx5tkqz.rs:19:25\n   |\n19 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmptzwf5kud.rs:16:34\n   |\n16 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmptzwf5kud.rs:16:38\n   |\n16 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkqc9emap.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]);\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L::[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error: expected identifier, found `[`\n  --> /tmp/tmp59ept1uw.rs:21:28\n   |\n21 |                         L::[i][j][k - 1],\n   |                            ^ expected identifier\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvtr2fref.rs:16:35\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvtr2fref.rs:16:56\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:19:34\n   |\n19 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:20:25\n   |\n20 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(\n                        std::cmp::max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n                        lcs[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpyjrv9ys2.rs:13:35\n   |\n13 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpyjrv9ys2.rs:13:56\n   |\n13 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o] as isize\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpwvlrvpr8.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpwvlrvpr8.rs:19:56\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_svo28yg.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_svo28yg.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:19:34\n   |\n19 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:20:25\n   |\n20 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if X.chars().nth(i - 1).unwrap() == Y.chars().nth(j - 1).unwrap() &&\n                   X.chars().nth(i - 1).unwrap() == Z.chars().nth(k - 1).unwrap() {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0l6qlr1_.rs:16:35\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0l6qlr1_.rs:16:56\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpb9n4ws1w.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpb9n4ws1w.rs:19:56\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpl592ps_u.rs:21:35\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpl592ps_u.rs:21:56\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpovf984sh.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpovf984sh.rs:18:25\n   |\n18 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && y[j - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpy40m_oax.rs:16:34\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpy40m_oax.rs:16:54\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:34\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:38\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:34\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:38\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n\n    let mut lcs_matrix: Vec<Vec<Vec<isize>>> = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 1..x_len + 1 {\n        for j in 1..y_len + 1 {\n            for k in 1..z_len + 1 {\n                if X.chars().nth(i - 1).unwrap() == Y.chars().nth(j - 1).unwrap() && X.chars().nth(i - 1).unwrap() == Z.chars().nth(k - 1).unwrap() {\n                    lcs_matrix[i][j][k] = lcs_matrix[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs_matrix[i][j][k] = std::cmp::max(std::cmp::max(lcs_matrix[i - 1][j][k], lcs_matrix[i][j - 1][k]), lcs_matrix[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    lcs_matrix[x_len][y_len][z_len]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp42e8e8vx.rs:14:35\n   |\n14 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp42e8e8vx.rs:14:56\n   |\n14 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:34\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuxtakwr_.rs:17:38\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzmkdfyel.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzmkdfyel.rs:19:25\n   |\n19 |                         max(dp[i][j - 1][k], dp[i][j][k - 1]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(\n                        std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:19:34\n   |\n19 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:20:25\n   |\n20 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxmc5kgvq.rs:21:36\n   |\n21 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxmc5kgvq.rs:21:58\n   |\n21 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]);\n                    dp[i][j][k] = std::cmp::max(dp[i][j][k], dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L::[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error: expected identifier, found `[`\n  --> /tmp/tmpp6sjzsny.rs:19:28\n   |\n19 |                         L::[i][j][k - 1],\n   |                            ^ expected identifier\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && y[j - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpge47_pyi.rs:16:36\n   |\n16 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpge47_pyi.rs:16:58\n   |\n16 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpwacge4qz.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpwacge4qz.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmql3_lhd.rs:16:36\n   |\n16 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmql3_lhd.rs:16:58\n   |\n16 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(max(lcs[i - 1][j][k], lcs[i][j - 1][k]), lcs[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd2pqdzkr.rs:17:36\n   |\n17 |                     lcs[i][j][k] = max(max(lcs[i - 1][j][k], lcs[i][j - 1][k]), lcs[i][j][k - 1]);\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd2pqdzkr.rs:17:40\n   |\n17 |                     lcs[i][j][k] = max(max(lcs[i - 1][j][k], lcs[i][j - 1][k]), lcs[i][j][k - 1]);\n   |                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    return dp[m][n][o];\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk39tmj13.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk39tmj13.rs:20:25\n   |\n20 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpij9a__9y.rs:16:35\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpij9a__9y.rs:16:56\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkgxi3lhh.rs:20:35\n   |\n20 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkgxi3lhh.rs:20:56\n   |\n20 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpy40m_oax.rs:16:34\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpy40m_oax.rs:16:54\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphz4xm_kx.rs:16:34\n   |\n16 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphz4xm_kx.rs:16:38\n   |\n16 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpca8x_rdm.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpca8x_rdm.rs:18:39\n   |\n18 |                     dp[i][j][k] = max(max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n   |                                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpl592ps_u.rs:21:35\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpl592ps_u.rs:21:56\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(lcs[i - 1][j][k], std::cmp::max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkgxi3lhh.rs:20:35\n   |\n20 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkgxi3lhh.rs:20:56\n   |\n20 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp: Vec<Vec<Vec<isize>>> = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp464sigh2.rs:21:35\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp464sigh2.rs:21:56\n   |\n21 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:19:34\n   |\n19 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:20:25\n   |\n20 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzrdkw7x5.rs:17:34\n   |\n17 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzrdkw7x5.rs:18:25\n   |\n18 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmqb3i4pb.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmqb3i4pb.rs:16:25\n   |\n16 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp: Vec<Vec<Vec<isize>>> = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpm7bhxqsk.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpm7bhxqsk.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvo8tavlh.rs:19:34\n   |\n19 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvo8tavlh.rs:20:25\n   |\n20 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:34\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:54\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:34\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:54\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 0..=x_len {\n        for j in 0..=y_len {\n            for k in 0..=z_len {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[x_len][y_len][z_len]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmprnwp9jnk.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmprnwp9jnk.rs:19:56\n   |\n19 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaet1gpdo.rs:19:36\n   |\n19 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaet1gpdo.rs:19:58\n   |\n19 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphz4xm_kx.rs:16:34\n   |\n16 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphz4xm_kx.rs:16:38\n   |\n16 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp56zba4m3.rs:15:34\n   |\n15 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp56zba4m3.rs:15:54\n   |\n15 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(\n                        max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n                        lcs[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp8p10yic9.rs:18:36\n   |\n18 |                     lcs[i][j][k] = max(\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp8p10yic9.rs:19:25\n   |\n19 |                         max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:34\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15fo1wec.rs:16:54\n   |\n16 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpe69187wp.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpe69187wp.rs:16:25\n   |\n16 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71m4t7j2.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:19:34\n   |\n19 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9bg_mp_c.rs:20:25\n   |\n20 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L::[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error: expected identifier, found `[`\n  --> /tmp/tmpp6sjzsny.rs:19:28\n   |\n19 |                         L::[i][j][k - 1],\n   |                            ^ expected identifier\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_51_j2yy.rs:19:35\n   |\n19 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_51_j2yy.rs:21:25\n   |\n21 |                         max(dp[i][j - 1][k], dp[i][j][k - 1]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp1cu38k05.rs:16:36\n   |\n16 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp1cu38k05.rs:16:58\n   |\n16 |                     lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n   |                                                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L::[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error: expected identifier, found `[`\n  --> /tmp/tmpez7q_7w2.rs:20:28\n   |\n20 |                         L::[i][j][k - 1],\n   |                            ^ expected identifier\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 1..x_len + 1 {\n        for j in 1..y_len + 1 {\n            for k in 1..z_len + 1 {\n                if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[x_len][y_len][z_len]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3yrvveap.rs:14:35\n   |\n14 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3yrvveap.rs:14:56\n   |\n14 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzo205bad.rs:17:34\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzo205bad.rs:17:38\n   |\n17 |                     L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n   |                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppl4l6r0g.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmppl4l6r0g.rs:18:25\n   |\n18 |                         max(dp[i - 1][j][k], dp[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcr5q34et.rs:16:35\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcr5q34et.rs:16:56\n   |\n16 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:34\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa4rleu69.rs:17:54\n   |\n17 |                     L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa7h3zwk1.rs:18:34\n   |\n18 |                     L[i][j][k] = max(\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa7h3zwk1.rs:19:25\n   |\n19 |                         max(L[i - 1][j][k], L[i][j - 1][k]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let n = X.len();\n    let m = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; m + 1]; n + 1];\n    for i in 0..=n {\n        for j in 0..=m {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[n][m][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_drd5c2r.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_drd5c2r.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk3cbp3cx.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd5d54i0h.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:35\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaz9u46j6.rs:15:56\n   |\n15 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 0..=x_len {\n        for j in 0..=y_len {\n            for k in 0..=z_len {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[x_len][y_len][z_len]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71laxfpl.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp71laxfpl.rs:17:56\n   |\n17 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1665509984,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:35\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpn_k5utjl.rs:18:56\n   |\n18 |                     dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n   |                                                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut l = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    l[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    l[i][j][k] = l[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    l[i][j][k] = max(l[i - 1][j][k], max(l[i][j - 1][k], l[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    l[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd2echc0m.rs:18:34\n   |\n18 |                     l[i][j][k] = max(l[i - 1][j][k], max(l[i][j - 1][k], l[i][j][k - 1]));\n   |                                  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd2echc0m.rs:18:54\n   |\n18 |                     l[i][j][k] = max(l[i - 1][j][k], max(l[i][j - 1][k], l[i][j][k - 1]));\n   |                                                      ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]\n}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4jxoexk3.rs:17:35\n   |\n17 |                     dp[i][j][k] = max(\n   |                                   ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4jxoexk3.rs:19:25\n   |\n19 |                         max(dp[i][j - 1][k], dp[i][j][k - 1]),\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}