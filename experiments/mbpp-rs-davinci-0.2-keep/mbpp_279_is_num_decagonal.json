{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rs",
  "prompt": "/// Write a function to find the nth decagonal number.\nfn is_num_decagonal(n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = is_num_decagonal;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(7), 175);\n    assert_eq!(candidate(10), 370);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut i = 0;\n    let mut num = 0;\n    while num < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    if num == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 1) / 2;\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        } else if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut decagonal = 0;\n    while decagonal < n {\n        i += 1;\n        decagonal = i * (3 * i - 1) / 2;\n    }\n    if decagonal == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 0;\n    loop {\n        i += 1;\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n    }",
    "    let mut i = 1;\n    let mut decagonal = 0;\n    while decagonal < n {\n        decagonal = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    decagonal",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        num += 1;\n        if is_decagonal(num) {\n            i += 1;\n        }\n    }\n    num",
    "    let mut i = 0;\n    let mut num = 0;\n    while i < n {\n        i += 1;\n        num += i * 10;\n    }\n    num",
    "    let mut i = 0;\n    let mut decagonal = 0;\n    loop {\n        i += 1;\n        decagonal = i * (3 * i - 1) / 2;\n        if decagonal == n {\n            return i;\n        }\n        if decagonal > n {\n            return 0;\n        }\n    }",
    "    let mut i = 0;\n    loop {\n        let num = decagonal(i);\n        if num == n {\n            return i;\n        } else if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i += j;\n    }\n    i",
    "    if n <= 0 {\n        return 0;\n    }\n    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 10;\n        i += 1;\n    }\n    num",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    loop {\n        let num = i * (3 * i - 1) / 2;\n        if num == n {\n            return i;\n        }\n        if num > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut num = 0;\n    while num < n {\n        num = i * (3 * i - 1) / 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 3 * i + 1;\n        i += 1;\n    }\n    j"
  ]
}