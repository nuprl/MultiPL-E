{
  "name": "mbpp_584_find_adverbs",
  "language": "rs",
  "prompt": "/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfn find_adverbs(text: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find_adverbs;\n    assert_eq!(candidate(String::from(\"Clearly, he has no excuse for such behavior.\")), String::from(\"0-7: Clearly\"));\n    assert_eq!(candidate(String::from(\"Please handle the situation carefuly\")), String::from(\"28-36: carefuly\"));\n    assert_eq!(candidate(String::from(\"Complete the task quickly\")), String::from(\"18-25: quickly\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut position = 0;\n    let mut index = 0;\n    let mut found = false;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            if !found {\n                result = word.to_string();\n                position = index;\n                found = true;\n            }\n        }\n        index += 1;\n    }\n    if found {\n        format!(\"{} at position {}\", result, position)\n    } else {\n        \"No adverb found\".to_string()\n    }",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {}\", word, pos));\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} \", index));\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut i = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {}\\n\", word, i));\n        }\n        i += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = format!(\"{} {}\", word, index);\n            break;\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut position = 0;\n    let mut found = false;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(word);\n            result.push_str(\" \");\n            result.push_str(&position.to_string());\n            result.push_str(\" \");\n            found = true;\n        }\n        position += 1;\n    }\n    if found {\n        result\n    } else {\n        \"Not found\".to_string()\n    }",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = format!(\"{} {}\", word, index);\n            break;\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {}\", word, index));\n            break;\n        }\n        index += 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut adverbs = Vec::new();\n    let mut positions = Vec::new();\n    let mut index = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            adverbs.push(word.to_string());\n            positions.push(index);\n        }\n        index += 1;\n    }\n    if adverbs.len() > 0 {\n        result.push_str(&format!(\"{} {}\", adverbs[0], positions[0]));\n    }\n    result",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {} \", word, pos));\n        }\n        pos += word.len() + 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{}:{} \", word, pos));\n        }\n        pos += word.len() + 1;\n    }\n    result",
    "    let mut result = String::new();\n    let mut pos = 0;\n    let mut found = false;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result.push_str(word);\n            result.push_str(\" \");\n            result.push_str(&pos.to_string());\n            result.push_str(\" \");\n            found = true;\n        }\n        pos += 1;\n    }\n    if found {\n        result\n    } else {\n        String::from(\"No adverbs found\")\n    }",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut pos = 0;\n    for word in text.split_whitespace() {\n        if word.ends_with(\"ly\") {\n            result = word.to_string();\n            break;\n        }\n        pos += word.len() + 1;\n    }\n    format!(\"{} {}\", result, pos)",
    "    let mut result = String::new();\n    let mut iter = text.split_whitespace();\n    while let Some(word) = iter.next() {\n        if word.ends_with(\"ly\") {\n            result.push_str(&format!(\"{} {}\\n\", word, iter.as_str().find(word).unwrap()));\n        }\n    }\n    result"
  ]
}