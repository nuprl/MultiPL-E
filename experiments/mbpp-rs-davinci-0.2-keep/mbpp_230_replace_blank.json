{
  "name": "mbpp_230_replace_blank",
  "language": "rs",
  "prompt": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            result.push_str(&char);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(\" \", &char)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c == ' ' {\n            new_str.push_str(&char);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str"
  ]
}