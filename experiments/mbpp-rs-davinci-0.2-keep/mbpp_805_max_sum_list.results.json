{
  "name": "mbpp_805_max_sum_list",
  "language": "rs",
  "prompt": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp1gj5s7r0.rs:3:18\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n  |                  ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum::<S>()).unwrap().clone()\n  |                                                   +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_list = Vec::new();\n    let mut max_sum = 0;\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|x| x.iter().sum()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpi8spz9z3.rs:3:23\n  |\n3 |     lists.into_iter().max_by_key(|x| x.iter().sum()).unwrap()\n  |                       ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.into_iter().max_by_key(|x| x.iter().sum::<S>()).unwrap()\n  |                                                  +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, &x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum: isize = list.iter().sum();\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum: isize = list.iter().sum();\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp2dqch2o9.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|l| l.iter().sum()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpotubq686.rs:3:18\n  |\n3 |     lists.iter().max_by_key(|l| l.iter().sum()).unwrap().clone()\n  |                  ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.iter().max_by_key(|l| l.iter().sum::<S>()).unwrap().clone()\n  |                                             +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp1gj5s7r0.rs:3:18\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n  |                  ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum::<S>()).unwrap().clone()\n  |                                                   +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_list: Vec<isize> = Vec::new();\n    let mut max_sum: isize = 0;\n    for list in lists {\n        let sum: isize = list.iter().sum();\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_list = Vec::new();\n    let mut max_sum = 0;\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp2dqch2o9.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, &x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp1gj5s7r0.rs:3:18\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n  |                  ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum::<S>()).unwrap().clone()\n  |                                                   +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().sum();\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|l| l.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().fold(vec![], |acc, x| {\n        if x.iter().fold(0, |acc, x| acc + x) > acc.iter().fold(0, |acc, x| acc + x) {\n            x.clone()\n        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().sum();\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_sum_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_sum_list = list;\n        }\n    }\n    max_sum_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp1gj5s7r0.rs:3:18\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n  |                  ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum::<S>()).unwrap().clone()\n  |                                                   +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, &x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp1gj5s7r0.rs:3:18\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n  |                  ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum::<S>()).unwrap().clone()\n  |                                                   +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum: isize = list.iter().sum();\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_list = Vec::new();\n    let mut max_sum = 0;\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, &x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp_moeoeia.rs:3:23\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n  |                       ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum::<S>()).unwrap()\n  |                                                        +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|l| l.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp_moeoeia.rs:3:23\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n  |                       ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum::<S>()).unwrap()\n  |                                                        +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, &x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp_moeoeia.rs:3:23\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n  |                       ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum::<S>()).unwrap()\n  |                                                        +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|l| l.iter().sum::<isize>()).unwrap().to_vec()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, &x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9w6p6wxy.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp_moeoeia.rs:3:23\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n  |                       ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum::<S>()).unwrap()\n  |                                                        +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = vec![];\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp1gj5s7r0.rs:3:18\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()\n  |                  ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.iter().max_by_key(|list| list.iter().sum::<S>()).unwrap().clone()\n  |                                                   +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmp_moeoeia.rs:3:23\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum()).unwrap()\n  |                       ^^^^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `max_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n3 |     lists.into_iter().max_by_key(|list| list.iter().sum::<S>()).unwrap()\n  |                                                        +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
      "timestamp": 1665510068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}