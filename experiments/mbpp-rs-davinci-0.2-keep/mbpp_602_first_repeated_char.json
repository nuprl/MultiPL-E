{
  "name": "mbpp_602_first_repeated_char",
  "language": "rs",
  "prompt": "/// Write a python function to find the first repeated character in a given string.\nfn first_repeated_char(str1: String) -> Option<String> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = first_repeated_char;\n    assert_eq!(candidate(String::from(\"abcabc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"abc\")), None);\n    assert_eq!(candidate(String::from(\"123123\")), Some(String::from(\"1\")));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut char_set: HashSet<char> = HashSet::new();\n    for c in str1.chars() {\n        if char_set.contains(&c) {\n            return Some(c.to_string());\n        }\n        char_set.insert(c);\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (c, count) in char_count {\n        if count > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars.get(&c).unwrap() > &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() > &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut char_set: HashSet<char> = HashSet::new();\n    for c in chars.iter() {\n        if char_set.contains(c) {\n            return Some(c.to_string());\n        } else {\n            char_set.insert(*c);\n        }\n    }\n    None",
    "    let mut char_counts = HashMap::new();\n    for c in str1.chars() {\n        let count = char_counts.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for (c, count) in char_counts {\n        if count > 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut seen = HashSet::new();\n    for c in str1.chars() {\n        if seen.contains(&c) {\n            return Some(c.to_string());\n        }\n        seen.insert(c);\n    }\n    None",
    "    let mut chars = str1.chars();\n    let mut char_map = HashMap::new();\n    let mut first_repeated_char = None;\n\n    while let Some(c) = chars.next() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n        if *count == 2 {\n            first_repeated_char = Some(c.to_string());\n            break;\n        }\n    }\n\n    first_repeated_char",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    chars.sort();\n    let mut prev = ' ';\n    for c in chars {\n        if c == prev {\n            return Some(c.to_string());\n        }\n        prev = c;\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() > &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (k, v) in char_map {\n        if v > 1 {\n            return Some(k.to_string());\n        }\n    }\n    None",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    chars.sort();\n    let mut last_char = '\\0';\n    for c in chars {\n        if c == last_char {\n            return Some(c.to_string());\n        }\n        last_char = c;\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (c, count) in char_map {\n        if count > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() > &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (k, v) in char_map {\n        if v > 1 {\n            return Some(k.to_string());\n        }\n    }\n    None",
    "    let mut char_map = HashMap::new();\n    let mut result = None;\n\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n\n        if *count == 2 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in chars.iter() {\n        let count = char_count.entry(*c).or_insert(0);\n        *count += 1;\n    }\n\n    for (k, v) in char_count.iter() {\n        if *v > 1 {\n            result = Some(k.to_string());\n            break;\n        }\n    }\n\n    result"
  ]
}