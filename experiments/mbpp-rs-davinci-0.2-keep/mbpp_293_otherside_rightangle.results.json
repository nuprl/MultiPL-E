{
  "name": "mbpp_293_otherside_rightangle",
  "language": "rs",
  "prompt": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut s = w * w + h * h;\n    s = s as f64;\n    s.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp5g6trape.rs:4:9\n  |\n3 |     let mut s = w * w + h * h;\n  |                 ------------- expected due to this value\n4 |     s = s as f64;\n  |         ^^^^^^^^ expected `isize`, found `f64`\n\nerror[E0599]: no method named `sqrt` found for type `isize` in the current scope\n --> /tmp/tmp5g6trape.rs:5:7\n  |\n5 |     s.sqrt()\n  |       ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).hypot(h as f64);\n    hypotenuse\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmplol98rig.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).hypot(h as f64);\n    hypotenuse\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmplol98rig.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut side = w * w + h * h;\n    side = side as f64;\n    side = side.sqrt();\n    side\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpdc2pr8mi.rs:4:12\n  |\n3 |     let mut side = w * w + h * h;\n  |                    ------------- expected due to this value\n4 |     side = side as f64;\n  |            ^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror[E0599]: no method named `sqrt` found for type `isize` in the current scope\n --> /tmp/tmpdc2pr8mi.rs:5:17\n  |\n5 |     side = side.sqrt();\n  |                 ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdc2pr8mi.rs:6:5\n  |\n2 | fn otherside_rightangle(w: isize, h: isize) -> f64 {\n  |                                                --- expected `f64` because of return type\n...\n6 |     side\n  |     ^^^^ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n  |\n6 |     side as f64\n  |          ++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse: f64 = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    let hypotenuse = (w.powi(2) + h.powi(2)).sqrt();\n    hypotenuse\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let h_sq = h * h;\n    let w_sq = w * w;\n    let sum = h_sq + w_sq;\n    (sum as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "error[E0277]: cannot add `f64` to `isize`\n --> /tmp/tmp2c87w20r.rs:3:15\n  |\n3 |     (w.pow(2) + h.pow(2) as f64).sqrt()\n  |               ^ no implementation for `isize + f64`\n  |\n  = help: the trait `Add<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w.pow(2) + h.pow(2)) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let h = h as f64;\n    let w = w as f64;\n    let x = (h.powi(2) + w.powi(2)).sqrt();\n    x\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmplol98rig.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let l = (w as f64).powi(2) + (h as f64).powi(2);\n    l.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmplol98rig.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w * w + h * h) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut result = (w * w + h * h) as f64;\n    result = result.sqrt();\n    result\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w as f64).powi(2) + (h as f64).powi(2)).sqrt();\n    hypotenuse\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "error[E0277]: cannot add `f64` to `isize`\n --> /tmp/tmp2c87w20r.rs:3:15\n  |\n3 |     (w.pow(2) + h.pow(2) as f64).sqrt()\n  |               ^ no implementation for `isize + f64`\n  |\n  = help: the trait `Add<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let h_squared = h.pow(2);\n    let w_squared = w.pow(2);\n    let sum = h_squared + w_squared;\n    let result = sum as f64;\n    result.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmplol98rig.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut x = w * w + h * h;\n    x = x as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmptb268l5h.rs:4:9\n  |\n3 |     let mut x = w * w + h * h;\n  |                 ------------- expected due to this value\n4 |     x = x as f64;\n  |         ^^^^^^^^ expected `isize`, found `f64`\n\nerror[E0599]: no method named `sqrt` found for type `isize` in the current scope\n --> /tmp/tmptb268l5h.rs:5:7\n  |\n5 |     x.sqrt()\n  |       ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    let otherside = (w.powi(2) + h.powi(2)).sqrt();\n    otherside\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = (w * w + h * h) as f64;\n    a.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    ((w * w) + (h * h)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let h2 = h * h;\n    let w2 = w * w;\n    (h2 + w2) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmpbqd5vn66.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w.pow(2) + h.pow(2)) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmplol98rig.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "error[E0277]: cannot add `f64` to `isize`\n --> /tmp/tmp2c87w20r.rs:3:15\n  |\n3 |     (w.pow(2) + h.pow(2) as f64).sqrt()\n  |               ^ no implementation for `isize + f64`\n  |\n  = help: the trait `Add<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let sum = w * w + h * h;\n    (sum as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let h_sq = h * h;\n    let w_sq = w * w;\n    (h_sq + w_sq) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmpss2y6ziy.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut result = 0.0;\n    result = ((w * w) + (h * h)) as f64;\n    result.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = w * w + h * h;\n    let y = x as f64;\n    y.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let d = (w.pow(2) + h.pow(2)) as f64;\n    d.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w.pow(2) + h.pow(2)) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmplol98rig.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}