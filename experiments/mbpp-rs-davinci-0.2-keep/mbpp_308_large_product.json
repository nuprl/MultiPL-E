{
  "name": "mbpp_308_large_product",
  "language": "rs",
  "prompt": "/// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfn large_product(nums1: Vec<isize>, nums2: Vec<isize>, N: isize) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = large_product;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 3), vec![60, 54, 50]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 4), vec![60, 54, 50, 48]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 5), vec![60, 54, 50, 48, 45]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if i < 0 || j < 0 {\n            break;\n        }\n        let a = nums1[i as usize];\n        let b = nums2[j as usize];\n        if a * b > nums1[i as usize - 1] * nums2[j as usize] {\n            res.push(a * b);\n            i -= 1;\n        } else {\n            res.push(nums1[i as usize - 1] * nums2[j as usize]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut result = Vec::new();\n    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort_by(|a, b| b.cmp(a));\n    nums2.sort_by(|a, b| b.cmp(a));\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() && N > 0 {\n        let product = nums1[i] * nums2[j];\n        if product > 0 {\n            result.push(product);\n            i += 1;\n            N -= 1;\n        } else if product < 0 {\n            result.push(product);\n            j += 1;\n            N -= 1;\n        } else {\n            if nums1[i] > nums2[j] {\n                result.push(product);\n                i += 1;\n                N -= 1;\n            } else if nums1[i] < nums2[j] {\n                result.push(product);\n                j += 1;\n                N -= 1;\n            } else {\n                result.push(product);\n                i += 1;\n                j += 1;\n                N -= 1;\n            }\n        }\n    }\n    while i < nums1.len() && N > 0 {\n        result.push(nums1[i] * nums2[nums2.len() - 1]);\n        i += 1;\n        N -= 1;\n    }\n    while j < nums2.len() && N > 0 {\n        result.push(nums1[nums1.len() - 1] * nums2[j]);\n        j += 1;\n        N -= 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut count = 0;\n    while count < N {\n        let mut max = nums1[i] * nums2[j];\n        if nums1[i] * nums2[j - 1] > max {\n            max = nums1[i] * nums2[j - 1];\n            j -= 1;\n        } else if nums1[i - 1] * nums2[j] > max {\n            max = nums1[i - 1] * nums2[j];\n            i -= 1;\n        } else {\n            i -= 1;\n            j -= 1;\n        }\n        res.push(max);\n        count += 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for &n1 in &nums1 {\n        for &n2 in &nums2 {\n            products.push(n1 * n2);\n        }\n    }\n    products.sort_by(|a, b| b.cmp(a));\n    products.into_iter().take(N as usize).collect()",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        let mut max = nums1[i] * nums2[j];\n        let mut max_i = i;\n        let mut max_j = j;\n        if i > 0 && nums1[i - 1] * nums2[j] > max {\n            max = nums1[i - 1] * nums2[j];\n            max_i = i - 1;\n            max_j = j;\n        }\n        if j > 0 && nums1[i] * nums2[j - 1] > max {\n            max = nums1[i] * nums2[j - 1];\n            max_i = i;\n            max_j = j - 1;\n        }\n        if i > 0 && j > 0 && nums1[i - 1] * nums2[j - 1] > max {\n            max = nums1[i - 1] * nums2[j - 1];\n            max_i = i - 1;\n            max_j = j - 1;\n        }\n        res.push(max);\n        i = max_i;\n        j = max_j;\n        N -= 1;\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        i: 0,\n        j: 0,\n        val: nums1[0] * nums2[0],\n    });\n    visited.insert((0, 0));\n    while res.len() < N as usize {\n        let state = heap.pop().unwrap();\n        res.push(state.val);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            heap.push(State {\n                i: state.i + 1,\n                j: state.j,\n                val: nums1[state.i + 1] * nums2[state.j],\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            heap.push(State {\n                i: state.i,\n                j: state.j + 1,\n                val: nums1[state.i] * nums2[state.j + 1],\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut k = N - 1;\n    while k >= 0 {\n        if i < 0 || j < 0 {\n            break;\n        }\n        result.push(nums1[i] * nums2[j]);\n        if nums1[i] > nums2[j] {\n            i -= 1;\n        } else {\n            j -= 1;\n        }\n        k -= 1;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    nums1.sort();\n    let mut nums2 = nums2;\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(Product {\n        num1: nums1[0],\n        num2: nums2[0],\n        i: 0,\n        j: 0,\n    });\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let product = heap.pop().unwrap();\n        res.push(product.num1 * product.num2);\n        if product.i + 1 < nums1.len() && !visited.contains(&(product.i + 1, product.j)) {\n            heap.push(Product {\n                num1: nums1[product.i + 1],\n                num2: product.num2,\n                i: product.i + 1,\n                j: product.j,\n            });\n            visited.insert((product.i + 1, product.j));\n        }\n        if product.j + 1 < nums2.len() && !visited.contains(&(product.i, product.j + 1)) {\n            heap.push(Product {\n                num1: product.num1,\n                num2: nums2[product.j + 1],\n                i: product.i,\n                j: product.j + 1,\n            });\n            visited.insert((product.i, product.j + 1));\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(x) = heap.pop() {\n        res.push(x);\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for num1 in nums1 {\n        for num2 in nums2.iter() {\n            products.push(num1 * num2);\n        }\n    }\n    products.sort_by(|a, b| b.cmp(a));\n    products.into_iter().take(N as usize).collect()",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        val: nums1[0] * nums2[0],\n        i: 0,\n        j: 0,\n    });\n    visited.insert((0, 0));\n    while res.len() < N as usize {\n        let state = heap.pop().unwrap();\n        res.push(state.val);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            heap.push(State {\n                val: nums1[state.i + 1] * nums2[state.j],\n                i: state.i + 1,\n                j: state.j,\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            heap.push(State {\n                val: nums1[state.i] * nums2[state.j + 1],\n                i: state.i,\n                j: state.j + 1,\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(*heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut max_heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            max_heap.push(nums1[i] * nums2[j]);\n            if max_heap.len() > N as usize {\n                max_heap.pop();\n            }\n        }\n    }\n    while !max_heap.is_empty() {\n        res.push(max_heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(x) = heap.pop() {\n        res.push(x);\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut k = N;\n    while k > 0 {\n        if i < 0 || j < 0 {\n            break;\n        }\n        let a = nums1[i];\n        let b = nums2[j];\n        if a > b {\n            res.push(a * b);\n            i -= 1;\n        } else {\n            res.push(a * b);\n            j -= 1;\n        }\n        k -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        product: nums1[0] * nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let state = heap.pop().unwrap();\n        res.push(state.product);\n        if state.index1 + 1 < nums1.len() && !visited.contains(&(state.index1 + 1, state.index2)) {\n            heap.push(State {\n                product: nums1[state.index1 + 1] * nums2[state.index2],\n                index1: state.index1 + 1,\n                index2: state.index2,\n            });\n            visited.insert((state.index1 + 1, state.index2));\n        }\n        if state.index2 + 1 < nums2.len() && !visited.contains(&(state.index1, state.index2 + 1)) {\n            heap.push(State {\n                product: nums1[state.index1] * nums2[state.index2 + 1],\n                index1: state.index1,\n                index2: state.index2 + 1,\n            });\n            visited.insert((state.index1, state.index2 + 1));\n        }\n    }\n    res",
    "    let mut result = vec![];\n    let mut products = vec![];\n    for num1 in nums1.iter() {\n        for num2 in nums2.iter() {\n            products.push(num1 * num2);\n        }\n    }\n    products.sort();\n    for i in 0..N {\n        result.push(products[products.len() - 1 - i as usize]);\n    }\n    result",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push((nums1[0] * nums2[0], 0, 0));\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let (product, i, j) = heap.pop().unwrap();\n        res.push(product);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] * nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] * nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        let mut max = nums1[i as usize] * nums2[j as usize];\n        let mut max_i = i;\n        let mut max_j = j;\n        if i > 0 && nums1[(i - 1) as usize] * nums2[j as usize] > max {\n            max = nums1[(i - 1) as usize] * nums2[j as usize];\n            max_i = i - 1;\n            max_j = j;\n        }\n        if j > 0 && nums1[i as usize] * nums2[(j - 1) as usize] > max {\n            max = nums1[i as usize] * nums2[(j - 1) as usize];\n            max_i = i;\n            max_j = j - 1;\n        }\n        if i > 0 && j > 0 && nums1[(i - 1) as usize] * nums2[(j - 1) as usize] > max {\n            max = nums1[(i - 1) as usize] * nums2[(j - 1) as usize];\n            max_i = i - 1;\n            max_j = j - 1;\n        }\n        res.push(max);\n        i = max_i;\n        j = max_j;\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut count = 0;\n    while count < N {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        count += 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut ppp =",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort_by(|a, b| b.cmp(a));\n    nums2.sort_by(|a, b| b.cmp(a));\n    let mut res = vec![];\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() && res.len() < N as usize {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j + 1] {\n            res.push(nums1[i] * nums2[j]);\n            j += 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            i += 1;\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while i >= 0 && j >= 0 && N > 0 {\n        if nums1[i] * nums2[j] > nums1[0] * nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    while i >= 0 && N > 0 {\n        res.push(nums1[i] * nums2[0]);\n        i -= 1;\n        N -= 1;\n    }\n    while j >= 0 && N > 0 {\n        res.push(nums1[0] * nums2[j]);\n        j -= 1;\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while let Some(x) = heap.pop() {\n        res.push(x);\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push((nums1[0] * nums2[0], 0, 0));\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let (product, i, j) = heap.pop().unwrap();\n        res.push(product);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] * nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] * nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1.into_iter().collect::<BinaryHeap<_>>();\n    let mut nums2 = nums2.into_iter().collect::<BinaryHeap<_>>();\n    let mut res = Vec::new();\n    while N > 0 {\n        let (n1, n2) = (nums1.pop().unwrap(), nums2.pop().unwrap());\n        res.push(n1 * n2);\n        nums1.push(n1);\n        nums2.push(n2);\n        N -= 1;\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = vec![];\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(nums1[i] * nums2[j]);\n            if pq.len() > N as usize {\n                pq.pop();\n            }\n        }\n    }\n    while !pq.is_empty() {\n        res.push(pq.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut res = vec![];\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(nums1[i] * nums2[j]);\n            if pq.len() > N as usize {\n                pq.pop();\n            }\n        }\n    }\n    while !pq.is_empty() {\n        res.push(pq.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut n = N;\n    while n > 0 {\n        if i < 0 || j < 0 {\n            break;\n        }\n        let a = nums1[i];\n        let b = nums2[j];\n        if a > b {\n            res.push(a * b);\n            i -= 1;\n        } else {\n            res.push(a * b);\n            j -= 1;\n        }\n        n -= 1;\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(*heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(Product {\n        product: nums1[0] * nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let Product {\n            product,\n            index1,\n            index2,\n        } = heap.pop().unwrap();\n        res.push(product);\n        if index1 + 1 < nums1.len() && !visited.contains(&(index1 + 1, index2)) {\n            heap.push(Product {\n                product: nums1[index1 + 1] * nums2[index2],\n                index1: index1 + 1,\n                index2,\n            });\n            visited.insert((index1 + 1, index2));\n        }\n        if index2 + 1 < nums2.len() && !visited.contains(&(index1, index2 + 1)) {\n            heap.push(Product {\n                product: nums1[index1] * nums2[index2 + 1],\n                index1,\n                index2: index2 + 1,\n            });\n            visited.insert((index1, index2 + 1));\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for &n1 in &nums1 {\n        for &n2 in &nums2 {\n            products.push(n1 * n2);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.into_iter().take(N as usize).collect()",
    "    let mut res = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(nums1[i] * nums2[j]);\n            if pq.len() > N as usize {\n                pq.pop();\n            }\n        }\n    }\n    while !pq.is_empty() {\n        res.push(pq.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res: Vec<isize> = Vec::new();\n    let mut pq = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    pq.push(State {\n        product: nums1[0] * nums2[0],\n        i: 0,\n        j: 0,\n    });\n    visited.insert((0, 0));\n    while N > 0 {\n        let state = pq.pop().unwrap();\n        res.push(state.product);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            pq.push(State {\n                product: nums1[state.i + 1] * nums2[state.j],\n                i: state.i + 1,\n                j: state.j,\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            pq.push(State {\n                product: nums1[state.i] * nums2[state.j + 1],\n                i: state.i,\n                j: state.j + 1,\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n        N -= 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            result.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut nums1 = nums1.into_iter().collect::<BinaryHeap<_>>();\n    let mut nums2 = nums2.into_iter().collect::<BinaryHeap<_>>();\n    let mut res = vec![];\n    for _ in 0..N {\n        if let (Some(x), Some(y)) = (nums1.peek(), nums2.peek()) {\n            if x * y > nums1.peek().unwrap_or(&0) * nums2.peek_mut().unwrap_or(&0) {\n                res.push(x * y);\n                nums1.pop();\n            } else {\n                res.push(nums1.pop().unwrap() * nums2.pop().unwrap());\n            }\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push((nums1[0] * nums2[0], 0, 0));\n    visited.insert((0, 0));\n    while res.len() < N as usize {\n        let (product, i, j) = heap.pop().unwrap();\n        res.push(product);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] * nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] * nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    let mut res = vec![];\n    nums1.sort_by(|a, b| b.cmp(a));\n    nums2.sort_by(|a, b| b.cmp(a));\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    while count < N {\n        let product = nums1[i] * nums2[j];\n        if i == nums1.len() - 1 && j == nums2.len() - 1 {\n            res.push(product);\n            count += 1;\n            continue;\n        }\n        if i == nums1.len() - 1 {\n            res.push(product);\n            count += 1;\n            j += 1;\n            continue;\n        }\n        if j == nums2.len() - 1 {\n            res.push(product);\n            count += 1;\n            i += 1;\n            continue;\n        }\n        if nums1[i] > nums2[j] {\n            res.push(product);\n            count += 1;\n            i += 1;\n        } else {\n            res.push(product);\n            count += 1;\n            j += 1;\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while i >= 0 && j >= 0 && N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[i as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for &n1 in &nums1 {\n        for &n2 in &nums2 {\n            products.push(n1 * n2);\n        }\n    }\n    products.sort_by(|a, b| b.cmp(a));\n    products.into_iter().take(N as usize).collect()",
    "    let mut products = Vec::new();\n    for num1 in nums1 {\n        for num2 in nums2.iter() {\n            products.push(num1 * num2);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        i: 0,\n        j: 0,\n        val: nums1[0] * nums2[0],\n    });\n    visited.insert((0, 0));\n    while res.len() < N as usize {\n        let state = heap.pop().unwrap();\n        res.push(state.val);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            heap.push(State {\n                i: state.i + 1,\n                j: state.j,\n                val: nums1[state.i + 1] * nums2[state.j],\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            heap.push(State {\n                i: state.i,\n                j: state.j + 1,\n                val: nums1[state.i] * nums2[state.j + 1],\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] > nums2[j as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            i -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut products: Vec<isize> = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let prod = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(prod);\n            } else if prod > heap.peek().unwrap() {\n                heap.pop();\n                heap.push(prod);\n            }\n        }\n    }\n    while let Some(prod) = heap.pop() {\n        res.push(prod);\n    }\n    res.reverse();\n    res",
    "    let mut res = vec![];\n    let mut max_heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if max_heap.len() < N as usize {\n                max_heap.push(product);\n            } else if product > *max_heap.peek().unwrap() {\n                max_heap.pop();\n                max_heap.push(product);\n            }\n        }\n    }\n    while !max_heap.is_empty() {\n        res.push(*max_heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut result = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut k = N;\n    while k > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            result.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n            j -= 1;\n        }\n        k -= 1;\n    }\n    result",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            result.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            result.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut max_heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if max_heap.len() < N as usize {\n                max_heap.push(product);\n            } else {\n                if product > max_heap.peek().unwrap() {\n                    max_heap.pop();\n                    max_heap.push(product);\n                }\n            }\n        }\n    }\n    while !max_heap.is_empty() {\n        result.push(max_heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut k = N;\n    while k > 0 {\n        if i < 0 {\n            res.push(nums2[j]);\n            j -= 1;\n        } else if j < 0 {\n            res.push(nums1[i]);\n            i -= 1;\n        } else if nums1[i] > nums2[j] {\n            res.push(nums1[i]);\n            i -= 1;\n        } else {\n            res.push(nums2[j]);\n            j -= 1;\n        }\n        k -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut k = 0;\n    while k < N {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        k += 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let prod = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(prod);\n            } else if prod > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(prod);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            result.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        a: nums1[0],\n        b: nums2[0],\n        i: 0,\n        j: 0,\n    });\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let state = heap.pop().unwrap();\n        res.push(state.a * state.b);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            heap.push(State {\n                a: nums1[state.i + 1],\n                b: state.b,\n                i: state.i + 1,\n                j: state.j,\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            heap.push(State {\n                a: state.a,\n                b: nums2[state.j + 1],\n                i: state.i,\n                j: state.j + 1,\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n    }\n    res",
    "    let mut products: Vec<isize> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            result.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut result = Vec::new();\n    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            result.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort_by(|a, b| b.cmp(a));\n    products.iter().take(N as usize).map(|&x| x).collect()",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(*heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if i < 0 || j < 0 {\n            break;\n        }\n        if nums1[i] * nums2[j] > nums1[0] * nums2[j] {\n            result.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else if nums1[i] * nums2[j] > nums1[i] * nums2[0] {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            if nums1[i] > nums2[j] {\n                result.push(nums1[i] * nums2[0]);\n                i -= 1;\n            } else {\n                result.push(nums1[0] * nums2[j]);\n                j -= 1;\n            }\n        }\n        N -= 1;\n    }\n    result",
    "    let mut res = vec![];\n    let mut max_heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if max_heap.len() < N as usize {\n                max_heap.push(product);\n            } else if product > max_heap.peek().unwrap() {\n                max_heap.pop();\n                max_heap.push(product);\n            }\n        }\n    }\n    while !max_heap.is_empty() {\n        res.push(max_heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut result = vec![];\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    while result.len() < N as usize {\n        let mut max = nums1[i] * nums2[j];\n        let mut max_i = i;\n        let mut max_j = j;\n        for i1 in i..nums1.len() {\n            for j1 in j..nums2.len() {\n                let product = nums1[i1] * nums2[j1];\n                if product > max {\n                    max = product;\n                    max_i = i1;\n                    max_j = j1;\n                }\n            }\n        }\n        result.push(max);\n        i = max_i;\n        j = max_j;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.iter().take(N as usize).cloned().collect()",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.into_iter().take(N as usize).collect()",
    "    let mut result = Vec::new();\n    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            result.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::with_capacity(N as usize);\n    let mut max_heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            max_heap.push(nums1[i] * nums2[j]);\n            if max_heap.len() > N as usize {\n                max_heap.pop();\n            }\n        }\n    }\n    while !max_heap.is_empty() {\n        res.push(max_heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push((nums1[nums1.len() - 1] * nums2[nums2.len() - 1], (nums1.len() - 1, nums2.len() - 1)));\n    visited.insert((nums1.len() - 1, nums2.len() - 1));\n    let mut result = vec![];\n    for _ in 0..N {\n        let (product, (i, j)) = heap.pop().unwrap();\n        result.push(product);\n        if i > 0 && !visited.contains(&(i - 1, j)) {\n            heap.push((nums1[i - 1] * nums2[j], (i - 1, j)));\n            visited.insert((i - 1, j));\n        }\n        if j > 0 && !visited.contains(&(i, j - 1)) {\n            heap.push((nums1[i] * nums2[j - 1], (i, j - 1)));\n            visited.insert((i, j - 1));\n        }\n    }\n    result",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(Product {\n        product: nums1[nums1.len() - 1] * nums2[nums2.len() - 1],\n        i: nums1.len() - 1,\n        j: nums2.len() - 1,\n    });\n    visited.insert((nums1.len() - 1, nums2.len() - 1));\n    let mut result = Vec::new();\n    for _ in 0..N {\n        let product = heap.pop().unwrap();\n        result.push(product.product);\n        if product.i > 0 && !visited.contains(&(product.i - 1, product.j)) {\n            heap.push(Product {\n                product: nums1[product.i - 1] * nums2[product.j],\n                i: product.i - 1,\n                j: product.j,\n            });\n            visited.insert((product.i - 1, product.j));\n        }\n        if product.j > 0 && !visited.contains(&(product.i, product.j - 1)) {\n            heap.push(Product {\n                product: nums1[product.i] * nums2[product.j - 1],\n                i: product.i,\n                j: product.j - 1,\n            });\n            visited.insert((product.i, product.j - 1));\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n                visited.insert((i, j));\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n                visited.insert((i, j));\n            }\n        }\n    }\n\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.iter().take(N as usize).map(|x| *x).collect()",
    "    let mut res: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j + 1] {\n            res.push(nums1[i] * nums2[j]);\n            j += 1;\n        } else {\n            res.push(nums1[i] * nums2[j + 1]);\n            i += 1;\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(Product {\n        product: nums1[0] * nums2[0],\n        i: 0,\n        j: 0,\n    });\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let Product { product, i, j } = heap.pop().unwrap();\n        res.push(product);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push(Product {\n                product: nums1[i + 1] * nums2[j],\n                i: i + 1,\n                j,\n            });\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push(Product {\n                product: nums1[i] * nums2[j + 1],\n                i,\n                j: j + 1,\n            });\n            visited.insert((i, j + 1));\n        }\n    }\n    res",
    "    let mut result = vec![];\n    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            result.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let prod = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(prod);\n            } else if prod > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(prod);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(*heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut k = N;\n    while k > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n            j -= 1;\n        }\n        k -= 1;\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push((nums1[0] * nums2[0], 0, 0));\n    visited.insert((0, 0));\n    while res.len() < N as usize {\n        let (product, i, j) = heap.pop().unwrap();\n        res.push(product);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] * nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] * nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        let mut max = nums1[i] * nums2[j];\n        let mut max_i = i;\n        let mut max_j = j;\n        if i > 0 && nums1[i - 1] * nums2[j] > max {\n            max = nums1[i - 1] * nums2[j];\n            max_i = i - 1;\n            max_j = j;\n        }\n        if j > 0 && nums1[i] * nums2[j - 1] > max {\n            max = nums1[i] * nums2[j - 1];\n            max_i = i;\n            max_j = j - 1;\n        }\n        if i > 0 && j > 0 && nums1[i - 1] * nums2[j - 1] > max {\n            max = nums1[i - 1] * nums2[j - 1];\n            max_i = i - 1;\n            max_j = j - 1;\n        }\n        res.push(max);\n        i = max_i;\n        j = max_j;\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(nums1[i] * nums2[j]);\n            if pq.len() > N as usize {\n                pq.pop();\n            }\n        }\n    }\n    while !pq.is_empty() {\n        res.push(pq.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for (i, &n1) in nums1.iter().enumerate() {\n        for &n2 in nums2.iter() {\n            let p = n1 * n2;\n            if heap.len() < N as usize {\n                heap.push(Product {\n                    product: p,\n                    index1: i,\n                    index2: n2,\n                });\n            } else if let Some(top) = heap.peek() {\n                if top.product < p {\n                    heap.pop();\n                    heap.push(Product {\n                        product: p,\n                        index1: i,\n                        index2: n2,\n                    });\n                }\n            }\n        }\n    }\n    while let Some(top) = heap.pop() {\n        res.push(top.product);\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut pq = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() {\n        let prod = nums1[i] * nums2[j];\n        if visited.insert((i, j)) {\n            pq.push((prod, (i, j)));\n            if pq.len() > N as usize {\n                pq.pop();\n            }\n        }\n        if nums1[i] < nums2[j] {\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    while let Some((prod, (i, j))) = pq.pop() {\n        res.push(prod);\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for num1 in nums1 {\n        for num2 in nums2.iter() {\n            products.push(num1 * num2);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else if nums1[i] < nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            if nums1[i - 1] > nums2[j - 1] {\n                res.push(nums1[i] * nums2[j]);\n                i -= 1;\n            } else {\n                res.push(nums1[i] * nums2[j]);\n                j -= 1;\n            }\n        }\n        N -= 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        product: nums1[0] * nums2[0],\n        i: 0,\n        j: 0,\n    });\n    visited.insert((0, 0));\n    while result.len() < N as usize {\n        let state = heap.pop().unwrap();\n        result.push(state.product);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            heap.push(State {\n                product: nums1[state.i + 1] * nums2[state.j],\n                i: state.i + 1,\n                j: state.j,\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            heap.push(State {\n                product: nums1[state.i] * nums2[state.j + 1],\n                i: state.i,\n                j: state.j + 1,\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut count = 0;\n    while count < N {\n        let mut max = nums1[i] * nums2[j];\n        if i > 0 && nums1[i - 1] * nums2[j] > max {\n            max = nums1[i - 1] * nums2[j];\n            i -= 1;\n        } else if j > 0 && nums1[i] * nums2[j - 1] > max {\n            max = nums1[i] * nums2[j - 1];\n            j -= 1;\n        } else {\n            i -= 1;\n            j -= 1;\n        }\n        result.push(max);\n        count += 1;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(*heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(x) = heap.pop() {\n        res.push(x);\n    }\n    res.reverse();\n    res",
    "    let mut result = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            result.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            result.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            result.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for num1 in nums1 {\n        for num2 in nums2.iter() {\n            let product = num1 * num2;\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while let Some(product) = heap.pop() {\n        res.push(product);\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    for _ in 0..N {\n        if i < 0 || j < 0 {\n            break;\n        }\n        if nums1[i] > nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        product: nums1[0] * nums2[0],\n        i: 0,\n        j: 0,\n    });\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let state = heap.pop().unwrap();\n        res.push(state.product);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            heap.push(State {\n                product: nums1[state.i + 1] * nums2[state.j],\n                i: state.i + 1,\n                j: state.j,\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            heap.push(State {\n                product: nums1[state.i] * nums2[state.j + 1],\n                i: state.i,\n                j: state.j + 1,\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort_by(|a, b| b.cmp(a));\n    nums2.sort_by(|a, b| b.cmp(a));\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() && res.len() < N as usize {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j + 1] {\n            res.push(nums1[i] * nums2[j]);\n            j += 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            i += 1;\n        }\n    }\n    res",
    "    let mut result = Vec::with_capacity(N as usize);\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort_unstable();\n    nums2.sort_unstable();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while result.len() < N as usize {\n        let (a, b) = (nums1[i], nums2[j]);\n        if a * b > nums1[i - 1] * nums2[j] {\n            result.push(a * b);\n            i -= 1;\n        } else {\n            result.push(nums1[i - 1] * nums2[j]);\n            j -= 1;\n        }\n    }\n    result",
    "    let mut res: Vec<isize> = Vec::new();\n    let mut heap: BinaryHeap<isize> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut count = 0;\n    while count < N {\n        let mut max = nums1[i] * nums2[j];\n        if i > 0 && nums1[i - 1] * nums2[j] > max {\n            max = nums1[i - 1] * nums2[j];\n            i -= 1;\n        } else if j > 0 && nums1[i] * nums2[j - 1] > max {\n            max = nums1[i] * nums2[j - 1];\n            j -= 1;\n        } else {\n            i -= 1;\n            j -= 1;\n        }\n        result.push(max);\n        count += 1;\n    }\n    result",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        let mut max = nums1[i as usize] * nums2[j as usize];\n        let mut max_i = i;\n        let mut max_j = j;\n        if i > 0 && nums1[(i - 1) as usize] * nums2[j as usize] > max {\n            max = nums1[(i - 1) as usize] * nums2[j as usize];\n            max_i = i - 1;\n        }\n        if j > 0 && nums1[i as usize] * nums2[(j - 1) as usize] > max {\n            max = nums1[i as usize] * nums2[(j - 1) as usize];\n            max_j = j - 1;\n        }\n        if i > 0 && j > 0 && nums1[(i - 1) as usize] * nums2[(j - 1) as usize] > max {\n            max = nums1[(i - 1) as usize] * nums2[(j - 1) as usize];\n            max_i = i - 1;\n            max_j = j - 1;\n        }\n        res.push(max);\n        i = max_i;\n        j = max_j;\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push((nums1[0] * nums2[0], 0, 0));\n    visited.insert((0, 0));\n    while res.len() < N as usize {\n        let (product, i, j) = heap.pop().unwrap();\n        res.push(product);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] * nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] * nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    res",
    "    let mut products = Vec::new();\n    for i in nums1 {\n        for j in nums2.iter() {\n            products.push(i * j);\n        }\n    }\n    products.sort_by(|a, b| b.cmp(a));\n    products.into_iter().take(N as usize).collect()",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        let (a, b) = (nums1[i], nums2[j]);\n        if a > b {\n            res.push(a * b);\n            j -= 1;\n        } else {\n            res.push(a * b);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    let mut k = N;\n    while k > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        k -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    for i in 0..N {\n        let mut max = std::isize::MIN;\n        let mut x = 0;\n        let mut y = 0;\n        for j in 0..nums1.len() {\n            for k in 0..nums2.len() {\n                let prod = nums1[j] * nums2[k];\n                if prod > max {\n                    max = prod;\n                    x = j;\n                    y = k;\n                }\n            }\n        }\n        res.push(max);\n        nums1[x] = std::isize::MIN;\n        nums2[y] = std::isize::MIN;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut set = HashSet::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if set.contains(&product) {\n                continue;\n            }\n            if heap.len() < N as usize {\n                heap.push(product);\n                set.insert(product);\n            } else {\n                let min = heap.peek().unwrap();\n                if product > *min {\n                    heap.pop();\n                    heap.push(product);\n                    set.remove(&min);\n                    set.insert(product);\n                }\n            }\n        }\n    }\n    while let Some(product) = heap.pop() {\n        res.push(product);\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if i < 0 || j < 0 {\n            break;\n        }\n        if nums1[i] * nums2[j] > nums1[0] * nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else if nums1[i] * nums2[j] > nums1[i] * nums2[0] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            if nums1[i] > nums2[j] {\n                res.push(nums1[i] * nums2[j]);\n                i -= 1;\n            } else {\n                res.push(nums1[i] * nums2[j]);\n                j -= 1;\n            }\n        }\n        N -= 1;\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if i < 0 || j < 0 {\n            break;\n        }\n        if nums1[i as usize] * nums2[j as usize] >= nums1[i as usize] * nums2[(j - 1) as usize] {\n            result.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            result.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(*heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if i < 0 || j < 0 {\n            break;\n        }\n        let p1 = nums1[i as usize] * nums2[j as usize];\n        let p2 = nums1[i as usize] * nums2[(j - 1) as usize];\n        let p3 = nums1[(i - 1) as usize] * nums2[j as usize];\n        if p1 >= p2 && p1 >= p3 {\n            result.push(p1);\n            i -= 1;\n            j -= 1;\n        } else if p2 >= p1 && p2 >= p3 {\n            result.push(p2);\n            j -= 2;\n        } else {\n            result.push(p3);\n            i -= 2;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.iter().take(N as usize).cloned().collect()",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut products = Vec::new();\n    for num1 in &nums1 {\n        for num2 in &nums2 {\n            products.push(num1 * num2);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.iter().take(N as usize).cloned().collect()",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push((nums1[0] * nums2[0], 0, 0));\n    visited.insert((0, 0));\n    while res.len() < N as usize {\n        let (val, i, j) = heap.pop().unwrap();\n        res.push(val);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] * nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] * nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for num1 in nums1 {\n        for num2 in nums2.iter() {\n            heap.push(num1 * num2);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut result = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            result.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products[0..N as usize].to_vec()",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        i: 0,\n        j: 0,\n        product: nums1[0] * nums2[0],\n    });\n    visited.insert((0, 0));\n    while res.len() < N as usize {\n        let state = heap.pop().unwrap();\n        res.push(state.product);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            heap.push(State {\n                i: state.i + 1,\n                j: state.j,\n                product: nums1[state.i + 1] * nums2[state.j],\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            heap.push(State {\n                i: state.i,\n                j: state.j + 1,\n                product: nums1[state.i] * nums2[state.j + 1],\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    let mut count = 0;\n    while count < N {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            res.push(nums1[i as usize] * nums2[j as usize]);\n            i -= 1;\n        }\n        count += 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        product: nums1[0] * nums2[0],\n        i: 0,\n        j: 0,\n    });\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let state = heap.pop().unwrap();\n        res.push(state.product);\n        if state.i + 1 < nums1.len() && !visited.contains(&(state.i + 1, state.j)) {\n            heap.push(State {\n                product: nums1[state.i + 1] * nums2[state.j],\n                i: state.i + 1,\n                j: state.j,\n            });\n            visited.insert((state.i + 1, state.j));\n        }\n        if state.j + 1 < nums2.len() && !visited.contains(&(state.i, state.j + 1)) {\n            heap.push(State {\n                product: nums1[state.i] * nums2[state.j + 1],\n                i: state.i,\n                j: state.j + 1,\n            });\n            visited.insert((state.i, state.j + 1));\n        }\n    }\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1] {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        } else {\n            res.push(nums1[i - 1] * nums2[j - 1]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut result = Vec::new();\n    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            result.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for (i, &a) in nums1.iter().enumerate() {\n        for (j, &b) in nums2.iter().enumerate() {\n            if i + j < N as usize {\n                heap.push(a * b);\n            } else {\n                if let Some(x) = heap.peek() {\n                    if *x < a * b {\n                        heap.pop();\n                        heap.push(a * b);\n                    }\n                }\n            }\n        }\n    }\n    while let Some(x) = heap.pop() {\n        res.push(x);\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(State {\n        product: nums1[0] * nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    for _ in 0..N {\n        let state = heap.pop().unwrap();\n        res.push(state.product);\n        if state.index1 + 1 < nums1.len() && !visited.contains(&(state.index1 + 1, state.index2)) {\n            heap.push(State {\n                product: nums1[state.index1 + 1] * nums2[state.index2],\n                index1: state.index1 + 1,\n                index2: state.index2,\n            });\n            visited.insert((state.index1 + 1, state.index2));\n        }\n        if state.index2 + 1 < nums2.len() && !visited.contains(&(state.index1, state.index2 + 1)) {\n            heap.push(State {\n                product: nums1[state.index1] * nums2[state.index2 + 1],\n                index1: state.index1,\n                index2: state.index2 + 1,\n            });\n            visited.insert((state.index1, state.index2 + 1));\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] * nums2[j], i, j));\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some((num, _, _)) = heap.pop() {\n        res.push(num);\n    }\n    res.reverse();\n    res",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = vec![];\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while res.len() < N as usize {\n        if nums1[i] * nums2[j] > nums1[0] * nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[0] * nums2[j]);\n            j -= 1;\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.into_iter().take(N as usize).collect()",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort_by(|a, b| b.cmp(a));\n    nums2.sort_by(|a, b| b.cmp(a));\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while k < N {\n        let a = nums1[i] * nums2[j];\n        let b = nums1[i] * nums2[j + 1];\n        let c = nums1[i + 1] * nums2[j];\n        if a >= b && a >= c {\n            res.push(a);\n            i += 1;\n            j += 1;\n        } else if b >= a && b >= c {\n            res.push(b);\n            j += 1;\n        } else {\n            res.push(c);\n            i += 1;\n        }\n        k += 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else if product > *heap.peek().unwrap() {\n                heap.pop();\n                heap.push(product);\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.into_iter().take(N as usize).collect()",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut res = Vec::new();\n    let mut i = nums1.len() - 1;\n    let mut j = nums2.len() - 1;\n    while N > 0 {\n        if nums1[i] > nums2[j] {\n            res.push(nums1[i] * nums2[j]);\n            i -= 1;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j -= 1;\n        }\n        N -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let product = nums1[i] * nums2[j];\n            if heap.len() < N as usize {\n                heap.push(product);\n            } else {\n                if product > *heap.peek().unwrap() {\n                    heap.pop();\n                    heap.push(product);\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(*heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
    "    let mut products = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort();\n    products.reverse();\n    products.truncate(N as usize);\n    products",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    nums1.sort();\n    nums2.sort();\n    let mut result = Vec::new();\n    let mut i = nums1.len() as isize - 1;\n    let mut j = nums2.len() as isize - 1;\n    while N > 0 {\n        if nums1[i as usize] * nums2[j as usize] > nums1[i as usize] * nums2[(j - 1) as usize] {\n            result.push(nums1[i as usize] * nums2[j as usize]);\n            j -= 1;\n        } else {\n            result.push(nums1[i as usize] * nums2[(j - 1) as usize]);\n            i -= 1;\n        }\n        N -= 1;\n    }\n    result",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(nums1[i] * nums2[j]);\n            if heap.len() > N as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res"
  ]
}