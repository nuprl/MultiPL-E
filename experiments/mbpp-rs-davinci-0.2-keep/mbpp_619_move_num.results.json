{
  "name": "mbpp_619_move_num",
  "language": "rs",
  "prompt": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut str_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            str_vec.push(c);\n        }\n    }\n    str_vec.append(&mut num_vec);\n    str_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for ch in test_str.chars() {\n        if ch.is_digit(10) {\n            num_str.push(ch);\n        } else {\n            new_str.push(ch);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars.extend(nums);\n    chars.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for ch in test_str.chars() {\n        if ch.is_numeric() {\n            num_str.push(ch);\n        } else {\n            new_str.push(ch);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&nums);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut chars: Vec<char> = test_str.chars().collect();\n    let mut i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i].is_numeric() {\n            while j > i && chars[j].is_numeric() {\n                j -= 1;\n            }\n            if j > i {\n                chars.swap(i, j);\n                j -= 1;\n            }\n        }\n        i += 1;\n    }\n    chars.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"Idlovenasyouuothreeht0003553411\"`,\n right: `\"Iloveyouthreethousand1143553000\"`', /tmp/tmpytayblg_.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&nums);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for ch in test_str.chars() {\n        if ch.is_numeric() {\n            nums.push(ch);\n        } else {\n            result.push(ch);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&nums);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut chars: Vec<char> = test_str.chars().collect();\n    let mut nums: Vec<char> = Vec::new();\n    let mut new_str: String = String::new();\n\n    for c in chars {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n\n    new_str.push_str(&nums.iter().collect::<String>());\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n\n    for c in num_vec {\n        result.push(c);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut chars_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            chars_str.push(c);\n        }\n    }\n    chars_str.push_str(&num_str);\n    chars_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    result.push_str(&char_str);\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums: Vec<char> = Vec::new();\n    let mut chars: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in chars {\n        result.push(c);\n    }\n    for c in nums {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars.push_str(&nums);\n    chars\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut nums = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n\n    new_str.push_str(&nums);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&num_str);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut num = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&num);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut test_str = test_str.chars().collect::<Vec<char>>();\n    let mut num_idx = 0;\n    let mut char_idx = 0;\n    while char_idx < test_str.len() {\n        if test_str[char_idx].is_numeric() {\n            test_str.swap(num_idx, char_idx);\n            num_idx += 1;\n        }\n        char_idx += 1;\n    }\n    test_str.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"1143553000ouvethreeIloythousand\"`,\n right: `\"Iloveyouthreethousand1143553000\"`', /tmp/tmpqsdqqkwb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n\n    let mut result = String::new();\n    for c in chars {\n        result.push(c);\n    }\n\n    for c in nums {\n        result.push(c);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n\n    result.push_str(&num_str);\n\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut res = String::new();\n    for c in char_vec {\n        res.push(c);\n    }\n    for c in num_vec {\n        res.push(c);\n    }\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    let mut res_vec = Vec::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n\n    res_vec.append(&mut char_vec);\n    res_vec.append(&mut num_vec);\n\n    res_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    let mut res = String::new();\n    for c in chars {\n        res.push(c);\n    }\n    for c in nums {\n        res.push(c);\n    }\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&nums);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n\n    let mut result = String::new();\n    for c in chars {\n        result.push(c);\n    }\n\n    for c in nums {\n        result.push(c);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&nums);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums: Vec<char> = vec![];\n    let mut chars: Vec<char> = vec![];\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars.extend(nums);\n    chars.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut chars: Vec<char> = test_str.chars().collect();\n    let mut nums: Vec<char> = Vec::new();\n    let mut i = 0;\n    while i < chars.len() {\n        if chars[i].is_numeric() {\n            nums.push(chars.remove(i));\n        } else {\n            i += 1;\n        }\n    }\n    chars.append(&mut nums);\n    chars.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in chars {\n        result.push(c);\n    }\n    for c in nums {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut num = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&num);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums: Vec<char> = Vec::new();\n    let mut chars: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars.extend(nums);\n    chars.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        match c.to_digit(10) {\n            Some(d) => num_vec.push(d),\n            None => char_vec.push(c),\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for n in num_vec {\n        result.push_str(&n.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    let mut result_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    result_vec.extend(char_vec);\n    result_vec.extend(num_vec);\n    result_vec.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut chars = test_str.chars();\n    let mut nums = String::new();\n    let mut letters = String::new();\n    while let Some(c) = chars.next() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            letters.push(c);\n        }\n    }\n    letters + &nums\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    let mut res = String::new();\n    for c in chars {\n        res.push(c);\n    }\n    for n in nums {\n        res.push(n);\n    }\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    result.push_str(&char_str);\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    let mut res = String::new();\n    for c in chars {\n        res.push(c);\n    }\n    for n in nums {\n        res.push(n);\n    }\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut res = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&num_str);\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars.append(&mut nums);\n    chars.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut res = String::new();\n    for c in char_vec {\n        res.push(c);\n    }\n    for c in num_vec {\n        res.push(c);\n    }\n    res\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for ch in test_str.chars() {\n        if ch.is_numeric() {\n            nums.push(ch);\n        } else {\n            result.push(ch);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for ch in test_str.chars() {\n        if ch.is_numeric() {\n            num_str.push(ch);\n        } else {\n            result.push(ch);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result: String = String::new();\n    let mut nums: String = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    result.push_str(&char_str);\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.extend(num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str.push_str(&num_str);\n    char_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for ch in test_str.chars() {\n        if ch.is_numeric() {\n            num_str.push(ch);\n        } else {\n            result.push(ch);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_str = String::new();\n    let mut char_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            char_str.push(c);\n        }\n    }\n    char_str + &num_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut nums: Vec<char> = Vec::new();\n    let mut chars: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars.extend(nums);\n    chars.iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    let mut result: String = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n\n    for c in char_vec {\n        result.push(c);\n    }\n\n    for c in num_vec {\n        result.push(c);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut test_str = test_str;\n    let mut i = 0;\n    let mut j = test_str.len() - 1;\n    while i < j {\n        if test_str.chars().nth(i).unwrap().is_numeric() {\n            if !test_str.chars().nth(j).unwrap().is_numeric() {\n                let temp = test_str.chars().nth(i).unwrap();\n                test_str.remove(i);\n                test_str.insert(j, temp);\n            } else {\n                j -= 1;\n            }\n        } else {\n            i += 1;\n        }\n    }\n    test_str\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"Iloveyouthreethousand0003553411\"`,\n right: `\"Iloveyouthreethousand1143553000\"`', /tmp/tmp7z9aaxvz.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut result = String::new();\n    let mut nums = String::new();\n\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n\n    result.push_str(&nums);\n    result\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.extend(num_vec);\n    char_vec.into_iter().collect()\n}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}