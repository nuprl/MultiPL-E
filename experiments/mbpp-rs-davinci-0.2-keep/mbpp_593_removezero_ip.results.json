{
  "name": "mbpp_593_removezero_ip",
  "language": "rs",
  "prompt": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut is_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            new_ip.push(c);\n            is_zero = true;\n        } else if c != '0' || !is_zero {\n            new_ip.push(c);\n            is_zero = false;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with('0') {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut is_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            is_zero = true;\n        } else if c != '0' || !is_zero {\n            result.push(c);\n            is_zero = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n        i += 1;\n    }\n    if zero_count == ip.len() {\n        result.push('0');\n    } else {\n        result.push_str(&ip[zero_count..]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpykhoc2p7.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut is_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            new_ip.push(c);\n            is_zero = true;\n        } else if c != '0' {\n            new_ip.push(c);\n            is_zero = false;\n        } else if !is_zero {\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = ip_vec[i].to_string();\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    let mut ip_new = ip_vec_new[0].to_string();\n    for i in 1..ip_vec_new.len() {\n        ip_new.push_str(\".\");\n        ip_new.push_str(&ip_vec_new[i]);\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i][1..].to_string();\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip: String = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num: String = String::new();\n        for c in ip_vec[i].chars() {\n            if c != '0' {\n                num.push(c);\n            }\n        }\n        if num.len() == 0 {\n            num.push('0');\n        }\n        new_ip.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for i in ip.split('.') {\n        if first {\n            result.push_str(i);\n            first = false;\n        } else {\n            result.push_str(\".\");\n            result.push_str(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmplarc83y_.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.replace(\"0\", \"\");\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = ip_vec_new.join(\".\");\n    if ip_new.starts_with(\".\") {\n        ip_new = ip_new.replace(\".\", \"\");\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmporrvvw3j.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with('0') {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = String::new();\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push('.');\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpl6o2k772.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = String::from(ip_vec[i]);\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            count = 0;\n        } else if c != '0' || count != 0 {\n            result.push(c);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i != '0' || count != 0 {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i].remove(0);\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            flag = false;\n        } else if c != '0' {\n            result.push(c);\n            flag = true;\n        } else if flag {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = ip_vec[i][j..].to_string();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            flag = false;\n        } else if c != '0' {\n            result.push(c);\n            flag = true;\n        } else if flag {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(zero_count) {\n        new_ip.push(c);\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpvddlsmgn.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpgmj8fkry.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    format!(\"{}.{}.{}.{}\", ip_vec[0], ip_vec[1], ip_vec[2], ip_vec[3])\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmp40o8051x.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec = ip.split(\".\").collect::<Vec<&str>>();\n    let mut ip_vec_new = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.chars().skip(1).collect();\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut is_zero = true;\n    for i in ip.chars() {\n        if i == '0' && is_zero {\n            continue;\n        } else {\n            is_zero = false;\n            new_ip.push(i);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpws_2hd82.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpdwsnooat.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(i);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp8yudnwm8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpd_d2dfnm.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    let mut dot_count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            dot_count += 1;\n            if dot_count == 4 {\n                break;\n            }\n            result.push(c);\n            zero_count = 0;\n        } else if c == '0' {\n            zero_count += 1;\n        } else {\n            for _ in 0..zero_count {\n                result.push('0');\n            }\n            result.push(c);\n            zero_count = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpvjkjhhhj.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i].remove(0);\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        while ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].chars().skip(1).collect();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip = ip.split('.').collect::<Vec<&str>>();\n    let mut i = 0;\n    while i < 4 {\n        if ip[i].len() > 1 && ip[i].starts_with('0') {\n            ip[i] = &ip[i][1..];\n        }\n        i += 1;\n    }\n    ip.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpiey_x7t7.rs:6:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpl6o2k772.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut newip = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            newip.push(i);\n            flag = false;\n        } else if i != '0' {\n            newip.push(i);\n            flag = true;\n        } else if flag {\n            newip.push(i);\n        }\n    }\n    newip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '0' && count == 0 {\n            continue;\n        }\n        result.push(c);\n        count += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp_5z4xh6w.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut zeroes = 0;\n        for j in 0..ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() == '0' {\n                zeroes += 1;\n            } else {\n                break;\n            }\n        }\n        ip_vec[i] = &ip_vec[i][zeroes..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            flag = false;\n            result.push(c);\n        } else if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i != '0' {\n            new_ip.push(i);\n            count += 1;\n        } else if count > 0 {\n            new_ip.push(i);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<&str> = Vec::new();\n    for i in ip_vec {\n        if i.starts_with(\"0\") {\n            ip_vec_new.push(&i[1..]);\n        } else {\n            ip_vec_new.push(i);\n        }\n    }\n    let ip_new = ip_vec_new.join(\".\");\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    let mut first_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            if first_zero {\n                result.push_str(&zero_count.to_string());\n                zero_count = 0;\n                first_zero = false;\n            }\n            result.push(c);\n        } else if c == '0' {\n            zero_count += 1;\n        } else {\n            if first_zero {\n                result.push_str(&zero_count.to_string());\n                zero_count = 0;\n                first_zero = false;\n            }\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"0216.8.94.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpaih2fmfc.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut prev_zero = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            prev_zero = false;\n        } else if c == '0' && prev_zero {\n            continue;\n        } else {\n            result.push(c);\n            prev_zero = c == '0';\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp2w1iexu5.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut skip_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            skip_zero = true;\n        } else if c != '0' || !skip_zero {\n            result.push(c);\n            skip_zero = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(zero_count) {\n        new_ip.push(c);\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpvddlsmgn.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with('0') {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_num = ip_vec[i].to_string();\n        while ip_num.starts_with('0') {\n            ip_num.remove(0);\n        }\n        new_ip.push_str(&ip_num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if flag {\n                new_ip.push_str(&ip[j..i]);\n                new_ip.push('.');\n                j = i + 1;\n            } else {\n                j = i + 1;\n            }\n            flag = false;\n        } else if ip.chars().nth(i).unwrap() != '0' {\n            flag = true;\n        }\n        i += 1;\n    }\n    if flag {\n        new_ip.push_str(&ip[j..i]);\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmptan8n5v1.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].to_string();\n        while num.starts_with(\"0\") {\n            num.remove(0);\n        }\n        new_ip.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push_str(\".\");\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with('0') {\n            j = j[1..].to_string();\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_num = ip_vec[i].parse::<u32>().unwrap();\n        while ip_num > 0 {\n            ip_str.push(((ip_num % 10) + 48) as char);\n            ip_num /= 10;\n        }\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "error[E0604]: only `u8` can be cast as `char`, not `u32`\n --> /tmp/tmpdjpfcv3v.rs:8:25\n  |\n8 |             ip_str.push(((ip_num % 10) + 48) as char);\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n  |\nhelp: try `char::from_u32` instead\n --> /tmp/tmpdjpfcv3v.rs:8:25\n  |\n8 |             ip_str.push(((ip_num % 10) + 48) as char);\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0604`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        ip_str.push_str(ip_vec[i]);\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp6hfefjl0.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpdwsnooat.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut first = true;\n    for i in ip.split(\".\") {\n        if first {\n            first = false;\n        } else {\n            result.push('.');\n        }\n        result.push_str(&i.trim_start_matches('0'));\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = String::from(ip_vec[i]);\n        while ip_str.starts_with('0') {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    let mut ip_new = String::new();\n    for i in 0..ip_vec_new.len() {\n        ip_new.push_str(&ip_vec_new[i]);\n        if i != ip_vec_new.len() - 1 {\n            ip_new.push('.');\n        }\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' {\n            count += 1;\n        } else {\n            break;\n        }\n    }\n    for i in count..ip.len() {\n        new_ip.push(ip.chars().nth(i).unwrap());\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpvlqrmypj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() == '0' {\n                ip_vec[i] = &ip_vec[i][1..];\n            } else {\n                break;\n            }\n            j += 1;\n        }\n    }\n    let mut ip_str = String::new();\n    for i in 0..4 {\n        ip_str.push_str(ip_vec[i]);\n        if i != 3 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpzoxun4_r.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() == '0' {\n                ip_vec[i] = &ip_vec[i][1..];\n            } else {\n                break;\n            }\n            j += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag52 = false;\n    let mut flag53 = false;\n    let mut flag54 = false;\n\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp62vdtxi0.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n    let mut p\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmppsu7b3so.rs:63:14\n   |\n63 |     let mut p\n   |              ^ help: add `;` here\n64 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmppsu7b3so.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' || count != 0 {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '0' && count == 0 {\n            continue;\n        }\n        result.push(c);\n        count += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp_5z4xh6w.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip: Vec<&str> = ip.split('.').collect();\n    for i in 0..ip.len() {\n        if ip[i].starts_with('0') {\n            ip[i] = &ip[i][1..];\n        }\n    }\n    ip.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<&str> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_vec_new_str = String::new();\n        for j in 0..ip_vec[i].len() {\n            if ip_vec[i][j..j+1] != \"0\" {\n                ip_vec_new_str.push_str(&ip_vec[i][j..j+1]);\n            }\n        }\n        ip_vec_new.push(ip_vec_new_str.as_str());\n    }\n    let mut ip_new = String::new();\n    for i in 0..ip_vec_new.len() {\n        if i == ip_vec_new.len()-1 {\n            ip_new.push_str(ip_vec_new[i]);\n        } else {\n            ip_new.push_str(ip_vec_new[i]);\n            ip_new.push_str(\".\");\n        }\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmpu7m5rske.rs:8:34\n  |\n8 |             if ip_vec[i][j..j+1] != \"0\" {\n  |                                  ^^ no implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].trim_start_matches(\"0\").to_string();\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = vec![];\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.replacen(\"0\", \"\", 1);\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.replace(\"0\", \"\");\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    format!(\"{}.{}.{}.{}\", ip_vec[0], ip_vec[1], ip_vec[2], ip_vec[3])\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmp40o8051x.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = ip_vec[i].to_string();\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec[i] = ip_str.as_str();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "error[E0597]: `ip_str` does not live long enough\n  --> /tmp/tmp9j6uugk6.rs:9:21\n   |\n5  |         let mut ip_str = ip_vec[i].to_string();\n   |                          ------ borrow later used here\n...\n9  |         ip_vec[i] = ip_str.as_str();\n   |                     ^^^^^^^^^^^^^^^ borrowed value does not live long enough\n10 |     }\n   |     - `ip_str` dropped here while still borrowed\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec.iter() {\n        let mut ip_str = String::from(*i);\n        while ip_str.starts_with('0') {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    let ip_new = ip_vec_new.join(\".\");\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(zero_count) {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp495ubs1y.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].to_string();\n        while num.starts_with('0') {\n            num.remove(0);\n        }\n        new_ip.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut temp_str = String::new();\n        let mut temp_vec: Vec<char> = ip_vec[i].chars().collect();\n        for j in 0..temp_vec.len() {\n            if temp_vec[j] != '0' {\n                temp_str.push_str(&temp_vec[j].to_string());\n                temp_str.push_str(&temp_vec[j + 1..temp_vec.len()].iter().collect::<String>());\n                break;\n            }\n        }\n        ip_vec_new.push(temp_str);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            count = 0;\n        } else if c == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(c);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut i = 0;\n    let mut count = 0;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if count > 0 {\n                new_ip.push_str(&count.to_string());\n            }\n            new_ip.push('.');\n            count = 0;\n        } else {\n            count = count * 10 + ip.chars().nth(i).unwrap().to_digit(10).unwrap();\n        }\n        i += 1;\n    }\n    if count > 0 {\n        new_ip.push_str(&count.to_string());\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].as_bytes()[j] == b'0' {\n            j += 1;\n        }\n        ip_vec[i] = ip_vec[i][j..].to_string();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmp_abbfh7u.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut res = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            res.push(i);\n            flag = false;\n        } else if i != '0' {\n            res.push(i);\n            flag = true;\n        } else if flag {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    for i in 0..4 {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].trim_start_matches(\"0\").to_string();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmp9xzxm5fa.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' {\n            result.push(i);\n            count += 1;\n        } else if count > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut temp = ip_vec[i].to_string();\n        while temp.starts_with(\"0\") {\n            temp.remove(0);\n        }\n        ip_str.push_str(&temp);\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].chars().skip(1).collect();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            new_ip.push(c);\n            flag = false;\n        } else if c != '0' {\n            new_ip.push(c);\n            flag = true;\n        } else if flag {\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpdwsnooat.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = 0;\n    let mut len = ip.len();\n    while i < len {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if flag == 0 {\n                new_ip.push_str(\"0\");\n                new_ip.push('.');\n            } else {\n                new_ip.push_str(&ip[j..i]);\n                new_ip.push('.');\n            }\n            j = i + 1;\n            flag = 0;\n        } else if ip.chars().nth(i).unwrap() != '0' {\n            flag = 1;\n        }\n        i += 1;\n    }\n    if flag == 0 {\n        new_ip.push_str(\"0\");\n    } else {\n        new_ip.push_str(&ip[j..i]);\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpzuy_jfvk.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpl6o2k772.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            new_ip.push(c);\n            flag = true;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp_h05wpvi.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' {\n            result.push(i);\n            count += 1;\n        } else if count == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp921arrzm.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for (i, c) in ip.chars().enumerate() {\n        if i >= zero_count {\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpe0hlc0nw.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut temp = ip_vec[i].to_string();\n        while temp.starts_with(\"0\") {\n            temp.remove(0);\n        }\n        ip_vec[i] = &temp;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0597]: `temp` does not live long enough\n  --> /tmp/tmp9ryswf_1.rs:9:21\n   |\n5  |         let mut temp = ip_vec[i].to_string();\n   |                        ------ borrow later used here\n...\n9  |         ip_vec[i] = &temp;\n   |                     ^^^^^ borrowed value does not live long enough\n10 |     }\n   |     - `temp` dropped here while still borrowed\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n\n    for i in 0..ip_vec.len() {\n        let mut ip_str = String::from(ip_vec[i]);\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n\n    let mut ip_new = String::new();\n    for i in 0..ip_vec_new.len() {\n        ip_new.push_str(&ip_vec_new[i]);\n        if i != ip_vec_new.len() - 1 {\n            ip_new.push_str(\".\");\n        }\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_num: Vec<char> = ip_vec[i].chars().collect();\n        let mut j = 0;\n        while ip_num[j] == '0' {\n            ip_num.remove(j);\n        }\n        ip_vec[i] = &ip_num.iter().collect::<String>();\n        ip_str.push_str(ip_vec[i]);\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "warning: variable does not need to be mutable\n --> /tmp/tmp40m1x2u8.rs:7:13\n  |\n7 |         let mut j = 0;\n  |             ----^\n  |             |\n  |             help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0716]: temporary value dropped while borrowed\n  --> /tmp/tmp40m1x2u8.rs:11:22\n   |\n11 |         ip_vec[i] = &ip_num.iter().collect::<String>();\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n   |                      |\n   |                      creates a temporary which is freed while still in use\n12 |         ip_str.push_str(ip_vec[i]);\n   |                         ------ borrow later used here\n   |\n   = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split('.').map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with('0') {\n            ip_vec[i] = ip_vec[i][1..].to_string();\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].chars().skip(1).collect();\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            flag = false;\n        } else if c == '0' && !flag {\n            continue;\n        } else {\n            result.push(c);\n            flag = true;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            if flag {\n                result.push(i);\n            }\n            flag = false;\n            count = 0;\n        } else if i == '0' {\n            if count == 0 {\n                flag = true;\n            }\n            count += 1;\n        } else {\n            flag = false;\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216894196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpx3ltevx_.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = 0;\n    let mut dot_count = 0;\n    let mut dot_flag = 0;\n    let mut dot_flag_2 = 0;\n    let mut dot_flag_3 = 0;\n    let mut dot_flag_4 = 0;\n    let mut dot_flag_5 = 0;\n    let mut dot_flag_6 = 0;\n    let mut dot_flag_7 = 0;\n    let mut dot_flag_8 = 0;\n    let mut dot_flag_9 = 0;\n    let mut dot_flag_10 = 0;\n    let mut dot_flag_11 = 0;\n    let mut dot_flag_12 = 0;\n    let mut dot_flag_13 = 0;\n    let mut dot_flag_14 = 0;\n    let mut dot_flag_15 = 0;\n    let mut dot_flag_16 = 0;\n    let mut dot_flag_17 = 0;\n    let mut dot_flag_18 = 0;\n    let mut dot_flag_19 = 0;\n    let mut dot_flag_20 = 0;\n    let mut dot_flag_21 = 0;\n    let mut dot_flag_22 = 0;\n    let mut dot_flag_23 = 0;\n    let mut dot_flag_24 = 0;\n    let mut dot_flag_25 = 0;\n    let mut dot_flag_26 = 0;\n    let mut dot_flag_27 = 0;\n    let mut dot_flag_28 = 0;\n    let mut dot_flag_29 = 0;\n    let mut dot_flag_30 = 0;\n    let mut dot_flag_31 = 0;\n    let mut dot_flag_32 = 0;\n    let mut dot_flag_33 = 0;\n    let mut dot_flag_34 = 0;\n    let mut dot_flag_35 = 0;\n    let mut dot_flag_36 = 0;\n    let mut dot_flag_37 = 0;\n    let mut dot_flag_38 = 0;\n    let mut dot_flag_39 = 0;\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7rim35xj.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut skip = true;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            skip = true;\n        } else if skip && c == '0' {\n            continue;\n        } else {\n            result.push(c);\n            skip = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' {\n            result.push(i);\n            count += 1;\n        } else if count > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = String::from(ip_vec[i]);\n        while ip_str.starts_with(\"0\") {\n            ip_str.remove(0);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i].remove(0);\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' || count > 0 {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() == '0' {\n                ip_vec[i] = &ip_vec[i][1..];\n            } else {\n                break;\n            }\n            j += 1;\n        }\n    }\n    format!(\"{}.{}.{}.{}\", ip_vec[0], ip_vec[1], ip_vec[2], ip_vec[3])\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpr191ebsx.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_index = 0;\n    for i in ip_vec.iter() {\n        if i.len() > 1 && i.starts_with(\"0\") {\n            ip_vec[ip_vec_index] = &i[1..];\n        }\n        ip_vec_index += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `ip_vec` as mutable because it is also borrowed as immutable\n --> /tmp/tmpyazkqjtg.rs:7:13\n  |\n5 |     for i in ip_vec.iter() {\n  |              -------------\n  |              |\n  |              immutable borrow occurs here\n  |              immutable borrow later used here\n6 |         if i.len() > 1 && i.starts_with(\"0\") {\n7 |             ip_vec[ip_vec_index] = &i[1..];\n  |             ^^^^^^ mutable borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i == '0' {\n            count += 1;\n        } else {\n            new_ip.push_str(&ip[count..]);\n            break;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpiygnj4oo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut i_vec: Vec<char> = i.chars().collect();\n        let mut i_vec_new: Vec<char> = Vec::new();\n        for j in i_vec {\n            if j != '0' {\n                i_vec_new.push(j);\n            }\n        }\n        ip_vec_new.push(i_vec_new.iter().collect());\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for c in ip.chars().skip(zero_count) {\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp495ubs1y.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut count = 0;\n    let mut flag = false;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if flag {\n                result.push_str(&count.to_string());\n                result.push('.');\n                count = 0;\n                flag = false;\n            } else {\n                result.push('0');\n                result.push('.');\n            }\n        } else {\n            count = count * 10 + ip.chars().nth(i).unwrap().to_digit(10).unwrap();\n            flag = true;\n        }\n        i += 1;\n    }\n    if flag {\n        result.push_str(&count.to_string());\n    } else {\n        result.push('0');\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut num = ip_vec[i].to_string();\n        while num.starts_with('0') {\n            num.remove(0);\n        }\n        new_ip.push_str(&num);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut is_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            is_zero = true;\n        } else if c == '0' && is_zero {\n            continue;\n        } else {\n            result.push(c);\n            is_zero = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    for i in 0..4 {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with('0') {\n            ip_vec[i] = ip_vec[i][1..].to_string();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpwduja8w4.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut res = String::new();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        res.push_str(ip_vec[i]);\n        if i != ip_vec.len() - 1 {\n            res.push_str(\".\");\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = ip_vec[i][j..].to_string();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with('0') {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = String::new();\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push('.');\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1270ujp8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            new_ip.push(c);\n            flag = true;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp_h05wpvi.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            flag = false;\n        } else if i == '0' && !flag {\n            continue;\n        } else {\n            new_ip.push(i);\n            flag = true;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push('.');\n            count = 0;\n        } else if i != '0' || count > 0 {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n        i += 1;\n    }\n    if zero_count == 0 {\n        return ip;\n    }\n    for i in zero_count..ip.len() {\n        result.push(ip.chars().nth(i).unwrap());\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpq2nouex3.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i][1..].to_string();\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        ip_vec[i] = ip_vec[i].trim_start_matches('0');\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut flag1 = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag52 = false;\n   \n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpau_2wnxv.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut prev_zero = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            prev_zero = false;\n        } else if c == '0' && prev_zero {\n            continue;\n        } else {\n            result.push(c);\n            prev_zero = c == '0';\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp2w1iexu5.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with('0') {\n            j = j[1..].to_string();\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpdwsnooat.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut i = 0;\n    let mut count = 0;\n    let mut flag = false;\n    while i < ip.len() {\n        if ip.chars().nth(i).unwrap() == '.' {\n            if flag {\n                new_ip.push('.');\n                flag = false;\n            }\n            count = 0;\n        } else if ip.chars().nth(i).unwrap() == '0' {\n            count += 1;\n        } else {\n            if count > 0 {\n                for _ in 0..count {\n                    new_ip.push('0');\n                }\n                count = 0;\n            }\n            new_ip.push(ip.chars().nth(i).unwrap());\n            flag = true;\n        }\n        i += 1;\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpcs1a3yzl.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut first_zero = true;\n    let mut first_dot = true;\n    for c in ip.chars() {\n        if c == '.' {\n            if first_dot {\n                first_dot = false;\n                result.push(c);\n            } else {\n                if first_zero {\n                    result.push('0');\n                }\n                result.push(c);\n                first_zero = true;\n            }\n        } else {\n            if c != '0' {\n                first_zero = false;\n            }\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpx90r4d7o.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' {\n            count += 1;\n        } else {\n            break;\n        }\n    }\n    for i in count..ip.len() {\n        new_ip.push(ip.chars().nth(i).unwrap());\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpvlqrmypj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag52 = false;\n    let mut flag53 = false;\n    let mut flag54 = false;\n\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp62vdtxi0.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut flag = false;\n    let mut flag1 = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag52 = false;\n   \n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpau_2wnxv.rs:2:33\n  |\n2 | fn removezero_ip(ip: String) -> String {\n  |    -------------                ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() == '0' {\n                ip_vec[i] = &ip_vec[i][1..];\n            } else {\n                break;\n            }\n            j += 1;\n        }\n    }\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        ip_str.push_str(ip_vec[i]);\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split('.').collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            flag = false;\n        } else if c == '0' && !flag {\n            continue;\n        } else {\n            result.push(c);\n            flag = true;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' || count != 0 {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str = String::from(ip_vec[i]);\n        while ip_str.starts_with(\"0\") {\n            ip_str = ip_str.replacen(\"0\", \"\", 1);\n        }\n        ip_vec_new.push(ip_str);\n    }\n    let mut ip_new = String::new();\n    for i in 0..ip_vec_new.len() {\n        ip_new.push_str(&ip_vec_new[i]);\n        if i != ip_vec_new.len() - 1 {\n            ip_new.push('.');\n        }\n    }\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' {\n            result.push(i);\n            count += 1;\n        } else if count > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i] == \"0\" {\n            ip_vec.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp08iba159.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut is_zero = true;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            is_zero = true;\n        } else if c != '0' {\n            result.push(c);\n            is_zero = false;\n        } else if !is_zero {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    for ch in ip.chars() {\n        if ch == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    for (i, ch) in ip.chars().enumerate() {\n        if i >= zero_count {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp6fsbltes.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' {\n            result.push(i);\n            count += 1;\n        } else if count > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i != '0' {\n            new_ip.push(i);\n            count += 1;\n        } else if count > 0 {\n            new_ip.push(i);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1270ujp8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i != '0' {\n            new_ip.push(i);\n            count += 1;\n        } else if count > 0 {\n            new_ip.push(i);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_part = ip_vec[i].to_string();\n        while ip_part.starts_with(\"0\") {\n            ip_part.remove(0);\n        }\n        new_ip.push_str(&ip_part);\n        if i != ip_vec.len() - 1 {\n            new_ip.push_str(\".\");\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i][1..].to_string();\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with('0') {\n            j.remove(0);\n        }\n        ip_vec_new.push(j);\n    }\n    let mut ip_new = String::new();\n    for i in ip_vec_new {\n        ip_new.push_str(&i);\n        ip_new.push('.');\n    }\n    ip_new.pop();\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with('0') {\n            j = j.replacen('0', \"\", 1);\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = &ip_vec[i][1..];\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].starts_with(\"0\") {\n            ip_vec[i].remove(0);\n        }\n        i += 1;\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut res = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            res.push(c);\n            flag = false;\n        } else if c != '0' {\n            res.push(c);\n            flag = true;\n        } else if flag {\n            res.push(c);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        } else {\n            flag = true;\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp1270ujp8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i][j] == '0' {\n            j += 1;\n        }\n        if j == ip_vec[i].len() {\n            new_ip.push_str(\"0\");\n        } else {\n            new_ip.push_str(&ip_vec[i][j..]);\n        }\n        if i != ip_vec.len() - 1 {\n            new_ip.push_str(\".\");\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "error[E0277]: the type `str` cannot be indexed by `usize`\n --> /tmp/tmpi3qm7jby.rs:7:38\n  |\n7 |         while j < ip_vec[i].len() && ip_vec[i][j] == '0' {\n  |                                      ^^^^^^^^^^^^ string indices are ranges of `usize`\n  |\n  = help: the trait `SliceIndex<str>` is not implemented for `usize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<usize>` for `str`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].as_bytes()[j] == b'0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for c in ip.chars() {\n        if c == '.' {\n            if count == 0 {\n                result.push('0');\n            }\n            result.push(c);\n            count = 0;\n        } else if c != '0' {\n            result.push(c);\n            count += 1;\n        }\n    }\n    if count == 0 {\n        result.push('0');\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|s| s.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].as_bytes()[j] == b'0' {\n            j += 1;\n        }\n        ip_vec[i] = ip_vec[i][j..].to_string();\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' && count == 0 {\n            continue;\n        } else {\n            result.push(i);\n            count += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmporrvvw3j.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '0' && !flag {\n            continue;\n        }\n        flag = true;\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpl4l7sw8y.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            result.push(i);\n            count = 0;\n        } else if i != '0' {\n            result.push(i);\n            count += 1;\n        } else if count > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() == '0' {\n                ip_vec[i] = &ip_vec[i][1..];\n            } else {\n                break;\n            }\n        }\n    }\n    let mut new_ip = String::new();\n    for i in 0..4 {\n        new_ip.push_str(ip_vec[i]);\n        if i != 3 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmphj6w0ryq.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpl6o2k772.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '.' {\n            new_ip.push(i);\n            count = 0;\n        } else if i == '0' && count == 0 {\n            continue;\n        } else {\n            new_ip.push(i);\n            count += 1;\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_str_temp = String::new();\n        let mut ip_vec_temp: Vec<char> = ip_vec[i].chars().collect();\n        for j in 0..ip_vec_temp.len() {\n            if ip_vec_temp[j] != '0' {\n                ip_str_temp.push_str(&ip_vec_temp[j..ip_vec_temp.len()].iter().collect::<String>());\n                break;\n            }\n        }\n        ip_str.push_str(&ip_str_temp);\n        if i != ip_vec.len() - 1 {\n            ip_str.push_str(\".\");\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut new_ip = String::new();\n    let mut flag = false;\n    for c in ip.chars() {\n        if c == '.' {\n            new_ip.push(c);\n            flag = false;\n        } else if c != '0' {\n            new_ip.push(c);\n            flag = true;\n        } else if flag {\n            new_ip.push(c);\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    for i in 0..4 {\n        let mut j = 0;\n        while j < ip_vec[i].len() && ip_vec[i].chars().nth(j).unwrap() == '0' {\n            j += 1;\n        }\n        ip_vec[i] = &ip_vec[i][j..];\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmpl6o2k772.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split('.').map(|s| s.to_string()).collect();\n    let mut i = 0;\n    while i < ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with('0') {\n            ip_vec[i] = ip_vec[i][1..].to_string();\n        } else {\n            i += 1;\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<String> = ip.split(\".\").map(|x| x.to_string()).collect();\n    for i in 0..ip_vec.len() {\n        if ip_vec[i].len() > 1 && ip_vec[i].starts_with(\"0\") {\n            ip_vec[i] = ip_vec[i].chars().skip(1).collect();\n        }\n    }\n    ip_vec.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut new_ip = String::new();\n    for i in 0..ip_vec.len() {\n        let mut j = 0;\n        while j < ip_vec[i].len() {\n            if ip_vec[i].chars().nth(j).unwrap() == '0' {\n                j += 1;\n            } else {\n                break;\n            }\n        }\n        new_ip.push_str(&ip_vec[i][j..]);\n        if i != ip_vec.len() - 1 {\n            new_ip.push('.');\n        }\n    }\n    new_ip\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.split_off(1);\n        }\n        ip_vec_new.push(j);\n    }\n    let ip_new = ip_vec_new.join(\".\");\n    ip_new\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut flag = false;\n    for ch in ip.chars() {\n        if ch == '.' {\n            result.push(ch);\n            flag = false;\n        } else if ch != '0' {\n            result.push(ch);\n            flag = true;\n        } else if flag {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    for i in ip.chars() {\n        if i == '0' {\n            count += 1;\n        } else {\n            break;\n        }\n    }\n    for i in ip.chars().skip(count) {\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmpfgw3ynjq.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut prev = false;\n    for c in ip.chars() {\n        if c == '.' {\n            result.push(c);\n            prev = false;\n        } else if c == '0' && !prev {\n            continue;\n        } else {\n            result.push(c);\n            prev = true;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut result = String::new();\n    let mut zero_count = 0;\n    for c in ip.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            break;\n        }\n    }\n    result.push_str(&ip[zero_count..]);\n    result\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"216.08.094.196\"`,\n right: `\"216.8.94.196\"`', /tmp/tmp_ihzryyh.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_vec_new: Vec<String> = Vec::new();\n    for i in ip_vec {\n        let mut j = i.to_string();\n        while j.starts_with(\"0\") {\n            j = j.chars().skip(1).collect::<String>();\n        }\n        ip_vec_new.push(j);\n    }\n    ip_vec_new.join(\".\")\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n    let mut ip_vec: Vec<&str> = ip.split(\".\").collect();\n    let mut ip_str = String::new();\n    for i in 0..ip_vec.len() {\n        let mut ip_part = String::from(ip_vec[i]);\n        while ip_part.starts_with(\"0\") && ip_part.len() > 1 {\n            ip_part.remove(0);\n        }\n        ip_str.push_str(&ip_part);\n        if i != ip_vec.len() - 1 {\n            ip_str.push('.');\n        }\n    }\n    ip_str\n}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}