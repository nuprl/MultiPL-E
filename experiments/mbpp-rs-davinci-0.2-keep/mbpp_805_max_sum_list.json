{
  "name": "mbpp_805_max_sum_list",
  "language": "rs",
  "prompt": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    lists.iter().max_by_key(|list| list.iter().sum()).unwrap().clone()",
    "    lists.into_iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap()",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    lists.iter().max_by_key(|list| list.iter().sum::<isize>()).unwrap().clone()",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_list = Vec::new();\n    let mut max_sum = 0;\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    lists.into_iter().max_by_key(|x| x.iter().sum()).unwrap()",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    unimplemented!()",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    unimplemented!()",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, &x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |acc, x| acc + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list",
    "    let mut max_sum = 0;\n    let mut max_list = Vec::new();\n    for list in lists {\n        let sum = list.iter().fold(0, |sum, &x| sum + x);\n        if sum > max_sum {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    max_list"
  ]
}