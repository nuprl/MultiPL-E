{
  "name": "mbpp_412_remove_odd",
  "language": "rs",
  "prompt": "/// Write a python function to remove odd numbers from a given list.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    l.into_iter().filter(|&x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|&x| x % 2 == 0).collect()",
    "    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.iter().filter(|&x| x % 2 == 0).cloned().collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|&x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|&x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    let mut v = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n    }\n    v",
    "    l.into_iter().filter(|x| *x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()",
    "    l.into_iter().filter(|x| x % 2 == 0).collect()"
  ]
}