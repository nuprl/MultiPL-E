{
  "name": "mbpp_739_find_Index",
  "language": "rs",
  "prompt": "/// Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfn find_Index(n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find_Index;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 14);\n    assert_eq!(candidate(4), 45);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut low = 1;\n    let mut high = n * n + 1;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut t = (mid * (mid + 1)) / 2;\n        if t < 10 {\n            low = mid + 1;\n        } else {\n            let mut digits = 0;\n            while t > 0 {\n                digits += 1;\n                t /= 10;\n            }\n            if digits == n {\n                ans = mid;\n                break;\n            } else if digits < n {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = (j * (j + 1)) / 2;\n    }\n    j",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if is_triangular(m) {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n;\n    let mut ans = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        let mut x = mid * (mid + 1) / 2;\n        let mut digits = 0;\n        while x > 0 {\n            digits += 1;\n            x /= 10;\n        }\n        if digits == n {\n            ans = mid;\n            r = mid - 1;\n        } else if digits < n {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while j < n {\n        i += 1;\n        j = (i * (i + 1)) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t = (i * (i + 1)) / 2;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut tri = mid * (mid + 1) / 2;\n        if tri < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < 10_isize.pow(n as u32) {\n        low = mid + 1;\n        mid = (low + high) / 2;\n        high = mid * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let tri_num = mid * (mid + 1) / 2;\n        if tri_num < 10_isize.pow(n as u32) {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 1;\n    while count < n {\n        j = j + 1;\n        i = i + j;\n        count = i.to_string().len() as isize;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    j",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        let mut temp = triangular_number(mid);\n        if temp.to_string().len() == n as usize {\n            ans = mid;\n            r = mid - 1;\n        } else if temp.to_string().len() < n as usize {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    ans",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n\n    while (j as f64).log10() + 1.0 < n as f64 {\n        i += 1;\n        j += i;\n    }\n\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 1;\n    while count < n {\n        i += 1;\n        j += i;\n        count = j.to_string().len() as isize;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut k = 1;\n    while k < n {\n        i = i + 1;\n        j = j + i;\n        k = k + 1;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n        t = j * (j + 1) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let mut c = 0;\n        let mut i = 1;\n        while i * (i + 1) / 2 <= m {\n            i += 1;\n            c += 1;\n        }\n        if c >= n {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        i += j;\n        j += 1;\n    }\n    j",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        if temp % 10 == 0 {\n            temp = temp / 10;\n        }\n        let mut count = 0;\n        while temp > 0 {\n            count += 1;\n            temp = temp / 10;\n        }\n        if count == n {\n            ans = mid;\n            high = mid - 1;\n        } else if count < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut triangle = 1;\n    while i.to_string().len() <= n as usize {\n        triangle = triangle + i;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 2",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    return j;",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        let mut count = 0;\n        while temp > 0 {\n            count += 1;\n            temp /= 10;\n        }\n        if count == n {\n            ans = mid;\n            high = mid - 1;\n        } else if count < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        i = i + j;\n        j = j + 1;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t = (i * (i + 1)) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri += i;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri = (i * (i + 1)) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    j",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    return j;",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    while high * (high + 1) / 2 < n {\n        high = high * 2;\n    }\n    while low <= high {\n        mid = low + (high - low) / 2;\n        let temp = mid * (mid + 1) / 2;\n        if temp < n {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i: isize = 1;\n    while i * (i + 1) / 2 < 10_isize.pow(n - 1) {\n        i += 1;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut low: isize = 1;\n    let mut high: isize = 1;\n    let mut mid: isize = 1;\n    let mut ans: isize = 1;\n    let mut tri_num: isize = 1;\n    while tri_num < n {\n        low = mid + 1;\n        high = low * 2;\n        mid = (low + high) / 2;\n        tri_num = mid * (mid + 1) / 2;\n    }\n    ans = mid;\n    ans",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    let mut count: isize = 1;\n    while count < n {\n        i = i + 1;\n        j = j + i;\n        count = count + 1;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    let mut count: isize = 1;\n    while count < n {\n        i = i + 1;\n        j = j + i;\n        count = count + 1;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        i += j;\n        j += 1;\n    }\n    j - 1",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    let mut count: isize = 1;\n    while count < n {\n        i = i + 1;\n        j = j + i;\n        count = count + 1;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut mid: isize;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2).to_string().len() as isize >= n {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    ans",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    while i.to_string().len() < n as usize {\n        i = i + 1;\n        j = j + i;\n    }\n    return j;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 0;\n    let mut tri = 0;\n    let mut i = 1;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    low = i - 1;\n    high = i;\n    while low < high {\n        mid = (low + high) / 2;\n        tri = (mid * (mid + 1)) / 2;\n        if tri < n {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut triangle = 0;\n    while triangle.to_string().len() < n as usize {\n        triangle += i;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut l = 0;\n    let mut r = n * n;\n    let mut ans = -1;\n    while l <= r {\n        let m = (l + r) / 2;\n        let x = triangular_number(m);\n        if x.to_string().len() as isize == n {\n            ans = m;\n            r = m - 1;\n        } else if x.to_string().len() as isize < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i: isize = 1;\n    let mut tri_num: isize = 1;\n    while tri_num.to_string().len() < n as usize {\n        i += 1;\n        tri_num = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 0;\n    while count < n {\n        j = j + 1;\n        i = i + j;\n        count = i.to_string().len() as isize;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri += i;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut index = 1;\n    while i <= n {\n        index += 1;\n        i = index * (index + 1) / 2;\n        i = i.to_string().len() as isize;\n    }\n    index - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t = i * (i + 1) / 2;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut triangle = 0;\n    while (triangle as f64).log10() + 1.0 < n as f64 {\n        triangle = triangle + i;\n        i = i + 1;\n    }\n    i - 1",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 1;\n    while count < n {\n        i = i + 1;\n        j = j + i;\n        count = j.to_string().len() as isize;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 1;\n    while count < n {\n        i += 1;\n        j += i;\n        count = j.to_string().len() as isize;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n        t = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t = i * (i + 1) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut triangle = 0;\n    while i.to_string().len() <= n as usize {\n        triangle += i;\n        i += 1;\n    }\n    triangle",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() <= n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri_num = 0;\n    while tri_num.to_string().len() < n as usize {\n        tri_num = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i: isize = 1;\n    let mut tri: isize = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut sum = 0;\n    while sum < n {\n        sum += i;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 0;\n    while count < n {\n        j = j + 1;\n        i = i + j;\n        count = i.to_string().len() as isize;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t = (i * (i + 1)) / 2;\n    }\n    i",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    while i.to_string().len() < n as usize {\n        i = i + 1;\n        j = j + i;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        i = i + 1;\n        j = j + i;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let mut x = m * (m + 1) / 2;\n        let mut digits = 0;\n        while x > 0 {\n            digits += 1;\n            x /= 10;\n        }\n        if digits == n {\n            ans = m;\n            r = m - 1;\n        } else if digits > n {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    j",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri += i;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri = i * (i + 1) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut i = 1;\n    while i * (i + 1) / 2 < 10.pow(n - 1) {\n        i += 1;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri += i;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = n * n + 1;\n    let mut ans = 0;\n    while low <= high {\n        let mid = (low + high) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        if temp.to_string().len() as isize == n {\n            ans = mid;\n            high = mid - 1;\n        } else if temp.to_string().len() as isize < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let mid = (l + r) / 2;\n        let mut temp = (mid * (mid + 1)) / 2;\n        let mut cnt = 0;\n        while temp > 0 {\n            temp /= 10;\n            cnt += 1;\n        }\n        if cnt == n {\n            ans = mid;\n            r = mid - 1;\n        } else if cnt < n {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return ans;",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut index = 1;\n    while high.to_string().len() < n as usize {\n        index += 1;\n        low = high;\n        high = index * (index + 1) / 2;\n    }\n    return index;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut low = 0;\n    let mut high = n;\n    let mut mid = 0;\n\n    while low <= high {\n        mid = (low + high) / 2;\n\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    return low;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n        t = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut low = 1;\n    let mut high = n * n + 1;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 < n * (n + 1) / 2 {\n            low = mid + 1;\n            ans = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut low = 1;\n    let mut high = n * n + 1;\n    let mut mid = 0;\n    let mut ans = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid * (mid + 1) / 2 >= n {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n        t = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 2",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 2",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < 10_isize.pow(n as u32 - 1) {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (j + 1) / 2;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        i = i + 1;\n        j = j + i;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 0;\n    while count < n {\n        j = j + 1;\n        let mut k = (j * (j + 1)) / 2;\n        let mut temp = k;\n        while temp > 0 {\n            temp = temp / 10;\n            count = count + 1;\n        }\n        i = i + 1;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 2",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let mut x = mid * (mid + 1) / 2;\n        let mut digits = 0;\n        while x > 0 {\n            x /= 10;\n            digits += 1;\n        }\n        if digits == n {\n            ans = mid;\n            high = mid - 1;\n        } else if digits > n {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t += i;\n    }\n    i",
    "    let mut low = 1;\n    let mut high = 1;\n    let mut mid = 1;\n    let mut ans = 1;\n    while high * (high + 1) / 2 < n {\n        low = mid + 1;\n        mid = (low + high) / 2;\n        high = mid * 2;\n    }\n    while low <= high {\n        mid = (low + high) / 2;\n        let curr = mid * (mid + 1) / 2;\n        if curr < n {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        i = i + j;\n        j = j + 1;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        i = i + j;\n        j = j + 1;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j = i * (i + 1) / 2;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut k = 1;\n    while k < n {\n        i = i + 1;\n        j = j + i;\n        k = j.to_string().len() as isize;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = (l + r) / 2;\n        let x = (m * (m + 1)) / 2;\n        if x.to_string().len() as isize == n {\n            ans = m;\n            r = m - 1;\n        } else if x.to_string().len() as isize < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut i: isize = 1;\n    let mut tri_num: isize = 1;\n    while tri_num.to_string().len() < n as usize {\n        i += 1;\n        tri_num = (i * (i + 1)) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t = i * (i + 1) / 2;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut t = 1;\n    while t.to_string().len() < n as usize {\n        i += 1;\n        t += i;\n    }\n    i",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = triangular_number(m);\n        if t.to_string().len() as isize >= n {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 1;\n    while tri.to_string().len() < n as usize {\n        i += 1;\n        tri += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 1;\n    let mut sum = 0;\n    while count < n {\n        sum = sum + i;\n        i = i + 1;\n        j = j + 1;\n        if sum.to_string().len() as isize == n {\n            count = count + 1;\n        }\n    }\n    return j;",
    "    let mut l = 1;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let t = (m * (m + 1)) / 2;\n        let d = digits(t);\n        if d == n {\n            ans = m;\n            r = m - 1;\n        } else if d < n {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut k = 1;\n    while k < n {\n        i = i + 1;\n        j = j + i;\n        k = j.to_string().len() as isize;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        i = i + 1;\n        j = j + i;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut tri_num = 0;\n    while tri_num < n {\n        tri_num = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    return i - 1;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri.to_string().len() < n as usize {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    while i * (i + 1) / 2 < 10.pow(n - 1) {\n        i += 1;\n    }\n    i",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        let x = (m * (m + 1)) / 2;\n        if x.to_string().len() as isize >= n {\n            ans = m;\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return ans;",
    "    let mut i = 1;\n    let mut tri = 0;\n    while tri < n {\n        tri = (i * (i + 1)) / 2;\n        i += 1;\n    }\n    i - 1",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    return i;",
    "    let mut i = 1;\n    let mut j = 1;\n    while (j as f64).log10() + 1.0 < n as f64 {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i: isize = 1;\n    let mut j: isize = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut count = 0;\n    while count < n {\n        j = j + 1;\n        i = i + j;\n        count = count + 1;\n    }\n    return i;",
    "    let mut l = 0;\n    let mut r = n * n + 1;\n    let mut ans = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        let mut x = (mid * (mid + 1)) / 2;\n        let mut digits = 0;\n        while x > 0 {\n            x /= 10;\n            digits += 1;\n        }\n        if digits == n {\n            ans = mid;\n            r = mid - 1;\n        } else if digits < n {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    ans",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    return j;",
    "    let mut i = 1;\n    let mut j = 1;\n    while j.to_string().len() < n as usize {\n        i += 1;\n        j += i;\n    }\n    i",
    "    let mut i = 1;\n    let mut j = 1;\n    while i.to_string().len() < n as usize {\n        j += 1;\n        i += j;\n    }\n    j",
    "    let mut low = 0;\n    let mut high = n * n;\n    let mut ans = 0;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        let mut temp = mid * (mid + 1) / 2;\n        let mut count = 0;\n        while temp > 0 {\n            temp /= 10;\n            count += 1;\n        }\n        if count == n {\n            ans = mid;\n            high = mid - 1;\n        } else if count < n {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    ans"
  ]
}