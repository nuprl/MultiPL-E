{
  "name": "mbpp_432_median_trapezium",
  "language": "rs",
  "prompt": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let area = (median * height as f64) / 2.0;\n    let median = (2.0 * area) / height as f64;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmpall38geh.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp_8791vmn.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = height as f64 * median;\n    let median_length = (2.0 * area) / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `70.0`,\n right: `20.0`', /tmp/tmpc8xxgh03.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmpd9lt1r7s.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (base1 + base2) as f64;\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.5`,\n right: `20.0`', /tmp/tmp749yvizv.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (2.0 * height) + median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `90.0`,\n right: `20.0`', /tmp/tmp2k_r32a3.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let side = (area * 2.0 / height as f64).sqrt();\n    side\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.47213595499958`,\n right: `20.0`', /tmp/tmpfmrv9tnc.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    let median = median.sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx45_5wxp.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = 2.0 * area / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let a = base1 as f64;\n    let b = base2 as f64;\n    let h = height as f64;\n    (a + b) / 2.0 * h.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `118.32159566199232`,\n right: `20.0`', /tmp/tmpp4tm4zjf.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = 2.0 * (median * height).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `52.91502622129181`,\n right: `20.0`', /tmp/tmpm12mx_bs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp_8791vmn.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp_8791vmn.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0 * height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp8yb_zca6.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let side = (area * 2.0 / height as f64).sqrt();\n    side\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.47213595499958`,\n right: `20.0`', /tmp/tmpfmrv9tnc.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64).abs();\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmpku326n_y.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let area = (median * height as f64) / 2.0;\n    let median_length = 2.0 * area / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmp24d8yfyq.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = height as f64 * median;\n    let median_length = 2.0 * area / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `70.0`,\n right: `20.0`', /tmp/tmp3vwfznji.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.sqrt());\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13.505128975109958`,\n right: `20.0`', /tmp/tmpgh3ilq_b.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.363636363636363`,\n right: `20.0`', /tmp/tmpavxz5hkb.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    (median * height as f64).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx0di9tce.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let side = (area * 2.0 / height as f64).sqrt();\n    side\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.47213595499958`,\n right: `20.0`', /tmp/tmpfmrv9tnc.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.sqrt());\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13.505128975109958`,\n right: `20.0`', /tmp/tmpgh3ilq_b.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = 2.0 * area / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    median * height as f64 / height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpb7c74b3k.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    median * height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp7znq3v5m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let median_squared = median * median;\n    let height_squared = (height as f64) * (height as f64);\n    let hypotenuse = (median_squared + height_squared).sqrt();\n    hypotenuse\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.311288741492746`,\n right: `20.0`', /tmp/tmpm1at7qof.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median1 = (base1 + base2) as f64 / 2.0;\n    let median2 = (median1 * height as f64).sqrt();\n    median2\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpzgf68sc3.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmpd9lt1r7s.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmpc8pwwgpl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.powi(2) + median.powi(2)).sqrt();\n    area / perimeter * 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `11.606450709424427`,\n right: `20.0`', /tmp/tmp7_qy2fmn.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmpd9lt1r7s.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    let median_length = 2.0 * (area / height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8.94427190999916`,\n right: `20.0`', /tmp/tmp6jch9dhz.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    let median = median * height;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmpsl7bm7bi.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (median + height);\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12.727272727272727`,\n right: `20.0`', /tmp/tmpodj519fo.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_squared = median * median;\n    let height_squared = height as f64 * height as f64;\n    (median_squared + height_squared).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.311288741492746`,\n right: `20.0`', /tmp/tmpn2p7ktfy.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = 2.0 * area / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmpzofugqyq.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.363636363636363`,\n right: `20.0`', /tmp/tmpavxz5hkb.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    let median = median.sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx45_5wxp.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    (median * height as f64).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx0di9tce.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmpc8pwwgpl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.powf(2.0) + (median - base1 as f64).powf(2.0)).sqrt();\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.322786671487743`,\n right: `20.0`', /tmp/tmpdsrf8bd8.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = (median * height) / 2.0;\n    let perimeter = base1 + base2 + (2 * height);\n    let median_length = (4.0 * area) / perimeter as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `{integer}` by `f64`\n --> /tmp/tmpgveppx7t.rs:6:40\n  |\n6 |     let perimeter = base1 + base2 + (2 * height);\n  |                                        ^ no implementation for `{integer} * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `{integer}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `350.0`,\n right: `20.0`', /tmp/tmp9zkk4rb5.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (median * height).sqrt() * 2.0;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `52.91502622129181`,\n right: `20.0`', /tmp/tmppzn9z_e0.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = (base1 + base2 + 2 * height) as f64;\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `{integer}` by `f64`\n --> /tmp/tmpu3ku6_jx.rs:6:40\n  |\n6 |     let perimeter = (base1 + base2 + 2 * height) as f64;\n  |                                        ^ no implementation for `{integer} * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `{integer}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64 / 2.0) * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpsjyhl94b.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmpd9lt1r7s.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let a = base1 as f64;\n    let b = base2 as f64;\n    let h = height as f64;\n    (a + b) * h / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp1btpaysf.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let length = (2.0 * area) / height as f64;\n    length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `35.0`,\n right: `20.0`', /tmp/tmpej1l8b0e.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpb7c74b3k.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (2.0 * median + height * height.sqrt()) / 2.0;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `123.53139620424328`,\n right: `20.0`', /tmp/tmpu1qk2o_z.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = height as f64 * median;\n    let median_length = 2.0 * area / median;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `70.0`,\n right: `20.0`', /tmp/tmp3vwfznji.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp_8791vmn.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = (median * height) / 2.0;\n    let median = (2.0 * area) / height;\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmpd9lt1r7s.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `18.708286933869708`,\n right: `20.0`', /tmp/tmph_jbdzhm.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let mut median = 0.0;\n    median = (base1 + base2) as f64 / 2.0;\n    median * height as f64 / height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.sqrt());\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13.505128975109958`,\n right: `20.0`', /tmp/tmpgh3ilq_b.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    let median = median / 2.0;\n    let median = median * height;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmp497b10le.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12.727272727272727`,\n right: `20.0`', /tmp/tmp49at2qbz.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    median * height as f64 / height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let median_length = (median * height).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpemxo_xcd.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let height = height as f64;\n    let area = (median * height) / 2.0;\n    let median_length = (2.0 * area) / height;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.sqrt() + median);\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7.62260196544098`,\n right: `20.0`', /tmp/tmpua14pskj.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    let median = median.sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpx45_5wxp.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = (median * height) / 2.0;\n    let perimeter = base1 + base2 + (2 * height);\n    let median_length = (4.0 * area) / perimeter as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `{integer}` by `f64`\n --> /tmp/tmpgveppx7t.rs:6:40\n  |\n6 |     let perimeter = base1 + base2 + (2 * height);\n  |                                        ^ no implementation for `{integer} * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `{integer}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64 * height as f64).sqrt();\n    median\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmp3qqdjsaj.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (base1 + base2) as f64;\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.5`,\n right: `20.0`', /tmp/tmp749yvizv.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    median * height / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmprnom9k59.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.363636363636363`,\n right: `20.0`', /tmp/tmpavxz5hkb.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmp0vc335wa.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    median * height as f64 / height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    (base1 + base2) as f64 * height as f64 / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmpr9bmw5ga.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = height as f64 * median;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (area / height as f64).sqrt();\n    perimeter / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `24.47213595499958`,\n right: `20.0`', /tmp/tmpv1_psauf.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    let median_length = 2.0 * (area / height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8.94427190999916`,\n right: `20.0`', /tmp/tmp6jch9dhz.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    median * height as f64\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmpe0rjtekv.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpb7c74b3k.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let median_length = (median * height as f64).sqrt();\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmphi9gcvbt.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = ((base1 + base2) as f64) / 2.0;\n    let area = (median * height as f64) / 2.0;\n    let median_length = (2.0 * area) / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmpd9lt1r7s.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    let length = 2.0 * area / perimeter;\n    length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12.727272727272727`,\n right: `20.0`', /tmp/tmppru_laby.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    ((base1 + base2) as f64 * height as f64).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `37.416573867739416`,\n right: `20.0`', /tmp/tmppgm51y2z.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.363636363636363`,\n right: `20.0`', /tmp/tmpavxz5hkb.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    let median = median / 2.0;\n    let median = median * height as f64;\n    median.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpu39y0dko.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmpb7c74b3k.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64;\n    median / 2.0\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * (height.powi(2) + median.powi(2)).sqrt();\n    area / perimeter\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5.803225354712214`,\n right: `20.0`', /tmp/tmp1f6h7v39.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = base1 as f64 + base2 as f64 + 2.0 * height;\n    let median_length = 2.0 * area / perimeter;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `12.727272727272727`,\n right: `20.0`', /tmp/tmp49at2qbz.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    (median * height).sqrt()\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `26.457513110645905`,\n right: `20.0`', /tmp/tmprdnqntbo.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let area = median * height as f64;\n    let median_length = 2.0 * area / height as f64;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `40.0`,\n right: `20.0`', /tmp/tmpnm3l3vd7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median = (base1 + base2) as f64 / 2.0;\n    let height = height as f64;\n    let area = median * height;\n    let perimeter = 2.0 * (base1 + base2) as f64;\n    let length = 2.0 * area / perimeter;\n    length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.5`,\n right: `20.0`', /tmp/tmp98r505ix.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    let median_length = (base1 + base2) as f64 * height as f64 / 2.0;\n    median_length\n}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `700.0`,\n right: `20.0`', /tmp/tmpfcw8fj24.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}