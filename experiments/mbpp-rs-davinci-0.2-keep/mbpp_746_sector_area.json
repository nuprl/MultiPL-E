{
  "name": "mbpp_746_sector_area",
  "language": "rs",
  "prompt": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)",
    "    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }",
    "    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)",
    "    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())",
    "    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)",
    "    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)",
    "    if a > 360 {\n        None\n    } else {\n        Some(0.5 * (r as f64) * (r as f64) * (a as f64) * std::f64::consts::PI / 180.0)\n    }",
    "    if a > 360 {\n        return None;\n    }\n    let angle = a as f64;\n    let radius = r as f64;\n    Some((angle / 360.0) * PI * radius * radius)",
    "    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)",
    "    if a > 360 {\n        return None;\n    }\n    let area = (r as f64).powi(2) * a as f64 / 360.0;\n    Some(area)",
    "    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)",
    "    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)",
    "    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)",
    "    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))",
    "    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)",
    "    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)",
    "    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)",
    "    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))",
    "    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)",
    "    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) / 360.0)\n    }"
  ]
}