{
  "name": "mbpp_17_square_perimeter",
  "language": "rs",
  "prompt": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!(\"Perimeter of a square with side length {}\", a)\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented: Perimeter of a square with side length 10', /tmp/tmp7ro0m_mo.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!(\"Return the perimeter of a square given its side length {}\", a)\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1666123281,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented: Return the perimeter of a square given its side length 10', /tmp/tmp629je1jv.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp9z551qy8.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    4 * a\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    a * 4\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpp2hhhfhn.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}