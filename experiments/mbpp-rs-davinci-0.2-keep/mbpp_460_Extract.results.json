{
  "name": "mbpp_460_Extract",
  "language": "rs",
  "prompt": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst.iter() {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for v in lst {\n        res.push(v[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for v in lst {\n        res.push(v[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for sublst in lst {\n        res.push(sublst[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in lst {\n        result.push(i[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in lst {\n        result.push(i[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sub in lst {\n        res.push(sub[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut ret = Vec::new();\n    for sublst in lst {\n        ret.push(sublst[0]);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in lst {\n        result.push(i[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut ret = Vec::new();\n    for sublst in lst {\n        ret.push(sublst[0]);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in lst {\n        result.push(i[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublst in lst {\n        res.push(sublst[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 0..lst.len() {\n        res.push(lst[i][0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut ret = Vec::new();\n    for i in lst {\n        ret.push(i[0]);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = vec![];\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        if sublist.len() > 0 {\n            result.push(sublist[0]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for sublist in lst {\n        result.push(sublist[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for sublist in lst {\n        res.push(sublist[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in lst {\n        res.push(x[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in lst {\n        result.push(i[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut res: Vec<isize> = vec![];\n    for i in lst {\n        res.push(i[0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n    lst.iter().map(|x| x[0]).collect()\n}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}