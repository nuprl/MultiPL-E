{
  "name": "mbpp_296_get_Inv_Count",
  "language": "rs",
  "prompt": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![];\n    let mut temp_arr = arr.clone();\n    let mut arr_len = arr.len();\n    while arr_len > 1 {\n        if arr_len % 2 == 0 {\n            for i in 0..arr_len / 2 {\n                if arr[i] > arr[i + arr_len / 2] {\n                    count += 1;\n                }\n            }\n            for i in 0..arr_len / 2 {\n                temp.push(arr[i]);\n            }\n            for i in arr_len / 2..arr_len {\n                temp.push(arr[i]);\n            }\n            arr = temp.clone();\n            temp = vec![];\n            arr_len = arr_len / 2;\n        } else {\n            for i in 0..arr_len / 2 {\n                if arr[i] > arr[i + arr_len / 2 + 1] {\n                    count += 1;\n                }\n            }\n            for i in 0..arr_len / 2 {\n                temp.push(arr[i]);\n            }\n            for i in arr_len / 2..arr_len {\n                temp.push(arr[i]);\n            }\n            arr = temp.clone();\n            temp = vec![];\n            arr_len = arr_len / 2 + 1;\n        }\n    }\n    while i < temp_arr.len() {\n        j = i + 1;\n        while j < temp_arr.len() {\n            if temp_arr[i] > temp_arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510575,
      "stdout": "",
      "stderr": "warning: value assigned to `j` is never read\n --> /tmp/tmpw586qudo.rs:5:13\n  |\n5 |     let mut j = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: variable does not need to be mutable\n --> /tmp/tmpw586qudo.rs:7:9\n  |\n7 |     let mut temp_arr = arr.clone();\n  |         ----^^^^^^^^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0384]: cannot assign to immutable argument `arr`\n  --> /tmp/tmpw586qudo.rs:22:13\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                  --- help: consider making this binding mutable: `mut arr`\n...\n22 |             arr = temp.clone();\n   |             ^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument `arr`\n  --> /tmp/tmpw586qudo.rs:37:13\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                  --- help: consider making this binding mutable: `mut arr`\n...\n37 |             arr = temp.clone();\n   |             ^^^ cannot assign to immutable argument\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let left = arr[0..mid].to_vec();\n        let right = arr[mid..n].to_vec();\n        count = get_Inv_Count(left) + get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k += 1;\n                i += 1;\n            } else {\n                temp[k] = right[j];\n                count += left.len() - i;\n                k += 1;\n                j += 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            k += 1;\n            i += 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            k += 1;\n            j += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyba09t56.rs:26:26\n   |\n26 |                 count += left.len() - i;\n   |                          ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpyba09t56.rs:26:23\n   |\n26 |                 count += left.len() - i;\n   |                       ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut arr_len = arr.len();\n    for i in 0..arr_len {\n        for j in i + 1..arr_len {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![];\n    let mut n = arr.len();\n    while i < n {\n        temp.push(arr[i]);\n        i += 1;\n    }\n    i = 0;\n    while i < n {\n        arr[i] = 0;\n        i += 1;\n    }\n    i = 0;\n    while i < n {\n        j = 0;\n        while j < n {\n            if arr[j] <= temp[i] {\n                j += 1;\n            } else {\n                count += 1;\n            }\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "warning: value assigned to `j` is never read\n --> /tmp/tmpivxd7l16.rs:5:13\n  |\n5 |     let mut j = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: variable does not need to be mutable\n --> /tmp/tmpivxd7l16.rs:7:9\n  |\n7 |     let mut n = arr.len();\n  |         ----^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmpivxd7l16.rs:14:9\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                  --- help: consider changing this to be mutable: `mut arr`\n...\n14 |         arr[i] = 0;\n   |         ^^^ cannot borrow as mutable\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left = 0;\n    let mut right = 0;\n    let mut size = arr.len();\n    if size > 1 {\n        mid = size / 2;\n        left = get_Inv_Count(arr[0..mid].to_vec());\n        right = get_Inv_Count(arr[mid..size].to_vec());\n        i = 0;\n        j = mid;\n        while i < mid && j < size {\n            if arr[i] <= arr[j] {\n                temp[left + right] = arr[i];\n                i += 1;\n            } else {\n                temp[left + right] = arr[j];\n                count += mid - i;\n                j += 1;\n            }\n            left + right += 1;\n        }\n        while i < mid {\n            temp[left + right] = arr[i];\n            i += 1;\n            left + right += 1;\n        }\n        while j < size {\n            temp[left + right] = arr[j];\n            j += 1;\n            left + right += 1;\n        }\n        for k in 0..size {\n            arr[k] = temp[k];\n        }\n    }\n    return count + left + right;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwo9iybos.rs:19:17\n   |\n19 |                 temp[left + right] = arr[i];\n   |                 ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwo9iybos.rs:22:17\n   |\n22 |                 temp[left + right] = arr[j];\n   |                 ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0067]: invalid left-hand side of assignment\n  --> /tmp/tmpwo9iybos.rs:26:26\n   |\n26 |             left + right += 1;\n   |             ------------ ^^\n   |             |\n   |             cannot assign to this expression\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwo9iybos.rs:29:13\n   |\n29 |             temp[left + right] = arr[i];\n   |             ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0067]: invalid left-hand side of assignment\n  --> /tmp/tmpwo9iybos.rs:31:26\n   |\n31 |             left + right += 1;\n   |             ------------ ^^\n   |             |\n   |             cannot assign to this expression\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwo9iybos.rs:34:13\n   |\n34 |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = Vec::new();\n    let mut n = arr.len();\n    let mut mid = n / 2;\n    if n > 1 {\n        let left = get_Inv_Count(arr[0..mid].to_vec());\n        let right = get_Inv_Count(arr[mid..n].to_vec());\n        count = left + right;\n        while i < mid && j < n - mid {\n            if arr[i] <= arr[mid + j] {\n                temp.push(arr[i]);\n                i += 1;\n            } else {\n                temp.push(arr[mid + j]);\n                count += mid - i;\n                j += 1;\n            }\n        }\n        while i < mid {\n            temp.push(arr[i]);\n            i += 1;\n        }\n        while j < n - mid {\n            temp.push(arr[mid + j]);\n            j += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpxz_i1rbf.rs:19:26\n   |\n19 |                 count += mid - i;\n   |                          ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpxz_i1rbf.rs:19:23\n   |\n19 |                 count += mid - i;\n   |                       ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![];\n    let mut temp_arr = vec![];\n    let mut arr_len = arr.len();\n    while arr_len > 0 {\n        if arr_len == 1 {\n            temp.push(arr[i]);\n            i += 1;\n            arr_len -= 1;\n        } else {\n            if arr[i] < arr[i + 1] {\n                temp.push(arr[i]);\n                i += 1;\n                arr_len -= 1;\n            } else {\n                temp.push(arr[i + 1]);\n                i += 1;\n                arr_len -= 1;\n                count += 1;\n            }\n        }\n    }\n    while temp.len() > 0 {\n        if temp.len() == 1 {\n            temp_arr.push(temp[j]);\n            j += 1;\n        } else {\n            if temp[j] < temp[j + 1] {\n                temp_arr.push(temp[j]);\n                j += 1;\n            } else {\n                temp_arr.push(temp[j + 1]);\n                j += 1;\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 5', /tmp/tmpnb9ojydp.rs:32:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left_end = 0;\n    let mut size = arr.len();\n    let mut right_start = 0;\n\n    while size > 1 {\n        left_end = 0;\n        while left_end < arr.len() {\n            mid = left_end + size / 2;\n            right_start = mid;\n            if mid > arr.len() {\n                mid = arr.len();\n            }\n            if right_start > arr.len() {\n                right_start = arr.len();\n            }\n            i = left_end;\n            j = mid;\n            k = left_end;\n            while i < mid && j < right_start {\n                if arr[i] <= arr[j] {\n                    temp[k] = arr[i];\n                    k += 1;\n                    i += 1;\n                } else {\n                    temp[k] = arr[j];\n                    inv_count += (mid - i) as isize;\n                    k += 1;\n                    j += 1;\n                }\n            }\n            while i < mid {\n                temp[k] = arr[i];\n                k += 1;\n                i += 1;\n            }\n            while j < right_start {\n                temp[k] = arr[j];\n                k += 1;\n                j += 1;\n            }\n            left_end = right_start;\n        }\n        size = size / 2;\n        arr = temp.clone();\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpkdzb48h4.rs:60:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut n = arr.len();\n    while n > 1 {\n        i = 0;\n        j = 0;\n        k = 0;\n        mid = n / 2;\n        while i < mid && j < n - mid {\n            if arr[i] <= arr[mid + j] {\n                temp[k] = arr[i];\n                i += 1;\n            } else {\n                temp[k] = arr[mid + j];\n                j += 1;\n                inv_count += mid - i;\n            }\n            k += 1;\n        }\n        while i < mid {\n            temp[k] = arr[i];\n            i += 1;\n            k += 1;\n        }\n        while j < n - mid {\n            temp[k] = arr[mid + j];\n            j += 1;\n            k += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n        n = mid;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbgbe7v9m.rs:23:30\n   |\n23 |                 inv_count += mid - i;\n   |                              ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpbgbe7v9m.rs:23:27\n   |\n23 |                 inv_count += mid - i;\n   |                           ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut temp: Vec<isize> = vec![0; arr.len()];\n    let mut mid: usize = 0;\n    let mut left_count: isize = 0;\n    let mut right_count: isize = 0;\n\n    if arr.len() > 1 {\n        mid = arr.len() / 2;\n        let mut left: Vec<isize> = arr[0..mid].to_vec();\n        let mut right: Vec<isize> = arr[mid..arr.len()].to_vec();\n\n        left_count = get_Inv_Count(left);\n        right_count = get_Inv_Count(right);\n\n        i = 0;\n        j = 0;\n        k = 0;\n\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k += 1;\n                i += 1;\n            } else {\n                temp[k] = right[j];\n                inv_count += left.len() as isize - i as isize;\n                k += 1;\n                j += 1;\n            }\n        }\n\n        while i < left.len() {\n            temp[k] = left[i];\n            k += 1;\n            i += 1;\n        }\n\n        while j < right.len() {\n            temp[k] = right[j];\n            k += 1;\n            j += 1;\n        }\n\n        for i in 0..arr.len() {\n            arr[i] = temp[i];\n        }\n    }\n\n    return inv_count + left_count + right_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "warning: value assigned to `i` is never read\n --> /tmp/tmpd_mcpn36.rs:4:13\n  |\n4 |     let mut i: usize = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `j` is never read\n --> /tmp/tmpd_mcpn36.rs:5:13\n  |\n5 |     let mut j: usize = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `k` is never read\n --> /tmp/tmpd_mcpn36.rs:6:13\n  |\n6 |     let mut k: usize = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `mid` is never read\n --> /tmp/tmpd_mcpn36.rs:8:13\n  |\n8 |     let mut mid: usize = 0;\n  |             ^^^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpd_mcpn36.rs:14:13\n   |\n14 |         let mut left: Vec<isize> = arr[0..mid].to_vec();\n   |             ----^^^^\n   |             |\n   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpd_mcpn36.rs:15:13\n   |\n15 |         let mut right: Vec<isize> = arr[mid..arr.len()].to_vec();\n   |             ----^^^^^\n   |             |\n   |             help: remove this `mut`\n\nerror[E0382]: borrow of moved value: `left`\n  --> /tmp/tmpd_mcpn36.rs:24:19\n   |\n14 |         let mut left: Vec<isize> = arr[0..mid].to_vec();\n   |             -------- move occurs because `left` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n17 |         left_count = get_Inv_Count(left);\n   |                                    ---- value moved here\n...\n24 |         while i < left.len() && j < right.len() {\n   |                   ^^^^^^^^^^ value borrowed here after move\n\nerror[E0382]: borrow of moved value: `right`\n  --> /tmp/tmpd_mcpn36.rs:24:37\n   |\n15 |         let mut right: Vec<isize> = arr[mid..arr.len()].to_vec();\n   |             --------- move occurs because `right` has type `Vec<i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while j < arr.len() {\n        if arr[i] > arr[j] {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `5`', /tmp/tmp8ewu4pnl.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr.clone();\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut temp: Vec<isize> = vec![0; arr.len()];\n    let mut mid: usize = 0;\n    let mut n: usize = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let mut left = arr[0..mid].to_vec();\n        let mut right = arr[mid..n].to_vec();\n        inv_count = get_Inv_Count(left.clone()) + get_Inv_Count(right.clone());\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k = k + 1;\n                i = i + 1;\n            } else {\n                temp[k] = right[j];\n                inv_count = inv_count + (left.len() - i) as isize;\n                k = k + 1;\n                j = j + 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            k = k + 1;\n            i = i + 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            k = k + 1;\n            j = j + 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `3`', /tmp/tmpdovwia6o.rs:52:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = arr.clone();\n    let n = arr.len();\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let n = arr.len();\n    while i < n {\n        j = 0;\n        k = i;\n        while j < n {\n            if k < n && arr[k] < arr[j] {\n                inv_count += 1;\n                k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `5`', /tmp/tmpm8ldqf0u.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    let mut mid = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let mut left = arr[0..mid].to_vec();\n        let mut right = arr[mid..n].to_vec();\n        inv_count = get_Inv_Count(left.to_vec()) + get_Inv_Count(right.to_vec());\n        i = 0;\n        j = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                arr[temp] = left[i];\n                i += 1;\n            } else {\n                arr[temp] = right[j];\n                inv_count += left.len() as isize - i as isize;\n                j += 1;\n            }\n            temp += 1;\n        }\n        while i < left.len() {\n            arr[temp] = left[i];\n            i += 1;\n            temp += 1;\n        }\n        while j < right.len() {\n            arr[temp] = right[j];\n            j += 1;\n            temp += 1;\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `3`', /tmp/tmp470tl0p2.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let n: usize = arr.len();\n    let mut temp: Vec<isize> = vec![0; n];\n\n    for i in 0..n {\n        temp[i] = arr[i];\n    }\n\n    merge_sort(arr, temp, 0, n - 1, &mut inv_count);\n\n    return inv_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `merge_sort` in this scope\n  --> /tmp/tmpawd8swx8.rs:14:5\n   |\n14 |     merge_sort(arr, temp, 0, n - 1, &mut inv_count);\n   |     ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr_copy = arr.clone();\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    let mut temp: Vec<isize> = vec![0; arr.len()];\n    count = merge_sort(arr, temp, 0, arr.len() - 1);\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `merge_sort` in this scope\n --> /tmp/tmpmgon4bl4.rs:5:13\n  |\n5 |     count = merge_sort(arr, temp, 0, arr.len() - 1);\n  |             ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left_count = 0;\n    let mut right_count = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let mut left = arr[0..mid].to_vec();\n        let mut right = arr[mid..n].to_vec();\n        left_count = get_Inv_Count(left);\n        right_count = get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k = k + 1;\n                i = i + 1;\n            } else {\n                temp[k] = right[j];\n                inv_count = inv_count + (left.len() - i) as isize;\n                k = k + 1;\n                j = j + 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            k = k + 1;\n            i = i + 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            k = k + 1;\n            j = j + 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    return inv_count + left_count + right_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "warning: value assigned to `i` is never read\n --> /tmp/tmpq8qxnjvy.rs:5:13\n  |\n5 |     let mut i = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `j` is never read\n --> /tmp/tmpq8qxnjvy.rs:6:13\n  |\n6 |     let mut j = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `k` is never read\n --> /tmp/tmpq8qxnjvy.rs:7:13\n  |\n7 |     let mut k = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `mid` is never read\n --> /tmp/tmpq8qxnjvy.rs:9:13\n  |\n9 |     let mut mid = 0;\n  |             ^^^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpq8qxnjvy.rs:12:9\n   |\n12 |     let mut n = arr.len();\n   |         ----^\n   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpq8qxnjvy.rs:15:13\n   |\n15 |         let mut left = arr[0..mid].to_vec();\n   |             ----^^^^\n   |             |\n   |             help: remove this `mut`\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpq8qxnjvy.rs:16:13\n   |\n16 |         let mut right = arr[mid..n].to_vec();\n   |             ----^^^^^\n   |             |\n   |             help: remove this `mut`\n\nerror[E0382]: borrow of moved value: `left`\n  --> /tmp/tmpq8qxnjvy.rs:22:19\n   |\n15 |         let mut left = arr[0..mid].to_vec();\n   |             -------- move occurs because `left` has type `Vec<isize>`, which does not implement the `Copy` trait\n16 |         let mut right = arr[mid..n].to_vec();\n17 |         left_count = get_Inv_Count(left);\n   |                                    ---- value moved here\n...\n22 |         while i < left.len() && j < right.len() {\n   |                   ^^^^^^^^^^ value borrowed here after move\n\nerror[E0382]: borrow of moved value: `right`\n  --> /tmp/tmpq8q",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let n: usize = arr.len();\n    let mut temp: Vec<isize> = vec![0; n];\n    for i in 0..n {\n        temp[i] = arr[i];\n    }\n    for i in 1..n {\n        j = i;\n        while j > 0 {\n            if temp[j - 1] > temp[j] {\n                let t = temp[j - 1];\n                temp[j - 1] = temp[j];\n                temp[j] = t;\n                count += 1;\n            }\n            j -= 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut left = vec![0; n];\n    let mut right = vec![0; n];\n\n    if n < 2 {\n        return count;\n    }\n\n    let mid = n / 2;\n\n    for i in 0..mid {\n        left[i] = arr[i];\n    }\n\n    for i in mid..n {\n        right[i - mid] = arr[i];\n    }\n\n    count += get_Inv_Count(left.to_vec());\n    count += get_Inv_Count(right.to_vec());\n\n    i = 0;\n    j = 0;\n    k = 0;\n\n    while i < left.len() && j < right.len() {\n        if left[i] <= right[j] {\n            arr[k] = left[i];\n            i += 1;\n        } else {\n            arr[k] = right[j];\n            count += left.len() - i;\n            j += 1;\n        }\n        k += 1;\n    }\n\n    while i < left.len() {\n        arr[k] = left[i];\n        i += 1;\n        k += 1;\n    }\n\n    while j < right.len() {\n        arr[k] = right[j];\n        j += 1;\n        k += 1;\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp0ec9xr_d.rs:38:22\n   |\n38 |             count += left.len() - i;\n   |                      ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmp0ec9xr_d.rs:38:19\n   |\n38 |             count += left.len() - i;\n   |                   ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut left = 0;\n    let mut right = 0;\n    let mut mid = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        left = get_Inv_Count(arr[0..mid].to_vec());\n        right = get_Inv_Count(arr[mid..n].to_vec());\n        i = 0;\n        j = mid;\n        k = 0;\n        while i < mid && j < n {\n            if arr[i] <= arr[j] {\n                temp[k] = arr[i];\n                i += 1;\n                k += 1;\n            } else {\n                temp[k] = arr[j];\n                count += mid - i;\n                j += 1;\n                k += 1;\n            }\n        }\n        while i < mid {\n            temp[k] = arr[i];\n            i += 1;\n            k += 1;\n        }\n        while j < n {\n            temp[k] = arr[j];\n            j += 1;\n            k += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n        count += left + right;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbhw70tca.rs:44:18\n   |\n44 |         count += left + right;\n   |                  ^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbhw70tca.rs:46:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n46 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n46 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpbhw70tca.rs:44:15\n   |\n44 |         count += left + right;\n   |               ^^ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    let mut temp_arr: Vec<isize> = vec![0; arr.len()];\n    count = merge_sort(arr, &mut temp_arr, 0, arr.len() - 1);\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `merge_sort` in this scope\n --> /tmp/tmp23wmxmw2.rs:5:13\n  |\n5 |     count = merge_sort(arr, &mut temp_arr, 0, arr.len() - 1);\n  |             ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![];\n    let mut temp_arr = arr.clone();\n    let mut arr_len = arr.len();\n    while arr_len > 1 {\n        let mut k = 0;\n        while k < arr_len {\n            if i < arr_len / 2 && j < arr_len {\n                if arr[i] < arr[j] {\n                    temp.push(arr[i]);\n                    i += 1;\n                } else {\n                    temp.push(arr[j]);\n                    j += 1;\n                    count += arr_len / 2 - i;\n                }\n            } else if i < arr_len / 2 {\n                temp.push(arr[i]);\n                i += 1;\n            } else {\n                temp.push(arr[j]);\n                j += 1;\n            }\n            k += 1;\n        }\n        arr_len = temp.len();\n        arr = temp.clone();\n        temp = vec![];\n        i = 0;\n        j = arr_len / 2;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpv_llvr1s.rs:36:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n36 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n36 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inversions = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inversions += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    inversions\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left_count = 0;\n    let mut right_count = 0;\n\n    if arr.len() > 1 {\n        mid = arr.len() / 2;\n        let left = arr[..mid].to_vec();\n        let right = arr[mid..].to_vec();\n\n        left_count = get_Inv_Count(left);\n        right_count = get_Inv_Count(right);\n\n        i = 0;\n        j = 0;\n        k = 0;\n\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k += 1;\n                i += 1;\n            } else {\n                temp[k] = right[j];\n                inv_count = inv_count + (left.len() - i);\n                k += 1;\n                j += 1;\n            }\n        }\n\n        while i < left.len() {\n            temp[k] = left[i];\n            k += 1;\n            i += 1;\n        }\n\n        while j < right.len() {\n            temp[k] = right[j];\n            k += 1;\n            j += 1;\n        }\n\n        for i in 0..arr.len() {\n            arr[i] = temp[i];\n        }\n    }\n\n    return inv_count + left_count + right_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpk2nfax41.rs:54:24\n   |\n54 |     return inv_count + left_count + right_count;\n   |                        ^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpk2nfax41.rs:54:22\n   |\n54 |     return inv_count + left_count + right_count;\n   |                      ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk2nfax41.rs:54:37\n   |\n54 |     return inv_count + left_count + right_count;\n   |                                     ^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk2nfax41.rs:54:12\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n54 |     return inv_count + left_count + right_count;\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n54 |     return (inv_count + left_count + right_count).try_into().unwrap();\n   |            +                                    +++++++++++++++++++++\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpk2nfax41.rs:54:35\n   |\n54 |     return inv_count + left_count + right_count;\n   |                                   ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut n = arr.len();\n    while n > 1 {\n        i = 0;\n        j = 0;\n        k = 0;\n        mid = n / 2;\n        while i < mid && j < n - mid {\n            if arr[i] <= arr[mid + j] {\n                temp[k] = arr[i];\n                i += 1;\n            } else {\n                temp[k] = arr[mid + j];\n                j += 1;\n                count += mid - i;\n            }\n            k += 1;\n        }\n        while i < mid {\n            temp[k] = arr[i];\n            i += 1;\n            k += 1;\n        }\n        while j < n - mid {\n            temp[k] = arr[mid + j];\n            j += 1;\n            k += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n        n = n / 2;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpmj8rbsyi.rs:42:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n42 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n42 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    let mut n = arr.len();\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left = 0;\n    let mut right = 0;\n    let mut size = arr.len();\n    if size > 1 {\n        mid = size / 2;\n        left = get_Inv_Count(arr[0..mid].to_vec());\n        right = get_Inv_Count(arr[mid..size].to_vec());\n        i = 0;\n        j = mid;\n        while i < mid && j < size {\n            if arr[i] <= arr[j] {\n                temp[left + right] = arr[i];\n                i += 1;\n            } else {\n                temp[left + right] = arr[j];\n                count += mid - i;\n                j += 1;\n            }\n            left + right += 1;\n        }\n        while i < mid {\n            temp[left + right] = arr[i];\n            i += 1;\n            left + right += 1;\n        }\n        while j < size {\n            temp[left + right] = arr[j];\n            j += 1;\n            left + right += 1;\n        }\n        for k in 0..size {\n            arr[k] = temp[k];\n        }\n    }\n    return count + left + right;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwo9iybos.rs:19:17\n   |\n19 |                 temp[left + right] = arr[i];\n   |                 ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwo9iybos.rs:22:17\n   |\n22 |                 temp[left + right] = arr[j];\n   |                 ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0067]: invalid left-hand side of assignment\n  --> /tmp/tmpwo9iybos.rs:26:26\n   |\n26 |             left + right += 1;\n   |             ------------ ^^\n   |             |\n   |             cannot assign to this expression\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwo9iybos.rs:29:13\n   |\n29 |             temp[left + right] = arr[i];\n   |             ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0067]: invalid left-hand side of assignment\n  --> /tmp/tmpwo9iybos.rs:31:26\n   |\n31 |             left + right += 1;\n   |             ------------ ^^\n   |             |\n   |             cannot assign to this expression\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwo9iybos.rs:34:13\n   |\n34 |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut arr_len = arr.len();\n    for i in 0..arr_len {\n        for j in i + 1..arr_len {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return inv_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inversion_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inversion_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inversion_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let mut left = arr[0..mid].to_vec();\n        let mut right = arr[mid..n].to_vec();\n        count = get_Inv_Count(left);\n        count += get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k += 1;\n                i += 1;\n            } else {\n                temp[k] = right[j];\n                count += left.len() - i;\n                k += 1;\n                j += 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            k += 1;\n            i += 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            k += 1;\n            j += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzeppylo7.rs:26:26\n   |\n26 |                 count += left.len() - i;\n   |                          ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpzeppylo7.rs:26:23\n   |\n26 |                 count += left.len() - i;\n   |                       ^^ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut temp: Vec<isize> = Vec::new();\n    let n: usize = arr.len();\n    for i in 0..n {\n        temp.push(arr[i]);\n    }\n    for i in 0..n {\n        for j in 0..n {\n            if arr[i] < arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `5`', /tmp/tmp1uvo9rf0.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let n = arr.len();\n    let mut temp = vec![0; n];\n    while i < n {\n        j = i + 1;\n        while j < n {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut temp: Vec<isize> = vec![0; arr.len()];\n\n    for i in 0..arr.len() {\n        temp[i] = arr[i];\n    }\n\n    for i in 0..arr.len() {\n        for j in 0..arr.len() {\n            if arr[i] < arr[j] {\n                count += 1;\n            }\n        }\n    }\n\n    for i in 0..arr.len() {\n        for j in 0..arr.len() {\n            if temp[i] < temp[j] {\n                let t = temp[i];\n                temp[i] = temp[j];\n                temp[j] = t;\n            }\n        }\n    }\n\n    println!(\"Sorted array is: \");\n    for i in 0..arr.len() {\n        print!(\"{} \", temp[i]);\n    }\n    println!(\"\");\n\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "Sorted array is: \n1 4 5 6 20 \n",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `5`', /tmp/tmpmwfq78zc.rs:42:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr;\n    let mut n = arr.len();\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inversions = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                inversions += 1;\n            }\n        }\n    }\n    inversions\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr_copy = arr.clone();\n    let mut arr_copy_2 = arr.clone();\n    let mut arr_copy_3 = arr.clone();\n    let mut arr_copy_4 = arr.clone();\n    let mut arr_copy_5 = arr.clone();\n    let mut arr_copy_6 = arr.clone();\n    let mut arr_copy_7 = arr.clone();\n    let mut arr_copy_8 = arr.clone();\n    let mut arr_copy_9 = arr.clone();\n    let mut arr_copy_10 = arr.clone();\n    let mut arr_copy_11 = arr.clone();\n    let mut arr_copy_12 = arr.clone();\n    let mut arr_copy_13 = arr.clone();\n    let mut arr_copy_14 = arr.clone();\n    let mut arr_copy_15 = arr.clone();\n    let mut arr_copy_16 = arr.clone();\n    let mut arr_copy_17 = arr.clone();\n    let mut arr_copy_18 = arr.clone();\n    let mut arr_copy_19 = arr.clone();\n    let mut arr_copy_20 = arr.clone();\n    let mut arr_copy_21 = arr.clone();\n    let mut arr_copy_22 = arr.clone();\n    let mut arr_copy_23 = arr.clone();\n    let mut arr_copy_24 = arr.clone();\n    let mut arr_copy_25 = arr.clone();\n    let mut arr_copy_26 = arr.clone();\n    let mut arr_copy_27 = arr.clone();\n    let mut arr_copy_28 = arr.clone();\n    let mut arr_copy_29 = arr.clone();\n    let mut arr_copy_30 = arr.clone();\n    let mut arr_copy_31 = arr.clone();\n    let mut arr_copy_32 = arr.clone();\n    let mut arr_copy_33 = arr.clone();\n    let mut arr_copy_34 = arr.clone();\n    let mut arr_copy_35 = arr.clone();\n    let mut arr_copy_36 = arr\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpatx_27ed.rs:39:30\n   |\n39 |     let mut arr_copy_36 = arr\n   |                              ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpatx_27ed.rs:2:38\n  |\n2 | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n  |    -------------                     ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![];\n    let mut arr_len = arr.len();\n    while arr_len > 1 {\n        if arr_len % 2 == 0 {\n            while i < arr_len {\n                if arr[i] > arr[i + 1] {\n                    temp.push(arr[i + 1]);\n                    temp.push(arr[i]);\n                    count += 1;\n                } else {\n                    temp.push(arr[i]);\n                    temp.push(arr[i + 1]);\n                }\n                i += 2;\n            }\n        } else {\n            while i < arr_len - 1 {\n                if arr[i] > arr[i + 1] {\n                    temp.push(arr[i + 1]);\n                    temp.push(arr[i]);\n                    count += 1;\n                } else {\n                    temp.push(arr[i]);\n                    temp.push(arr[i + 1]);\n                }\n                i += 2;\n            }\n            temp.push(arr[arr_len - 1]);\n        }\n        arr_len = temp.len();\n        arr = temp.clone();\n        temp = vec![];\n        i = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "warning: unused variable: `j`\n --> /tmp/tmp2hdeuwdy.rs:5:13\n  |\n5 |     let mut j = 0;\n  |             ^ help: if this is intentional, prefix it with an underscore: `_j`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\nwarning: variable does not need to be mutable\n --> /tmp/tmp2hdeuwdy.rs:5:9\n  |\n5 |     let mut j = 0;\n  |         ----^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0384]: cannot assign to immutable argument `arr`\n  --> /tmp/tmp2hdeuwdy.rs:36:9\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                  --- help: consider making this binding mutable: `mut arr`\n...\n36 |         arr = temp.clone();\n   |         ^^^ cannot assign to immutable argument\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut temp: Vec<isize> = vec![0; arr.len()];\n    let mut mid: usize = 0;\n    let mut left_count: isize = 0;\n    let mut right_count: isize = 0;\n\n    if arr.len() > 1 {\n        mid = arr.len() / 2;\n        let left = arr[0..mid].to_vec();\n        let right = arr[mid..arr.len()].to_vec();\n        left_count = get_Inv_Count(left);\n        right_count = get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k = k + 1;\n                i = i + 1;\n            } else {\n                temp[k] = right[j];\n                count = count + (left.len() - i) as isize;\n                k = k + 1;\n                j = j + 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            k = k + 1;\n            i = i + 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            k = k + 1;\n            j = j + 1;\n        }\n        for i in 0..arr.len() {\n            arr[i] = temp[i];\n        }\n    }\n    return count + left_count + right_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "warning: value assigned to `i` is never read\n --> /tmp/tmpwwzpyiss.rs:4:13\n  |\n4 |     let mut i: usize = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `j` is never read\n --> /tmp/tmpwwzpyiss.rs:5:13\n  |\n5 |     let mut j: usize = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `k` is never read\n --> /tmp/tmpwwzpyiss.rs:6:13\n  |\n6 |     let mut k: usize = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `mid` is never read\n --> /tmp/tmpwwzpyiss.rs:8:13\n  |\n8 |     let mut mid: usize = 0;\n  |             ^^^\n  |\n  = help: maybe it is overwritten before being read?\n\nerror[E0382]: borrow of moved value: `left`\n  --> /tmp/tmpwwzpyiss.rs:21:19\n   |\n14 |         let left = arr[0..mid].to_vec();\n   |             ---- move occurs because `left` has type `Vec<isize>`, which does not implement the `Copy` trait\n15 |         let right = arr[mid..arr.len()].to_vec();\n16 |         left_count = get_Inv_Count(left);\n   |                                    ---- value moved here\n...\n21 |         while i < left.len() && j < right.len() {\n   |                   ^^^^^^^^^^ value borrowed here after move\n\nerror[E0382]: borrow of moved value: `right`\n  --> /tmp/tmpwwzpyiss.rs:21:37\n   |\n15 |         let right = arr[mid..arr.len()].to_vec();\n   |             ----- move occurs because `right` has type `Vec<isize>`, which does not implement the `Copy` trait\n16 |         left_count = get_Inv_Count(left);\n17 |         right_count = get_Inv_Count(right);\n   |                                     ----- value moved here\n...\n21 |         while i < left.len() && j < right.len() {\n   |                                     ^^^^^^^^^^^ value borrowed here after move\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmpwwzpyiss.rs:44:13\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr.clone();\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr.clone();\n    arr.sort();\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmp4c_5uund.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count: isize = 0;\n    let mut arr_copy = arr.clone();\n    arr_copy.sort();\n    for i in 0..arr.len() {\n        if arr[i] != arr_copy[i] {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`', /tmp/tmp8qapt899.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count: isize = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in (i + 1)..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut inv_count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left_count = 0;\n    let mut right_count = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let left = arr[..mid].to_vec();\n        let right = arr[mid..].to_vec();\n        left_count = get_Inv_Count(left);\n        right_count = get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                k += 1;\n                i += 1;\n            } else {\n                temp[k] = right[j];\n                inv_count = inv_count + (left.len() - i);\n                k += 1;\n                j += 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            k += 1;\n            i += 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            k += 1;\n            j += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n    }\n    return inv_count + left_count + right_count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnll4g47j.rs:48:24\n   |\n48 |     return inv_count + left_count + right_count;\n   |                        ^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpnll4g47j.rs:48:22\n   |\n48 |     return inv_count + left_count + right_count;\n   |                      ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnll4g47j.rs:48:37\n   |\n48 |     return inv_count + left_count + right_count;\n   |                                     ^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnll4g47j.rs:48:12\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n48 |     return inv_count + left_count + right_count;\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n48 |     return (inv_count + left_count + right_count).try_into().unwrap();\n   |            +                                    +++++++++++++++++++++\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpnll4g47j.rs:48:35\n   |\n48 |     return inv_count + left_count + right_count;\n   |                                   ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() && j < arr.len() {\n        if arr[i] > arr[j] {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `5`', /tmp/tmp8e33_5b1.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut inv_count = 0;\n    let mut arr = arr;\n    let mut arr_len = arr.len();\n    for i in 0..arr_len {\n        for j in i + 1..arr_len {\n            if arr[i] > arr[j] {\n                inv_count += 1;\n            }\n        }\n    }\n    inv_count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = vec![];\n    let mut arr_len = arr.len();\n    while arr_len > 0 {\n        if i == arr.len() {\n            temp.push(arr[j]);\n            j += 1;\n        } else if j == arr.len() {\n            temp.push(arr[i]);\n            i += 1;\n        } else if arr[i] <= arr[j] {\n            temp.push(arr[i]);\n            i += 1;\n        } else {\n            temp.push(arr[j]);\n            count += arr.len() - i;\n            j += 1;\n        }\n        arr_len -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpe6uchqpv.rs:25:5\n   |\n2  | fn get_Inv_Count(arr: Vec<isize>) -> isize {\n   |                                      ----- expected `isize` because of return type\n...\n25 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n25 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 1;\n    while i < arr.len() {\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut temp = vec![0; arr.len()];\n    let mut mid = 0;\n    let mut left_count = 0;\n    let mut right_count = 0;\n    let mut n = arr.len();\n    if n > 1 {\n        mid = n / 2;\n        let mut left = arr[0..mid].to_vec();\n        let mut right = arr[mid..n].to_vec();\n        left_count = get_Inv_Count(left);\n        right_count = get_Inv_Count(right);\n        i = 0;\n        j = 0;\n        k = 0;\n        while i < left.len() && j < right.len() {\n            if left[i] <= right[j] {\n                temp[k] = left[i];\n                i += 1;\n                k += 1;\n            } else {\n                temp[k] = right[j];\n                count = count + (left.len() - i) as isize;\n                j += 1;\n                k += 1;\n            }\n        }\n        while i < left.len() {\n            temp[k] = left[i];\n            i += 1;\n            k += 1;\n        }\n        while j < right.len() {\n            temp[k] = right[j];\n            j += 1;\n            k += 1;\n        }\n        for i in 0..n {\n            arr[i] = temp[i];\n        }\n        count = count + left_count + right_count;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "warning: value assigned to `i` is never read\n --> /tmp/tmpvz6ecfnt.rs:4:13\n  |\n4 |     let mut i = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `j` is never read\n --> /tmp/tmpvz6ecfnt.rs:5:13\n  |\n5 |     let mut j = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `k` is never read\n --> /tmp/tmpvz6ecfnt.rs:6:13\n  |\n6 |     let mut k = 0;\n  |             ^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `mid` is never read\n --> /tmp/tmpvz6ecfnt.rs:8:13\n  |\n8 |     let mut mid = 0;\n  |             ^^^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `left_count` is never read\n --> /tmp/tmpvz6ecfnt.rs:9:13\n  |\n9 |     let mut left_count = 0;\n  |             ^^^^^^^^^^\n  |\n  = help: maybe it is overwritten before being read?\n\nwarning: value assigned to `right_count` is never read\n  --> /tmp/tmpvz6ecfnt.rs:10:13\n   |\n10 |     let mut right_count = 0;\n   |             ^^^^^^^^^^^\n   |\n   = help: maybe it is overwritten before being read?\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpvz6ecfnt.rs:11:9\n   |\n11 |     let mut n = arr.len();\n   |         ----^\n   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpvz6ecfnt.rs:14:13\n   |\n14 |         let mut left = arr[0..mid].to_vec();\n   |             ----^^^^\n   |             |\n   |             help: remove this `mut`\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpvz6ecfnt.rs:15:13\n   |\n15 |         let mut right = arr[mid..n].to_vec();\n   |             ----^^^^^\n   |             |\n   |             help: remove this `mut`\n\nerror[E0382]: borrow of moved value: `left`\n  --> /tmp/tmpvz6ecfnt.rs:21:19\n   |\n14 |         let mut left = arr[0..mid].to_vec();\n   |             -------- move occurs because",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1666124028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] > arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n",
      "timestamp": 1665510576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}