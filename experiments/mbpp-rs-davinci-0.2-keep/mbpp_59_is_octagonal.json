{
  "name": "mbpp_59_is_octagonal",
  "language": "rs",
  "prompt": "/// Write a function to find the nth octagonal number.\nfn is_octagonal(n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = is_octagonal;\n    assert_eq!(candidate(5), 65);\n    assert_eq!(candidate(10), 280);\n    assert_eq!(candidate(15), 645);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 2);\n    }\n    if i == n {\n        return j;\n    }\n    return 0;",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while j < n {\n        i += 1;\n        j = i * (3 * i - 2);\n    }\n    if j == n {\n        i\n    } else {\n        0\n    }",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        x as isize\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut c = 0;\n    while c < n {\n        i += 1;\n        c = i * (3 * i - 2);\n    }\n    c",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 2);\n        i += 1;\n    }\n    if result == n {\n        return i - 1;\n    } else {\n        return 0;\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.round() {\n        x as isize\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    nth",
    "    let n = n as f64;\n    let x = (n + 1.0 / 3.0).sqrt();\n    if x.fract() == 0.0 {\n        let x = x as isize;\n        if x * (3 * x - 2) == n {\n            return x;\n        }\n    }\n    0",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut nth_octagonal = 0;\n    while nth_octagonal < n {\n        i += 1;\n        nth_octagonal = i * (3 * i - 2);\n    }\n    if nth_octagonal == n {\n        nth_octagonal\n    } else {\n        0\n    }",
    "    let n = n as f64;\n    let x = (n + 1.0 / 3.0).sqrt();\n    if x.fract() == 0.0 {\n        let x = x as isize;\n        let y = (x * x * 3 - 1) / 2;\n        if y == n {\n            return x;\n        }\n    }\n    0",
    "    let n = n as f64;\n    let x = (n + 1.0 / 3.0).sqrt();\n    if x == x.floor() {\n        (x * 3.0 - 1.0) / 2.0\n    } else {\n        0.0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 1;\n    while octagonal < n {\n        i += 1;\n        octagonal = i * (3 * i - 2);\n    }\n    if octagonal == n {\n        octagonal\n    } else {\n        0\n    }",
    "    let n = n as f64;\n    let x = (n + (1.0 / 3.0)).sqrt();\n    if x.fract() == 0.0 {\n        let x = x as isize;\n        if x * (3 * x - 2) == n {\n            return n;\n        }\n    }\n    0",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let d = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if d == d.floor() {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut count = 1;\n    while count < n {\n        i += 1;\n        count = i * (3 * i - 2);\n    }\n    count",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 0;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        x as isize\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let n = n as f64;\n    let x = (n + 1.0 / 3.0).sqrt();\n    if x.fract() == 0.0 {\n        let x = x as isize;\n        if x * (3 * x - 2) == n {\n            return x;\n        }\n    }\n    0",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut res = 0;\n    while res < n {\n        res = i * (3 * i - 2);\n        i += 1;\n    }\n    if res == n {\n        return i - 1;\n    }\n    return 0;",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 2);\n    }\n    if i == n {\n        j\n    } else {\n        -1\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        i = j * (3 * j - 2);\n        j += 1;\n    }\n    if i == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut j = 1;\n    while i < n {\n        i += j;\n        j += 3;\n    }\n    if i == n {\n        return n;\n    }\n    0",
    "    let n = n as f64;\n    let x = (n + 1.0 / 3.0).sqrt();\n    let y = (n + 1.0 / 2.0).sqrt();\n    if x == x.floor() && y == y.floor() {\n        n as isize\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        }\n        if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        x as isize\n    } else {\n        0\n    }",
    "    let n = n as f64;\n    let a = (2.0 + 2.0 * (2.0 + 2.0 * n).sqrt()).sqrt();\n    if a == a.round() {\n        (a - 1.0) / 2.0\n    } else {\n        0.0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let n = n as f64;\n    let x = (n + 1.0 / 3.0).sqrt();\n    if x.fract() == 0.0 {\n        let x = x as isize;\n        if x % 2 == 1 {\n            return x * (3 * x - 2);\n        }\n    }\n    0",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 1;\n    let mut nth = 0;\n    while nth < n {\n        nth = i * (3 * i - 2);\n        i += 1;\n    }\n    nth",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        return i;\n    }\n    0",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        x as isize\n    } else {\n        0\n    }",
    "    let n = (n as f64).sqrt();\n    let n = n.floor();\n    let n = n as isize;\n    if n * (3 * n - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        -1\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 2);\n        i += 1;\n    }\n    if result == n {\n        return i - 1;\n    }\n    return 0;",
    "    let mut i = 0;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        }\n        if oct > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let n = n as f64;\n    let x = (n + 1.0) / 2.0;\n    let x = x.sqrt();\n    let x = x.floor();\n    if x == (x as isize) as f64 {\n        let x = x as isize;\n        return (x * (3 * x - 2));\n    }\n    return 0;",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x.fract() == 0.0 {\n        x as isize\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    let mut octagonal = 1;\n    while octagonal < n {\n        i += 1;\n        octagonal = i * (3 * i - 2);\n    }\n    if octagonal == n {\n        octagonal\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    if octagonal == n {\n        octagonal\n    } else {\n        0\n    }",
    "    let n = (n as f64).sqrt();\n    if n == n.floor() {\n        let n = n as isize;\n        if (n * (3 * n - 2)).is_positive() {\n            return n * (3 * n - 2);\n        }\n    }\n    0",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let n = (n as f64).sqrt();\n    if n.fract() == 0.0 {\n        let n = n as isize;\n        if n % 2 == 0 {\n            n * n / 2\n        } else {\n            n * (n + 1) / 2\n        }\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut octagonal = 1;\n    while octagonal < n {\n        i += 1;\n        octagonal = i * (3 * i - 2);\n    }\n    if octagonal == n {\n        octagonal\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    -1",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut oct = 0;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        return i;\n    }\n    return 0;",
    "    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        i += 1;\n        n -= i * 3 - 2;\n    }\n    if n == 0 {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 0;\n    while nth < n {\n        nth = i * (3 * i - 2);\n        i += 1;\n    }\n    nth",
    "    let mut i = 0;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        }\n        if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 0;\n    while nth < n {\n        nth = i * (3 * i - 2);\n        i += 1;\n    }\n    nth",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        }\n        if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 2);\n        i += 1;\n    }\n    if result == n {\n        return i - 1;\n    }\n    return 0;",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let a = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if a == a.floor() {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        i = 3 * j * j - j + 1;\n        j += 1;\n    }\n    if i == n {\n        return n;\n    }\n    0",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let n = (n as f64).sqrt();\n    if n.fract() == 0.0 {\n        let n = n as isize;\n        if (n * (3 * n - 2)) % 2 == 0 {\n            return (n * (3 * n - 2)) / 2;\n        }\n    }\n    0",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 0;\n    let mut nth = 0;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    nth",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        i = j * (3 * j - 2);\n        j += 1;\n    }\n    if i == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        -1\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 0;\n    let mut nth = 0;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    nth",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    -1",
    "    let n = n as f64;\n    let n = (n * (3.0_f64.sqrt() - 1.0) / 2.0).round() as isize;\n    if n * (3 * n - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    let mut k = 1;\n    while k <= n {\n        i += 1;\n        j += 3 * i - 2;\n        k += 1;\n    }\n    j",
    "    let n = n as f64;\n    let x = (n + 1.0 / 3.0).sqrt();\n    if x.fract() == 0.0 {\n        let x = x as isize;\n        if x % 2 == 1 {\n            return x * x * 2 - 1;\n        }\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        i += 1;\n        num = i * (3 * i - 2);\n    }\n    num",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        x as isize\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth_octagonal = 1;\n    while nth_octagonal < n {\n        i += 1;\n        nth_octagonal = i * (3 * i - 2);\n    }\n    if nth_octagonal == n {\n        nth_octagonal\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 0;\n    let mut result = 0;\n    while result < n {\n        i += 1;\n        result = i * (3 * i - 2);\n    }\n    if result == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    if octagonal == n {\n        octagonal\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    loop {\n        let oct = (i * (3 * i - 2)) as isize;\n        if oct == n {\n            return i;\n        }\n        if oct > n {\n            return -1;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = (i * (3 * i - 2));\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 2);\n        i += 1;\n    }\n    result",
    "    let mut i = 1;\n    let mut j = 1;\n    while j < n {\n        i += 1;\n        j = i * (3 * i - 2);\n    }\n    if j == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        }\n        if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut num = 1;\n    while i < n {\n        num += 3 * i + 2;\n        i += 1;\n    }\n    num",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 2);\n        i += 1;\n    }\n    if result == n {\n        return i - 1;\n    } else {\n        return 0;\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    oct",
    "    let n = n as f64;\n    let n = (n + 1.0) / 2.0;\n    let n = n.sqrt();\n    let n = n.floor();\n    let n = 2.0 * n - 1.0;\n    let n = n * n;\n    n as isize",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n\n    0",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 2);\n        i += 1;\n    }\n    if result == n {\n        return i - 1;\n    }\n    return 0;",
    "    let n = n as f64;\n    let x = (n + 1.0) / 2.0;\n    let x = x.sqrt();\n    let x = x.floor();\n    let x = x - 1.0;\n    let x = x * (3.0 * x - 2.0);\n    let x = x.floor();\n    x as isize",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let n = n as f64;\n    let x = (n + (1.0 / 3.0) * (9.0 + 3.0 * (n * n).sqrt())).cbrt();\n    if x.fract() == 0.0 {\n        x as isize\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        i = j * (3 * j - 2);\n        j += 1;\n    }\n    if i == n {\n        return 1;\n    }\n    0",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        } else if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        nth = i * (3 * i - 2);\n        i += 1;\n    }\n    nth",
    "    let n = n as f64;\n    let x = (1.0 + (1.0 + 24.0 * n).sqrt()) / 6.0;\n    if x.fract() == 0.0 {\n        x as isize\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut oct = 0;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    oct",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        return i;\n    }\n    return 0;",
    "    let mut x = 1;\n    let mut i = 1;\n    while x < n {\n        x = i * (3 * i - 2);\n        i += 1;\n    }\n    if x == n {\n        return 1;\n    }\n    0",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth = 1;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    if nth == n {\n        nth\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 1;\n    loop {\n        let oct = i * (3 * i - 2);\n        if oct == n {\n            return i;\n        }\n        if oct > n {\n            return 0;\n        }\n        i += 1;\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        i = j * (3 * j - 2);\n        j += 1;\n    }\n    if i == n {\n        return n;\n    }\n    0",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    if octagonal == n {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut octagonal = 0;\n    while octagonal < n {\n        octagonal = i * (3 * i - 2);\n        i += 1;\n    }\n    octagonal",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        i = 3 * j * j - j + 1;\n        j += 1;\n    }\n    if i == n {\n        return i;\n    }\n    return 0;",
    "    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 2);\n    }\n    if i == n {\n        return j;\n    }\n    0",
    "    let mut i = 1;\n    let mut oct = 0;\n    while oct < n {\n        oct = i * (3 * i - 2);\n        i += 1;\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut nth_octagonal = 1;\n    while nth_octagonal < n {\n        i += 1;\n        nth_octagonal = i * (3 * i - 2);\n    }\n    if nth_octagonal == n {\n        nth_octagonal\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut oct = 1;\n    while oct < n {\n        i += 1;\n        oct = i * (3 * i - 2);\n    }\n    if oct == n {\n        oct\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut octagonal = 0;\n    while octagonal < n {\n        i += 1;\n        octagonal = i * (3 * i - 2);\n    }\n    octagonal",
    "    let mut i = 0;\n    let mut nth = 0;\n    while nth < n {\n        i += 1;\n        nth = i * (3 * i - 2);\n    }\n    nth",
    "    let n = n as f64;\n    let a = (1.0 + (1.0 + 24.0 * n).sqrt()) / 6.0;\n    if a == a.round() {\n        a as isize\n    } else {\n        0\n    }",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        j += 1;\n        i = j * (3 * j - 2);\n    }\n    if i == n {\n        return j;\n    }\n    return 0;",
    "    let x = (1.0 + (1.0 + 24.0 * n as f64).sqrt()) / 6.0;\n    if x == x.floor() {\n        n\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        return i;\n    }\n    0",
    "    let mut i = 1;\n    while i * (3 * i - 2) < n {\n        i += 1;\n    }\n    if i * (3 * i - 2) == n {\n        i\n    } else {\n        0\n    }",
    "    let mut i = 1;\n    let mut result = 0;\n    while result < n {\n        result = i * (3 * i - 2);\n        i += 1;\n    }\n    if result == n {\n        return i - 1;\n    }\n    0"
  ]
}