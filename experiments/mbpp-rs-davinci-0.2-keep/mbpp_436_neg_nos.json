{
  "name": "mbpp_436_neg_nos",
  "language": "rs",
  "prompt": "/// Write a python function to return the negative numbers in a list.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    list1.into_iter().filter(|x| *x < 0).collect()",
    "    list1.into_iter().filter(|&x| x < 0).collect()",
    "    list1.into_iter().filter(|x| *x < 0).collect()",
    "    list1.into_iter().filter(|&x| x < 0).collect()",
    "    list1.iter().filter(|&x| *x < 0).map(|&x| x).collect()",
    "    let mut neg_nos = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_nos.push(i);\n        }\n    }\n    neg_nos",
    "    list1.into_iter().filter(|x| *x < 0).collect()",
    "    let mut neg_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list",
    "    list1.into_iter().filter(|x| *x < 0).collect()",
    "    list1.into_iter().filter(|&x| x < 0).collect()",
    "    list1.into_iter().filter(|x| x < &0).collect()",
    "    list1.into_iter().filter(|x| *x < 0).collect()",
    "    list1.into_iter().filter(|x| *x < 0).collect()",
    "    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list",
    "    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list",
    "    let mut neg_list = Vec::new();\n    for i in list1 {\n        if i < 0 {\n            neg_list.push(i);\n        }\n    }\n    neg_list",
    "    list1.into_iter().filter(|x| *x < 0).collect()",
    "    list1.into_iter().filter(|&x| x < 0).collect()",
    "    list1.into_iter().filter(|x| *x < 0).collect()",
    "    list1.into_iter().filter(|&x| x < 0).collect()"
  ]
}