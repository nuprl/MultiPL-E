{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "rs",
  "prompt": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpjjnvfmkp.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 1;\n    while n > 0 {\n        if n % 2 == 0 {\n            n = n / 2;\n            i = i + 1;\n        } else {\n            n = n - 1;\n        }\n    }\n    return i == n;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpxvq2l_3a.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                result = true;\n            } else {\n                result = false;\n            }\n            break;\n        }\n        n = n >> 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpsdrj04gb.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    while n > 0 {\n        if n & 1 == 1 {\n            result = true;\n            break;\n        }\n        n >>= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp6zq2nhyb.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & 1 == 1 {\n            num -= 1;\n        } else {\n            num /= 2;\n        }\n    }\n    return num == 0;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp_qkn0qyf.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    while n > 0 {\n        if n & 1 == 1 {\n            if result {\n                return false;\n            }\n            result = true;\n        }\n        n >>= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp9yd1yjwu.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n != 1 {\n                return false;\n            }\n            n = n - 2_i64.pow(i);\n        }\n        i += 1;\n        n = n >> 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpldod5r5c.rs:10:21\n   |\n10 |             n = n - 2_i64.pow(i);\n   |                     ^^^^^^^^^^^^ expected `isize`, found `i64`\n\nerror[E0277]: cannot subtract `i64` from `isize`\n  --> /tmp/tmpldod5r5c.rs:10:19\n   |\n10 |             n = n - 2_i64.pow(i);\n   |                   ^ no implementation for `isize - i64`\n   |\n   = help: the trait `Sub<i64>` is not implemented for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        let rem = num % 2;\n        num /= 2;\n        sum += rem;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpbnu0r82b.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        n = n - 2i32.pow(i);\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpnhm1zbi7.rs:6:17\n  |\n6 |         n = n - 2i32.pow(i);\n  |                 ^^^^^^^^^^^ expected `isize`, found `i32`\n\nerror[E0277]: cannot subtract `i32` from `isize`\n --> /tmp/tmpnhm1zbi7.rs:6:15\n  |\n6 |         n = n - 2i32.pow(i);\n  |               ^ no implementation for `isize - i32`\n  |\n  = help: the trait `Sub<i32>` is not implemented for `isize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & (n - 1) != 0 {\n                return false;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509683,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp8ul4wmi3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += 2_isize.pow((n % 2) as u32);\n        n /= 2;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqp8u7bxr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        let rem = num % 2;\n        if rem == 1 {\n            sum += 1;\n        }\n        num /= 2;\n    }\n    if sum == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_p10j0as.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        n = n & (n - 1);\n        count += 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpcslu3ir1.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 2i64.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp6nnljujp.rs:7:18\n  |\n7 |             n -= 2i64.pow(i);\n  |                  ^^^^^^^^^^^ expected `isize`, found `i64`\n\nerror[E0277]: cannot subtract-assign `i64` from `isize`\n --> /tmp/tmp6nnljujp.rs:7:15\n  |\n7 |             n -= 2i64.pow(i);\n  |               ^^ no implementation for `isize -= i64`\n  |\n  = help: the trait `SubAssign<i64>` is not implemented for `isize`\n  = help: the following other types implement trait `SubAssign<Rhs>`:\n            <f32 as SubAssign<&f32>>\n            <f32 as SubAssign>\n            <f64 as SubAssign<&f64>>\n            <f64 as SubAssign>\n            <i128 as SubAssign<&i128>>\n            <i128 as SubAssign>\n            <i16 as SubAssign<&i16>>\n            <i16 as SubAssign>\n          and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 1 {\n        if n % 2 != 0 {\n            return false;\n        }\n        n /= 2;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp0a_0x4ua.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 2_i64.pow(i);\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfnm11p4v.rs:10:18\n   |\n10 |             n -= 2_i64.pow(i);\n   |                  ^^^^^^^^^^^^ expected `isize`, found `i64`\n\nerror[E0277]: cannot subtract-assign `i64` from `isize`\n  --> /tmp/tmpfnm11p4v.rs:10:15\n   |\n10 |             n -= 2_i64.pow(i);\n   |               ^^ no implementation for `isize -= i64`\n   |\n   = help: the trait `SubAssign<i64>` is not implemented for `isize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptdeh_a36.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num == 1 {\n            return true;\n        }\n        num = num - (num & -num);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmprtuw4_gj.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut p = 1;\n    let mut sum = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            sum += p;\n        }\n        p *= 2;\n        n /= 2;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmph8lbtsr3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmppzgbzymb.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut p = 1;\n    let mut result = false;\n    while n > 0 {\n        if n & 1 == 1 {\n            result = true;\n            break;\n        }\n        n = n >> 1;\n        p = p << 1;\n    }\n    if result {\n        n = n - p;\n        p = p >> 1;\n        while n > 0 {\n            if n & 1 == 1 {\n                result = false;\n                break;\n            }\n            n = n >> 1;\n            p = p >> 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqyx4644c.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            sum += 1;\n        }\n        n /= 2;\n    }\n    return sum == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmps71skvcv.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        sum += rem;\n        n /= 2;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpmtchdjxq.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut p = 1;\n    let mut result = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            result += p;\n        }\n        n /= 2;\n        p *= 2;\n    }\n    result == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptr16m3x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpd7wo3dgj.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                result = true;\n            } else {\n                result = false;\n            }\n            break;\n        }\n        n = n >> 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpsdrj04gb.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut flag = false;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if flag == true {\n                return false;\n            }\n            flag = true;\n            n = n - (1 << i);\n        }\n        i += 1;\n        n = n >> 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp3zw5bk4v.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= num & (-num);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpcn_693fm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n            count += 1;\n        }\n        n /= 2;\n    }\n    return count > 0;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    let mut sum = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            sum += 2_isize.pow(i);\n        }\n        n >>= 1;\n        i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmppwbckxi8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= num & (-num);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpcn_693fm.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    while n > 0 {\n        if n & 1 == 1 {\n            if result {\n                return false;\n            }\n            result = true;\n        }\n        n >>= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp9yd1yjwu.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        let rem = num % 2;\n        if rem == 1 {\n            sum += 1;\n        }\n        num /= 2;\n    }\n    if sum == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_p10j0as.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    let mut sum = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            sum = sum + 2_isize.pow(i);\n        }\n        n = n >> 1;\n        i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp94k2vsre.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    let mut sum = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            sum += 2_f64.powi(i);\n        }\n        i += 1;\n        n /= 2;\n    }\n    sum == n as f64\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmp4q52969g.rs:8:17\n  |\n8 |             sum += 2_f64.powi(i);\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n            <i16 as AddAssign>\n          and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4q52969g.rs:13:12\n   |\n13 |     sum == n as f64\n   |            ^^^^^^^^ expected integer, found `f64`\n\nerror[E0277]: can't compare `{integer}` with `f64`\n  --> /tmp/tmp4q52969g.rs:13:9\n   |\n13 |     sum == n as f64\n   |         ^^ no implementation for `{integer} == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented for `{integer}`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpjjnvfmkp.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n            n /= 2;\n            i += 1;\n        } else {\n            n -= 1;\n            i += 1;\n        }\n    }\n    return i % 2 == 0;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp6zebs601.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let x = n & (-n);\n        sum += x;\n        n -= x;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpc1gxap11.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        let mut i = 1;\n        while i <= num {\n            i *= 2;\n        }\n        i /= 2;\n        num -= i;\n        sum += i;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpn92gmhtt.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n == 1 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp7804cnvi.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 1;\n    let mut sum = 0;\n    while n != 0 {\n        if n & 1 == 1 {\n            sum += i;\n        }\n        i *= 2;\n        n >>= 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp3xuqbt91.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2_isize.pow(i);\n            if n < 0 {\n                return false;\n            }\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4u0wf8zn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4u0wf8zn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2_i64.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpegj6wnvn.rs:7:18\n  |\n7 |             n -= 2_i64.pow(i);\n  |                  ^^^^^^^^^^^^ expected `isize`, found `i64`\n\nerror[E0277]: cannot subtract-assign `i64` from `isize`\n --> /tmp/tmpegj6wnvn.rs:7:15\n  |\n7 |             n -= 2_i64.pow(i);\n  |               ^^ no implementation for `isize -= i64`\n  |\n  = help: the trait `SubAssign<i64>` is not implemented for `isize`\n  = help: the following other types implement trait `SubAssign<Rhs>`:\n            <f32 as SubAssign<&f32>>\n            <f32 as SubAssign>\n            <f64 as SubAssign<&f64>>\n            <f64 as SubAssign>\n            <i128 as SubAssign<&i128>>\n            <i128 as SubAssign>\n            <i16 as SubAssign<&i16>>\n            <i16 as SubAssign>\n          and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 2_isize.pow(i);\n            i = 0;\n        } else {\n            i += 1;\n        }\n        n >>= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpr8azbm9x.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & !1 != 0 {\n                return false;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    let mut sum = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            sum += 2_isize.pow(i as u32);\n        }\n        n >>= 1;\n        i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqe26i4k4.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let x = n & (-n);\n        sum += x;\n        n -= x;\n    }\n    return sum == n;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpcjyf95q1.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp8ul4wmi3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4u0wf8zn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        if rem == 1 {\n            sum += 1;\n        }\n        n /= 2;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpid2lfdku.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    while n > 0 {\n        if n % 2 == 0 {\n            n /= 2;\n            result = true;\n        } else {\n            result = false;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp45y26slp.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & (n - 1) != 0 {\n                return false;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509683,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpkfrcq1me.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4u0wf8zn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        if rem == 1 {\n            sum += 1;\n        }\n        n = n / 2;\n    }\n    if sum == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpeivlr_8_.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        let rem = num % 2;\n        num = num / 2;\n        sum += rem;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp1nxej2t4.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & !(1 << i) != 0 {\n                return false;\n            }\n        }\n        n >>= 1;\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp39nupthb.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        n = n - 2i64.pow(i);\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp_6nlfvwd.rs:6:17\n  |\n6 |         n = n - 2i64.pow(i);\n  |                 ^^^^^^^^^^^ expected `isize`, found `i64`\n\nerror[E0277]: cannot subtract `i64` from `isize`\n --> /tmp/tmp_6nlfvwd.rs:6:15\n  |\n6 |         n = n - 2i64.pow(i);\n  |               ^ no implementation for `isize - i64`\n  |\n  = help: the trait `Sub<i64>` is not implemented for `isize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut p = 1;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= p;\n        }\n        p <<= 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n            count += 1;\n            n = n / 2;\n        } else {\n            n = n - 1;\n        }\n    }\n    if count > 0 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpgwnjc__e.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n != 0 {\n        n = n & (n - 1);\n        count += 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpmc9s9uuo.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 2_i64.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpfituhein.rs:7:18\n  |\n7 |             n -= 2_i64.pow(i);\n  |                  ^^^^^^^^^^^^ expected `isize`, found `i64`\n\nerror[E0277]: cannot subtract-assign `i64` from `isize`\n --> /tmp/tmpfituhein.rs:7:15\n  |\n7 |             n -= 2_i64.pow(i);\n  |               ^^ no implementation for `isize -= i64`\n  |\n  = help: the trait `SubAssign<i64>` is not implemented for `isize`\n  = help: the following other types implement trait `SubAssign<Rhs>`:\n            <f32 as SubAssign<&f32>>\n            <f32 as SubAssign>\n            <f64 as SubAssign<&f64>>\n            <f64 as SubAssign>\n            <i128 as SubAssign<&i128>>\n            <i128 as SubAssign>\n            <i16 as SubAssign<&i16>>\n            <i16 as SubAssign>\n          and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            result = true;\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut p = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= p;\n            if n < 0 {\n                return false;\n            }\n        }\n        p *= 2;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to multiply with overflow', /tmp/tmpxgetmb4w.rs:12:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            sum += 1;\n        }\n        n /= 2;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp87vssczy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut count = 0;\n    while num > 0 {\n        num = num & (num - 1);\n        count += 1;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpizgw_mbn.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & 1 == 1 {\n            n = n - 1;\n        }\n        n = n >> 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp3053tb56.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n != 1 {\n                return false;\n            }\n            n = n >> 1;\n            i += 1;\n        }\n        if i > 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            sum += 1;\n        }\n        n /= 2;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp87vssczy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpjjnvfmkp.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if n == 0 {\n        return false;\n    }\n    let mut n = n;\n    while n != 1 {\n        if n % 2 != 0 {\n            return false;\n        }\n        n = n / 2;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp_7censx.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut i = 0;\n    let mut sum = 0;\n    while num > 0 {\n        if num % 2 == 1 {\n            sum += 2f64.powi(i);\n        }\n        num /= 2;\n        i += 1;\n    }\n    sum == n as f64\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmp_tenhams.rs:8:17\n  |\n8 |             sum += 2f64.powi(i);\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n            <i16 as AddAssign>\n          and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_tenhams.rs:13:12\n   |\n13 |     sum == n as f64\n   |            ^^^^^^^^ expected integer, found `f64`\n\nerror[E0277]: can't compare `{integer}` with `f64`\n  --> /tmp/tmp_tenhams.rs:13:9\n   |\n13 |     sum == n as f64\n   |         ^^ no implementation for `{integer} == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented for `{integer}`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        sum += num & 1;\n        num >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmptdeh_a36.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut i = 0;\n    while num > 0 {\n        if num & 1 == 1 {\n            if num != 1 {\n                return false;\n            }\n            num -= 1 << i;\n        }\n        i += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n & (n - 1) != 0 {\n                return false;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509683,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp8ul4wmi3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpo5x3g7q2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    while n > 0 {\n        if n & 1 == 1 {\n            if result {\n                return false;\n            }\n            result = true;\n        }\n        n >>= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp9yd1yjwu.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            count += 1;\n        }\n        n /= 2;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpdjeh5k_s.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 1;\n        } else {\n            n /= 2;\n        }\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpclytxpm6.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            sum += 1;\n        }\n        n /= 2;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp87vssczy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut sum = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            num = num / 2;\n            sum = sum + 1;\n        } else {\n            num = num - 1;\n        }\n    }\n    if sum == 1 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp2_kqzp58.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n            count += 1;\n            n /= 2;\n        } else {\n            n -= 1;\n        }\n    }\n    if count > 0 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzpzepihx.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpjjnvfmkp.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n = n - 2i64.pow(i);\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsklb6ia9.rs:10:21\n   |\n10 |             n = n - 2i64.pow(i);\n   |                     ^^^^^^^^^^^ expected `isize`, found `i64`\n\nerror[E0277]: cannot subtract `i64` from `isize`\n  --> /tmp/tmpsklb6ia9.rs:10:19\n   |\n10 |             n = n - 2i64.pow(i);\n   |                   ^ no implementation for `isize - i64`\n   |\n   = help: the trait `Sub<i64>` is not implemented for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    let mut sum = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            sum += 2_f64.powi(i) as isize;\n        }\n        n >>= 1;\n        i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpdckbq3s8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    return n == 0;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpkfrcq1me.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        count += 1;\n        n = n & (n - 1);\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp2_xn7oo1.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpkfrcq1me.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpkfrcq1me.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n == 1 {\n            return true;\n        }\n        n = n - (n & -n);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp7804cnvi.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut x = n;\n    while x > 0 {\n        if x & (x - 1) == 0 {\n            return true;\n        }\n        x -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkzzrnqa.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n            n /= 2;\n            i += 1;\n        } else {\n            n -= 1;\n        }\n    }\n    i % 2 == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpuq3zkqbe.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4u0wf8zn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2i32.pow(i);\n            if n < 0 {\n                return false;\n            }\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpjxuk4wxl.rs:7:18\n  |\n7 |             n -= 2i32.pow(i);\n  |                  ^^^^^^^^^^^ expected `isize`, found `i32`\n\nerror[E0277]: cannot subtract-assign `i32` from `isize`\n --> /tmp/tmpjxuk4wxl.rs:7:15\n  |\n7 |             n -= 2i32.pow(i);\n  |               ^^ no implementation for `isize -= i32`\n  |\n  = help: the trait `SubAssign<i32>` is not implemented for `isize`\n  = help: the following other types implement trait `SubAssign<Rhs>`:\n            <f32 as SubAssign<&f32>>\n            <f32 as SubAssign>\n            <f64 as SubAssign<&f64>>\n            <f64 as SubAssign>\n            <i128 as SubAssign<&i128>>\n            <i128 as SubAssign>\n            <i16 as SubAssign<&i16>>\n            <i16 as SubAssign>\n          and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1 << i;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num == 1 {\n            return true;\n        }\n        num = num - (num & -num);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmprtuw4_gj.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    let mut sum = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            sum += 2_isize.pow(i);\n        }\n        i += 1;\n        n >>= 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpbw7dmw4l.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 1 {\n        if num % 2 == 0 {\n            num /= 2;\n        } else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpidz7lq2q.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let rem = n % 2;\n        sum += rem;\n        n /= 2;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpmtchdjxq.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n >>= 1;\n    }\n    sum == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpjjnvfmkp.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n != 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpkfrcq1me.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4u0wf8zn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n            count += 1;\n        }\n        n = n / 2;\n    }\n    if count == 1 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpqvlzfugj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 2_isize.pow(i);\n            if n < 0 {\n                return false;\n            }\n        }\n        i += 1;\n        n >>= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpt6u8jgov.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            if n != 1 {\n                return false;\n            }\n        }\n        n = n >> 1;\n        i += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpdiajqu38.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let r = n % 2;\n        if r == 1 {\n            sum += 1;\n        }\n        n /= 2;\n    }\n    if sum == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp51b9ovyz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            if n == 1 {\n                return true;\n            }\n            n -= 1;\n            i = 0;\n            while n % 2 == 0 {\n                n /= 2;\n                i += 1;\n            }\n            if n == 1 {\n                return true;\n            }\n            return false;\n        }\n        n /= 2;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpck_mw3z6.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 1;\n        } else {\n            n /= 2;\n        }\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpclytxpm6.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut count = 0;\n    while num > 0 {\n        num = num & (num - 1);\n        count += 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp4ifggbd.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut res = 0;\n    while num > 0 {\n        res += num & 1;\n        num >>= 1;\n    }\n    res == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpxek8qcom.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4u0wf8zn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut i = 0;\n    while num > 0 {\n        if num & 1 == 1 {\n            if num != 1 {\n                return false;\n            }\n            num -= 1 << i;\n        }\n        i += 1;\n    }\n    return num == 0;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut count = 0;\n    while num > 0 {\n        num = num & (num - 1);\n        count += 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp4ifggbd.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= (num & -num);\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp8wjh49v3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut p = 1;\n    let mut res = 0;\n    while n > 0 {\n        res += n & 1;\n        n = n >> 1;\n        p = p << 1;\n    }\n    if res == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp1pfiwe8a.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    let mut count = 0;\n    while num > 0 {\n        num = num & (num - 1);\n        count += 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp6zlhzbo4.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= 2_isize.pow(i);\n            if n < 0 {\n                return false;\n            }\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp8ul4wmi3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut p = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= p;\n        }\n        p *= 2;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to multiply with overflow', /tmp/tmpmt28wtxw.rs:9:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n & 1;\n        n = n >> 1;\n    }\n    return sum == 1;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp8mqj603s.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 0;\n    while n > 0 {\n        if n & 1 == 1 {\n            n -= 2_isize.pow(i);\n        }\n        i += 1;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpxkt71e8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut num = n;\n    while num > 0 {\n        if num & (num - 1) == 0 {\n            return true;\n        }\n        num -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4u0wf8zn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    while n > 0 {\n        if n & (n - 1) == 0 {\n            return true;\n        }\n        n -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp8ul4wmi3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut result = false;\n    while n > 0 {\n        if n & 1 == 1 {\n            if result {\n                return false;\n            }\n            result = true;\n        }\n        n >>= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp9yd1yjwu.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    let mut n = n;\n    let mut i = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            n -= i;\n        }\n        i *= 2;\n    }\n    n == 0\n}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to multiply with overflow', /tmp/tmpc2m2y9ww.rs:9:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}