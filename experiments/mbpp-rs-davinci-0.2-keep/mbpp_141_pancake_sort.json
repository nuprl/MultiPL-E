{
  "name": "mbpp_141_pancake_sort",
  "language": "rs",
  "prompt": "/// Write a function to sort a list of elements.\nfn pancake_sort(nums: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = pancake_sort;\n    assert_eq!(candidate(vec![15, 79, 25, 38, 69]), vec![15, 25, 38, 69, 79]);\n    assert_eq!(candidate(vec![98, 12, 54, 36, 85]), vec![12, 36, 54, 85, 98]);\n    assert_eq!(candidate(vec![41, 42, 32, 12, 23]), vec![12, 23, 32, 41, 42]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut nums = nums;\n    let mut result = Vec::new();\n    let mut max_index = nums.len() - 1;\n    while max_index > 0 {\n        let max_value = nums[max_index];\n        let max_value_index = nums.iter().position(|&x| x == max_value).unwrap();\n        if max_value_index != max_index {\n            if max_value_index != 0 {\n                result.push(max_value_index + 1);\n                nums[..max_value_index + 1].reverse();\n            }\n            result.push(max_index + 1);\n            nums[..max_index + 1].reverse();\n        }\n        max_index -= 1;\n    }\n    result",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max = 0;\n        for j in 0..=i {\n            if nums[j] > nums[max] {\n                max = j;\n            }\n        }\n        if max != i {\n            nums[..=max].reverse();\n            nums[..=i].reverse();\n        }\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max_index = i;\n        for j in 0..i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        if max_index != i {\n            nums.swap(max_index, i);\n            nums.swap(0, max_index);\n        }\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len();\n    while i > 1 {\n        let mut max_index = 0;\n        for j in 0..i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        flip(&mut nums, max_index);\n        flip(&mut nums, i - 1);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max_index = 0;\n        for j in 0..=i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index);\n            nums = flip(nums, i);\n        }\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut sorted_index = nums.len();\n    while sorted_index > 0 {\n        let (max_index, max_value) = nums[..sorted_index]\n            .iter()\n            .enumerate()\n            .max_by_key(|(_, &v)| v)\n            .unwrap();\n        if max_index != sorted_index - 1 {\n            nums[..max_index + 1].reverse();\n            nums[..sorted_index].reverse();\n        }\n        sorted_index -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len();\n    while i > 1 {\n        let mut max_index = 0;\n        for j in 1..i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        flip(&mut nums, max_index + 1);\n        flip(&mut nums, i);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max = i;\n        for j in 0..i {\n            if nums[j] > nums[max] {\n                max = j;\n            }\n        }\n        flip(&mut nums, max);\n        flip(&mut nums, i);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max_index = 0;\n        for j in 0..=i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        nums = flip(&nums, max_index + 1);\n        nums = flip(&nums, i + 1);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len();\n    while i > 0 {\n        let mut max_index = 0;\n        for j in 0..i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        nums = flip(nums, max_index + 1);\n        nums = flip(nums, i);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len();\n    while i > 1 {\n        let mut max_index = 0;\n        for j in 0..i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        nums = flip(&nums, max_index + 1);\n        nums = flip(&nums, i);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut sorted = false;\n    let mut i = nums.len() - 1;\n    while !sorted {\n        sorted = true;\n        for j in 0..i {\n            if nums[j] > nums[j + 1] {\n                nums.swap(j, j + 1);\n                sorted = false;\n            }\n        }\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max_index = i;\n        for j in 0..i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        nums = flip(&nums, max_index + 1);\n        nums = flip(&nums, i + 1);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max_index = 0;\n        for j in 0..=i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        nums = flip(&nums, max_index + 1);\n        nums = flip(&nums, i + 1);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut n = nums.len();\n    while n > 1 {\n        let mut i = n - 1;\n        while i > 0 && nums[i - 1] > nums[i] {\n            i -= 1;\n        }\n        if i > 0 {\n            nums[..i + 1].reverse();\n        }\n        nums[..n].reverse();\n        n -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max_index = 0;\n        for j in 0..=i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        nums = flip(&nums, max_index);\n        nums = flip(&nums, i);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    for i in (1..nums.len()).rev() {\n        let max_index = nums[..i + 1]\n            .iter()\n            .enumerate()\n            .max_by_key(|&(_, &num)| num)\n            .unwrap()\n            .0;\n        if max_index != i {\n            nums[..max_index + 1].reverse();\n            nums[..i + 1].reverse();\n        }\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max_index = 0;\n        for j in 0..=i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        flip(&mut nums, max_index);\n        flip(&mut nums, i);\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = nums.len() - 1;\n    while i > 0 {\n        let mut max_index = i;\n        for j in 0..i {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        if max_index != i {\n            nums = flip(&nums, max_index);\n            nums = flip(&nums, i);\n        }\n        i -= 1;\n    }\n    nums",
    "    let mut nums = nums;\n    let mut i = 0;\n    while i < nums.len() {\n        let mut max_index = i;\n        for j in i..nums.len() {\n            if nums[j] > nums[max_index] {\n                max_index = j;\n            }\n        }\n        if max_index != i {\n            nums.reverse_range(0..max_index + 1);\n            nums.reverse_range(0..i + 1);\n        }\n        i += 1;\n    }\n    nums"
  ]
}