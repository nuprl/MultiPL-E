{
  "name": "mbpp_80_tetrahedral_number",
  "language": "rs",
  "prompt": "/// Write a function to find the nth tetrahedral number.\nfn tetrahedral_number(n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = tetrahedral_number;\n    assert_eq!(candidate(5), 35);\n    assert_eq!(candidate(6), 56);\n    assert_eq!(candidate(7), 84);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    unimplemented!()",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!()",
    "    unimplemented!()",
    "    unimplemented!();",
    "    unimplemented!()",
    "    unimplemented!(\"tetrahedral number of {}\", n)",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!()",
    "    unimplemented!();",
    "    unimplemented!();",
    "    unimplemented!(\"Find the {}th tetrahedral number\", n)",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!()",
    "    let mut sum = 0;\n    for i in 1..n + 1 {\n        sum += i;\n    }\n    sum",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    unimplemented!();",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    unimplemented!()",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    unimplemented!(\"Find the {}th tetrahedral number.\", n)",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    unimplemented!();",
    "    unimplemented!()",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!()",
    "    unimplemented!();",
    "    unimplemented!();",
    "    unimplemented!();",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    unimplemented!()",
    "    unimplemented!()",
    "    unimplemented!();",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!()",
    "    unimplemented!();",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!()",
    "    if n <= 0 {\n        return 0;\n    }\n    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    unimplemented!()",
    "    unimplemented!()",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!()",
    "    // TODO\n    unimplemented!()",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    unimplemented!();",
    "    unimplemented!()",
    "    unimplemented!()",
    "    unimplemented!()",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!();",
    "    unimplemented!();",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!()",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!()",
    "    n * (n + 1) * (n + 2) / 6",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    unimplemented!();",
    "    n * (n + 1) * (n + 2) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    (n * (n + 1) * (n + 2)) / 6",
    "    unimplemented!()"
  ]
}