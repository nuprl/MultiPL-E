{
  "name": "mbpp_478_remove_lowercase",
  "language": "rs",
  "prompt": "/// Write a function to remove lowercase substrings from a given string.\nfn remove_lowercase(str1: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = remove_lowercase;\n    assert_eq!(candidate(String::from(\"PYTHon\")), String::from(\"PYTH\"));\n    assert_eq!(candidate(String::from(\"FInD\")), String::from(\"FID\"));\n    assert_eq!(candidate(String::from(\"STRinG\")), String::from(\"STRG\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::from(\"\");\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    str1.chars().filter(|c| c.is_uppercase()).collect()",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    str1.chars().filter(|c| c.is_uppercase()).collect()",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    str1.chars()\n        .filter(|c| c.is_uppercase())\n        .collect::<String>()",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result",
    "    str1.chars().filter(|c| !c.is_lowercase()).collect()"
  ]
}