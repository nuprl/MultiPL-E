{
  "name": "mbpp_168_frequency",
  "language": "rs",
  "prompt": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| *n == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| *n == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| n == &x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| *n == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| *n == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| *n == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| n == &x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| *n == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&y| *y == x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    a.iter().filter(|&n| n == &x).count() as isize\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n    let mut count = 0;\n    for i in a {\n        if i == x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}