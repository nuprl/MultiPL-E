{
  "name": "mbpp_775_odd_position",
  "language": "rs",
  "prompt": "/// Write a python function to check whether every odd index contains odd numbers of a given list.\nfn odd_position(nums: Vec<isize>) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = odd_position;\n    assert_eq!(candidate(vec![2, 1, 4, 3, 6, 7, 6, 3]), true);\n    assert_eq!(candidate(vec![4, 1, 2]), true);\n    assert_eq!(candidate(vec![1, 2, 3]), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut i = 0;\n    for num in nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut is_odd = false;\n    for (i, num) in nums.iter().enumerate() {\n        if i % 2 == 1 {\n            if *num % 2 == 1 {\n                is_odd = true;\n            } else {\n                is_odd = false;\n                break;\n            }\n        }\n    }\n    is_odd",
    "    nums.iter().enumerate().all(|(i, &n)| i % 2 == 0 && n % 2 == 1)",
    "    nums.iter().enumerate().all(|(i, &x)| i % 2 == 1 && x % 2 == 1)",
    "    let mut odd_count = 0;\n    for (i, num) in nums.iter().enumerate() {\n        if i % 2 == 1 {\n            if num % 2 == 1 {\n                odd_count += 1;\n            }\n        }\n    }\n    odd_count == nums.len() / 2",
    "    let mut i = 0;\n    for num in nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut flag = true;\n    for i in 1..nums.len() {\n        if i % 2 == 1 && nums[i] % 2 == 0 {\n            flag = false;\n            break;\n        }\n    }\n    flag",
    "    nums.iter().enumerate().all(|(i, n)| i % 2 == 0 && n % 2 != 0)",
    "    nums.iter().enumerate().all(|(i, &x)| i % 2 == 1 && x % 2 == 1)",
    "    let mut result = true;\n    for (i, x) in nums.iter().enumerate() {\n        if i % 2 == 1 && *x % 2 == 0 {\n            result = false;\n            break;\n        }\n    }\n    result",
    "    let mut result = true;\n    for i in 1..nums.len() {\n        if i % 2 == 1 {\n            if nums[i] % 2 == 0 {\n                result = false;\n                break;\n            }\n        }\n    }\n    result",
    "    let mut odd_pos = true;\n    for (i, num) in nums.iter().enumerate() {\n        if i % 2 == 0 && num % 2 == 0 {\n            odd_pos = false;\n            break;\n        }\n    }\n    odd_pos",
    "    let mut result = true;\n    for i in 0..nums.len() {\n        if i % 2 == 1 && nums[i] % 2 == 0 {\n            result = false;\n            break;\n        }\n    }\n    result",
    "    nums.iter().enumerate().all(|(i, n)| i % 2 == 0 && n % 2 == 1)",
    "    let mut i = 0;\n    for num in nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut result = true;\n    for i in 1..nums.len() {\n        if i % 2 == 0 && nums[i] % 2 == 0 {\n            result = false;\n            break;\n        }\n    }\n    result",
    "    nums.into_iter().enumerate().all(|(i, x)| i % 2 == 1 && x % 2 == 1)",
    "    nums.iter().enumerate().all(|(i, &x)| i % 2 == 0 && x % 2 == 1)",
    "    let mut odd_count = 0;\n    for (i, n) in nums.iter().enumerate() {\n        if i % 2 == 1 && *n % 2 == 1 {\n            odd_count += 1;\n        }\n    }\n    odd_count == nums.len() / 2",
    "    let mut i = 0;\n    for num in nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false;\n        }\n        i += 1;\n    }\n    true"
  ]
}