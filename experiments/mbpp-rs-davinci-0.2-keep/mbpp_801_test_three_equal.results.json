{
  "name": "mbpp_801_test_three_equal",
  "language": "rs",
  "prompt": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1666123396,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpekl50cwc.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || z == x {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1666123396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        return 3;\n    }\n    if x == y || y == z || x == z {\n        return 2;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1666123396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    if x == y && y == z {\n        3\n    } else if x == y || y == z || x == z {\n        2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmphq6n_96e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if z == x {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi8ih210o.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    let mut count = 0;\n    if x == y {\n        count += 1;\n    }\n    if y == z {\n        count += 1;\n    }\n    if x == z {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpi_vyqgr4.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}