{
  "name": "mbpp_99_decimal_to_binary",
  "language": "rs",
  "prompt": "/// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfn decimal_to_binary(n: isize) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(8), String::from(\"1000\"));\n    assert_eq!(candidate(18), String::from(\"10010\"));\n    assert_eq!(candidate(7), String::from(\"111\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut res = String::new();\n    while n > 0 {\n        res.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    res.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut result = String::new();\n    let mut n = n;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
    "    let mut n = n;\n    let mut result = String::new();\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()"
  ]
}