{
  "name": "mbpp_589_perfect_squares",
  "language": "rs",
  "prompt": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpp_1oswr2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpkuk6n3p5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp4tcfk65q.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpl4xuduzo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in a..b {\n        if i.sqrt() == i.sqrt().round() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sqrt` found for type `isize` in the current scope\n --> /tmp/tmpevqh490m.rs:5:14\n  |\n5 |         if i.sqrt() == i.sqrt().round() {\n  |              ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `sqrt` found for type `isize` in the current scope\n --> /tmp/tmpevqh490m.rs:5:26\n  |\n5 |         if i.sqrt() == i.sqrt().round() {\n  |                          ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b).filter(|&x| (x as f64).sqrt().fract() == 0.0).collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpfnbi5vnm.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.trunc() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp9wgobij0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares: Vec<isize> = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp2qgvd88o.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 0;\n    loop {\n        let square = i * i;\n        if square >= a && square <= b {\n            squares.push(square);\n        }\n        if square > b {\n            break;\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp3kwc3828.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in a..b + 1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..(b + 1) {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares: Vec<isize> = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b+1).filter(|&x| (x as f64).sqrt().fract() == 0.0).collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpl4xuduzo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b+1 {\n        let sqrt = (i as f64).sqrt().floor() as isize;\n        if sqrt * sqrt == i {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b)\n        .filter(|x| x.sqrt() * x.sqrt() == *x)\n        .collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sqrt` found for reference `&isize` in the current scope\n --> /tmp/tmpeuqptlfe.rs:4:23\n  |\n4 |         .filter(|x| x.sqrt() * x.sqrt() == *x)\n  |                       ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `sqrt` found for reference `&isize` in the current scope\n --> /tmp/tmpeuqptlfe.rs:4:34\n  |\n4 |         .filter(|x| x.sqrt() * x.sqrt() == *x)\n  |                                  ^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpp_1oswr2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = vec![];\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            result.push(i * i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp3kwc3828.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b + 1)\n        .filter(|x| {\n            let x_sqrt = (*x as f64).sqrt() as isize;\n            x_sqrt * x_sqrt == *x\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b + 1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpp_1oswr2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt.ceil() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpr1ruvkv2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp4tcfk65q.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n\n    for i in a..b + 1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt.ceil() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmphxbwdp_9.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..=b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp3kwc3828.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..(b + 1) {\n        if i >= 0 && (i as f64).sqrt() == (i as f64).sqrt().floor() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        if i.pow(2) <= b {\n            result.push(i.pow(2));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[]`,\n right: `[64, 81, 100]`', /tmp/tmp70igd55w.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 0;\n    let mut square = 0;\n    while square < b {\n        square = i * i;\n        if square >= a && square <= b {\n            squares.push(square);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..=b)\n        .filter(|x| {\n            let sqrt = (x as f64).sqrt();\n            sqrt.floor() == sqrt.ceil()\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "error[E0606]: casting `&isize` as `f64` is invalid\n --> /tmp/tmp2vrcpnll.rs:5:24\n  |\n5 |             let sqrt = (x as f64).sqrt();\n  |                        ^-^^^^^^^^\n  |                        ||\n  |                        |help: dereference the expression: `*x`\n  |                        cannot cast `&isize` as `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0606`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b + 1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpaxaxko12.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            result.push(i * i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 0;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp4tcfk65q.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i < b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpeyb7x0_b.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let root = (i as f64).sqrt() as isize;\n        if root * root == i {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpusxwo0ud.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpl4xuduzo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b + 1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b + 1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        if is_perfect_square(i) {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_perfect_square` in this scope\n --> /tmp/tmph_zhd3mi.rs:5:12\n  |\n5 |         if is_perfect_square(i) {\n  |            ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpp_1oswr2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i < b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpeyb7x0_b.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares: Vec<isize> = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp4tcfk65q.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in a..=b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpwprbx6sv.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b+1).filter(|&x| (x as f64).sqrt().fract() == 0.0).collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b + 1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa_k_su_6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..=b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 0;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        if i.sqrt() * i.sqrt() == i {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sqrt` found for type `isize` in the current scope\n --> /tmp/tmppm7axm7k.rs:5:14\n  |\n5 |         if i.sqrt() * i.sqrt() == i {\n  |              ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `sqrt` found for type `isize` in the current scope\n --> /tmp/tmppm7axm7k.rs:5:25\n  |\n5 |         if i.sqrt() * i.sqrt() == i {\n  |                         ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = vec![];\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            result.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..=b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..=b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b+1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i*i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i*i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            squares.push(i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt().floor() as isize;\n        if sqrt * sqrt == i {\n            squares.push(i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let root = (i as f64).sqrt();\n        if root.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp40ukwhv_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b)\n        .filter(|x| (x as f64).sqrt().fract() == 0.0)\n        .collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "error[E0606]: casting `&isize` as `f64` is invalid\n --> /tmp/tmpl10c2njy.rs:4:21\n  |\n4 |         .filter(|x| (x as f64).sqrt().fract() == 0.0)\n  |                     ^-^^^^^^^^\n  |                     ||\n  |                     |help: dereference the expression: `*x`\n  |                     cannot cast `&isize` as `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0606`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i * i <= b {\n        if i * i >= a {\n            result.push(i * i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp3kwc3828.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            squares.push(i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 0;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt.ceil() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpr1ruvkv2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = a;\n    while i <= b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp3kwc3828.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp3kwc3828.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b).filter(|x| (x as f64).sqrt().fract() == 0.0).collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "error[E0606]: casting `&isize` as `f64` is invalid\n --> /tmp/tmpqwgmtg6h.rs:3:23\n  |\n3 |     (a..b).filter(|x| (x as f64).sqrt().fract() == 0.0).collect()\n  |                       ^-^^^^^^^^\n  |                       ||\n  |                       |help: dereference the expression: `*x`\n  |                       cannot cast `&isize` as `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0606`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b).filter(|&x| (x as f64).sqrt().fract() == 0.0).collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpfnbi5vnm.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square < a {\n        i += 1;\n        square = i * i;\n    }\n\n    while square <= b {\n        squares.push(square);\n        i += 1;\n        square = i * i;\n    }\n\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 0;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut n = 1;\n    let mut square = n * n;\n    while square < a {\n        n += 1;\n        square = n * n;\n    }\n    while square <= b {\n        squares.push(square);\n        n += 1;\n        square = n * n;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpizgth0_0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp_84k7l7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.floor() == sqrt {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmp3kwc3828.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        if i.pow(2) >= a && i.pow(2) <= b {\n            result.push(i.pow(2));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[]`,\n right: `[64, 81, 100]`', /tmp/tmp5rswg72d.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares: Vec<isize> = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    let mut square = i * i;\n    while square <= b {\n        if square >= a {\n            squares.push(square);\n        }\n        i += 1;\n        square = i * i;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt() as isize;\n        if sqrt * sqrt == i {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpp_1oswr2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    let mut i = 0;\n    while i * i <= b {\n        if i * i >= a {\n            v.push(i * i);\n        }\n        i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in a..=b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b + 1 {\n        let sqrt = (i as f64).sqrt();\n        if sqrt == sqrt.floor() {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    (a..b+1).filter(|x| x.sqrt().fract() == 0.0).collect()\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sqrt` found for reference `&isize` in the current scope\n --> /tmp/tmpwandjun_.rs:3:27\n  |\n3 |     (a..b+1).filter(|x| x.sqrt().fract() == 0.0).collect()\n  |                           ^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    let mut i = 1;\n    while i * i <= b {\n        if i * i >= a {\n            squares.push(i * i);\n        }\n        i += 1;\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for i in a..b {\n        let sqrt = (i as f64).sqrt();\n        if sqrt.fract() == 0.0 {\n            squares.push(i);\n        }\n    }\n    squares\n}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[64, 81]`,\n right: `[64, 81, 100]`', /tmp/tmpa6zrimr7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}