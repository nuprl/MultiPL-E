{
  "name": "mbpp_640_remove_parenthesis",
  "language": "rs",
  "prompt": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut stack = Vec::new();\n    for item in items {\n        if item == \"(\" {\n            stack.push(item);\n        } else if item == \")\" {\n            stack.pop();\n        } else if stack.is_empty() {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_paren = false;\n    for item in items {\n        if item == \"(\" {\n            in_paren = true;\n        } else if item == \")\" {\n            in_paren = false;\n        } else if !in_paren {\n            result.push_str(&item);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result"
  ]
}