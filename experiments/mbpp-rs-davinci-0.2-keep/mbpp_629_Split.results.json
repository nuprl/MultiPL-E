{
  "name": "mbpp_629_Split",
  "language": "rs",
  "prompt": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    list.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_numbers: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_numbers.push(i);\n        }\n    }\n    even_numbers\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    list.iter().filter(|&x| x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    list.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            evens.push(num);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            evens.push(num);\n        }\n    }\n    return evens;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for number in list {\n        if number % 2 == 0 {\n            even_list.push(number);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            evens.push(num);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    list.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    return even;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    list.into_iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    return evens;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = vec![];\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    return evens;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list.iter() {\n        if i % 2 == 0 {\n            even_list.push(*i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            even_list.push(num);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    list.into_iter().filter(|x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for item in list {\n        if item % 2 == 0 {\n            even_list.push(item);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    return even_list;\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for num in list {\n        if num % 2 == 0 {\n            evens.push(num);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut even_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            even_list.push(i);\n        }\n    }\n    even_list\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n",
      "timestamp": 1665510390,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}