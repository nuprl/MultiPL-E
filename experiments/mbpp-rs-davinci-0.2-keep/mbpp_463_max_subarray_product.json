{
  "name": "mbpp_463_max_subarray_product",
  "language": "rs",
  "prompt": "/// Write a function to find the maximum product subarray of the given array.\nfn max_subarray_product(arr: Vec<isize>) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = max_subarray_product;\n    assert_eq!(candidate(vec![1, -2, -3, 0, 7, -8, -2]), 112);\n    assert_eq!(candidate(vec![6, -3, -10, 0, 2]), 180);\n    assert_eq!(candidate(vec![-2, -40, 0, -2, -3]), 80);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product;\n            max_product = min_product;\n            min_product = temp;\n        }\n\n        max_product = max(arr[i], max_product * arr[i]);\n        min_product = min(arr[i], min_product * arr[i]);\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n\n        let mut temp_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * temp_max, curr * min_product));\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        let min_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_prev = max_product;\n        let min_product_prev = min_product;\n\n        max_product = max(\n            max(max_product_prev * curr, min_product_prev * curr),\n            curr,\n        );\n        min_product = min(\n            min(max_product_prev * curr, min_product_prev * curr),\n            curr,\n        );\n\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp_max = max_product;\n        max_product = max(\n            max(max_product * arr[i], min_product * arr[i]),\n            arr[i]\n        );\n        min_product = min(\n            min(temp_max * arr[i], min_product * arr[i]),\n            arr[i]\n        );\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n\n        let tmp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(tmp_max * curr, min_product * curr), curr);\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let (max_product_prev, min_product_prev) = (max_product, min_product);\n        max_product = max(max(max_product_prev * arr[i], min_product_prev * arr[i]), arr[i]);\n        min_product = min(min(max_product_prev * arr[i], min_product_prev * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_ending_here > max_product {\n            max_product = max_ending_here;\n        }\n    }\n\n    max_product",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(curr, max(max_product * curr, min_product * curr));\n        min_product = min(curr, min(temp_max * curr, min_product * curr));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp_max = max_product;\n        let mut temp_min = min_product;\n        max_product = max(arr[i], max(temp_max * arr[i], temp_min * arr[i]));\n        min_product = min(arr[i], min(temp_max * arr[i], temp_min * arr[i]));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_ending_here = max_ending_here * i;\n            min_so_far = min(min_so_far * i, 1);\n        } else if i == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * i, 1);\n            min_so_far = temp * i;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_ending_here > max_so_far {\n            max_so_far = max_ending_here;\n        }\n        if min_ending_here < min_so_far {\n            min_so_far = min_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut max_product, &mut min_product);\n        }\n\n        max_product = max(arr[i], max_product * arr[i]);\n        min_product = min(arr[i], min_product * arr[i]);\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(curr, max_product * curr), min_product * curr);\n        min_product = min(min(curr, temp_max * curr), min_product * curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut curr_max = max_product;\n        let mut curr_min = min_product;\n\n        max_product = max(arr[i], max(curr_max * arr[i], curr_min * arr[i]));\n        min_product = min(arr[i], min(curr_max * arr[i], curr_min * arr[i]));\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut max_product_new = max_product * curr;\n        let mut min_product_new = min_product * curr;\n        max_product = max(curr, max(max_product_new, min_product_new));\n        min_product = min(curr, min(max_product_new, min_product_new));\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_ending_here = max_ending_here * i;\n            min_ending_here = min(min_ending_here * i, 1);\n        } else if i == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * i, 1);\n            min_ending_here = temp * i;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut curr_max = max_product;\n        let mut curr_min = min_product;\n        max_product = max(max(curr_max * arr[i], curr_min * arr[i]), arr[i]);\n        min_product = min(min(curr_max * arr[i], curr_min * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_ending_here > max_product {\n            max_product = max_ending_here;\n        }\n    }\n\n    max_product",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for &x in arr.iter() {\n        if x > 0 {\n            max_ending_here = max_ending_here * x;\n            min_ending_here = min(min_ending_here * x, 1);\n        } else if x == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * x, 1);\n            min_ending_here = temp * x;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let current = arr[i];\n        let max_product_tmp = max_product;\n        max_product = max(current, max(current * max_product, current * min_product));\n        min_product = min(current, min(current * max_product_tmp, current * min_product));\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_ending_here > max_product {\n            max_product = max_ending_here;\n        }\n    }\n\n    max_product",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut curr_max = max_product;\n        let mut curr_min = min_product;\n\n        max_product = max(max(curr_max * arr[i], curr_min * arr[i]), arr[i]);\n        min_product = min(min(curr_max * arr[i], curr_min * arr[i]), arr[i]);\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(curr, curr * max_product), curr * min_product);\n        min_product = min(min(curr, curr * temp_max), curr * min_product);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let prev_max = max_product;\n        let prev_min = min_product;\n\n        max_product = max(curr, max(curr * prev_max, curr * prev_min));\n        min_product = min(curr, min(curr * prev_max, curr * prev_min));\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_ending_here = max_ending_here * i;\n            min_ending_here = min(min_ending_here * i, 1);\n        } else if i == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * i, 1);\n            min_ending_here = temp * i;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp_max = max_product;\n        let mut temp_min = min_product;\n\n        max_product = max(arr[i], max(arr[i] * temp_max, arr[i] * temp_min));\n        min_product = min(arr[i], min(arr[i] * temp_max, arr[i] * temp_min));\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = isize::min_value();\n    let mut current_product = 1;\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        max_product = max(max_product, current_product);\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    current_product = 1;\n    for i in (0..arr.len()).rev() {\n        current_product *= arr[i];\n        max_product = max(max_product, current_product);\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n    max_product",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_ending_here = max_ending_here * i;\n            min_ending_here = min(min_ending_here * i, 1);\n        } else if i == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * i, 1);\n            min_ending_here = temp * i;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for &x in arr.iter() {\n        if x > 0 {\n            max_ending_here = max_ending_here * x;\n            min_ending_here = min(min_ending_here * x, 1);\n        } else if x == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * x, 1);\n            min_ending_here = temp * x;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(curr, max(max_product * curr, min_product * curr));\n        min_product = min(curr, min(temp_max * curr, min_product * curr));\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut current_max = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(current_max * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut max_product, &mut min_product);\n        }\n\n        max_product = std::cmp::max(arr[i], max_product * arr[i]);\n        min_product = std::cmp::min(arr[i], min_product * arr[i]);\n\n        max_so_far = std::cmp::max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_new = max(\n            max(max_product * curr, min_product * curr),\n            curr,\n        );\n        let min_product_new = min(\n            min(max_product * curr, min_product * curr),\n            curr,\n        );\n        max_so_far = max(max_so_far, max_product_new);\n        max_product = max_product_new;\n        min_product = min_product_new;\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut curr = arr[i];\n        let mut prev_max = max_product;\n        let mut prev_min = min_product;\n\n        max_product = max(curr, max(curr * prev_max, curr * prev_min));\n        min_product = min(curr, min(curr * prev_max, curr * prev_min));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![curr, max_product * curr, min_product * curr];\n        max_product = max_product_candidates.iter().cloned().max().unwrap();\n        min_product = max_product_candidates.iter().cloned().min().unwrap();\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let (max_product_prev, min_product_prev) = (max_product, min_product);\n        max_product = max(\n            max(max_product_prev * arr[i], min_product_prev * arr[i]),\n            arr[i],\n        );\n        min_product = min(\n            min(max_product_prev * arr[i], min_product_prev * arr[i]),\n            arr[i],\n        );\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut max_product_new = max_product;\n        let mut min_product_new = min_product;\n\n        max_product_new = max(curr, max(max_product * curr, min_product * curr));\n        min_product_new = min(curr, min(max_product * curr, min_product * curr));\n\n        max_so_far = max(max_so_far, max_product_new);\n\n        max_product = max_product_new;\n        min_product = min_product_new;\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let current = arr[i];\n        let max_product_candidates = vec![current, max_product * current, min_product * current];\n        let min_product_candidates = vec![current, max_product * current, min_product * current];\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n        result = std::cmp::max(result, max_product);\n    }\n\n    result",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let temp_max = max_product;\n        max_product = max(curr, max(max_product * curr, min_product * curr));\n        min_product = min(curr, min(temp_max * curr, min_product * curr));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        let min_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 0;\n    let mut min_product = 0;\n    let mut max_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(1, min_product * arr[i]);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(1, min_product * arr[i]);\n            min_product = temp * arr[i];\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let (max_product_prev, min_product_prev) = (max_product, min_product);\n        max_product = max(max(max_product_prev * arr[i], min_product_prev * arr[i]), arr[i]);\n        min_product = min(min(max_product_prev * arr[i], min_product_prev * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let prev_max = max_product;\n        max_product = max(curr, max(curr * prev_max, curr * min_product));\n        min_product = min(curr, min(curr * prev_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_product < max_ending_here {\n            max_product = max_ending_here;\n        }\n    }\n\n    max_product",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_new = max(curr, max(curr * max_product, curr * min_product));\n        let min_product_new = min(curr, min(curr * max_product, curr * min_product));\n        max_product = max_product_new;\n        min_product = min_product_new;\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_prev = max_product;\n        let min_product_prev = min_product;\n\n        max_product = max(\n            max(max_product_prev * curr, min_product_prev * curr),\n            curr,\n        );\n        min_product = min(\n            min(max_product_prev * curr, min_product_prev * curr),\n            curr,\n        );\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_new = max(curr, max(curr * max_product, curr * min_product));\n        let min_product_new = min(curr, min(curr * max_product, curr * min_product));\n        max_product = max_product_new;\n        min_product = min_product_new;\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![curr, max_product * curr, min_product * curr];\n        let min_product_candidates = vec![curr, max_product * curr, min_product * curr];\n\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut max_product_new = max_product;\n        let mut min_product_new = min_product;\n\n        max_product_new = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product_new = min(min(max_product * arr[i], min_product * arr[i]), arr[i]);\n\n        max_so_far = max(max_so_far, max_product_new);\n\n        max_product = max_product_new;\n        min_product = min_product_new;\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let (max_product_prev, min_product_prev) = (max_product, min_product);\n        max_product = max(\n            max(max_product_prev * arr[i], min_product_prev * arr[i]),\n            arr[i],\n        );\n        min_product = min(\n            min(max_product_prev * arr[i], min_product_prev * arr[i]),\n            arr[i],\n        );\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![curr, max_product * curr, min_product * curr];\n        let min_product_candidates = vec![curr, max_product * curr, min_product * curr];\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(curr, max(max_product * curr, min_product * curr));\n        min_product = min(curr, min(temp_max * curr, min_product * curr));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(\n            max(max_product * arr[i], min_product * arr[i]),\n            arr[i]\n        );\n        min_product = min(\n            min(temp * arr[i], min_product * arr[i]),\n            arr[i]\n        );\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for &x in arr.iter() {\n        if x > 0 {\n            max_ending_here = max_ending_here * x;\n            min_ending_here = min(min_ending_here * x, 1);\n        } else if x == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * x, 1);\n            min_ending_here = temp * x;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut max_product, &mut min_product);\n        }\n        max_product = std::cmp::max(arr[i], max_product * arr[i]);\n        min_product = std::cmp::min(arr[i], min_product * arr[i]);\n        max_so_far = std::cmp::max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_new = max(curr, max(max_product * curr, min_product * curr));\n        let min_product_new = min(curr, min(max_product * curr, min_product * curr));\n        max_product = max_product_new;\n        min_product = min_product_new;\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let current = arr[i];\n        let max_product_candidate = max_product * current;\n        let min_product_candidate = min_product * current;\n\n        max_product = max(current, max(max_product_candidate, min_product_candidate));\n        min_product = min(current, min(max_product_candidate, min_product_candidate));\n\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product;\n            max_product = min_product;\n            min_product = temp;\n        }\n\n        max_product = max(arr[i], max_product * arr[i]);\n        min_product = min(arr[i], min_product * arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_new = max(max(max_product * curr, min_product * curr), curr);\n        let min_product_new = min(min(max_product * curr, min_product * curr), curr);\n        max_product = max_product_new;\n        min_product = min_product_new;\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![curr, curr * max_product, curr * min_product];\n        let min_product_candidates = vec![curr, curr * max_product, curr * min_product];\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let prev_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * prev_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        let min_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![curr, max_product * curr, min_product * curr];\n        let min_product_candidates = vec![curr, max_product * curr, min_product * curr];\n        max_product = max_product_candidates.iter().max().unwrap().clone();\n        min_product = min_product_candidates.iter().min().unwrap().clone();\n        max_so_far = max_so_far.max(max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let (max_product_prev, min_product_prev) = (max_product, min_product);\n        max_product = max(max_product_prev * arr[i], max(min_product_prev * arr[i], arr[i]));\n        min_product = min(max_product_prev * arr[i], min(min_product_prev * arr[i], arr[i]));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut max_product, &mut min_product);\n        }\n\n        max_product = std::cmp::max(arr[i], max_product * arr[i]);\n        min_product = std::cmp::min(arr[i], min_product * arr[i]);\n\n        max_so_far = std::cmp::max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut current_max = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(current_max * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let current = arr[i];\n        let max_product_candidates = vec![\n            max_product * current,\n            min_product * current,\n            current,\n        ];\n        let min_product_candidates = vec![\n            max_product * current,\n            min_product * current,\n            current,\n        ];\n        max_product = max_product_candidates.iter().max().unwrap().clone();\n        min_product = min_product_candidates.iter().min().unwrap().clone();\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut max_product_new = max_product;\n        let mut min_product_new = min_product;\n\n        max_product_new = max(curr, max(curr * max_product, curr * min_product));\n        min_product_new = min(curr, min(curr * max_product, curr * min_product));\n\n        max_so_far = max(max_so_far, max_product_new);\n\n        max_product = max_product_new;\n        min_product = min_product_new;\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_new = max(curr, max(max_product * curr, min_product * curr));\n        let min_product_new = min(curr, min(max_product * curr, min_product * curr));\n        max_product = max_product_new;\n        min_product = min_product_new;\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut current_max = max_product;\n        let mut current_min = min_product;\n        max_product = max(arr[i], max(current_max * arr[i], current_min * arr[i]));\n        min_product = min(arr[i], min(current_max * arr[i], current_min * arr[i]));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(curr, max(max_product * curr, min_product * curr));\n        min_product = min(curr, min(temp_max * curr, min_product * curr));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_ending_here > max_product {\n            max_product = max_ending_here;\n        }\n    }\n\n    max_product",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_ending_here > max_product {\n            max_product = max_ending_here;\n        }\n    }\n\n    max_product",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        let min_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_product = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if max_ending_here > max_product {\n            max_product = max_ending_here;\n        }\n    }\n    max_product",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let current = arr[i];\n        let max_product_candidate = max_product * current;\n        let min_product_candidate = min_product * current;\n\n        max_product = max(current, max(max_product_candidate, min_product_candidate));\n        min_product = min(current, min(max_product_candidate, min_product_candidate));\n\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product;\n            max_product = min_product;\n            min_product = temp;\n        }\n\n        max_product = max(arr[i], max_product * arr[i]);\n        min_product = min(arr[i], min_product * arr[i]);\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product;\n            max_product = min_product;\n            min_product = temp;\n        }\n\n        max_product = max(arr[i], max_product * arr[i]);\n        min_product = min(arr[i], min_product * arr[i]);\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let temp_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * temp_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n    for i in 1..arr.len() {\n        let current = arr[i];\n        let max_product_candidate = max_product * current;\n        let min_product_candidate = min_product * current;\n        max_product = max(current, max(max_product_candidate, min_product_candidate));\n        min_product = min(current, min(max_product_candidate, min_product_candidate));\n        result = max(result, max_product);\n    }\n    result",
    "    let mut max_prod = arr[0];\n    let mut min_prod = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let prod1 = curr * max_prod;\n        let prod2 = curr * min_prod;\n        max_prod = max(curr, max(prod1, prod2));\n        min_prod = min(curr, min(prod1, prod2));\n        max_so_far = max(max_so_far, max_prod);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_ending_here > max_product {\n            max_product = max_ending_here;\n        }\n    }\n\n    max_product",
    "    let mut max_product = isize::min_value();\n    let mut current_product = 1;\n\n    for i in 0..arr.len() {\n        current_product *= arr[i];\n        max_product = max(max_product, current_product);\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n\n    current_product = 1;\n    for i in (0..arr.len()).rev() {\n        current_product *= arr[i];\n        max_product = max(max_product, current_product);\n        if current_product == 0 {\n            current_product = 1;\n        }\n    }\n\n    max_product",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for &x in arr.iter() {\n        if x > 0 {\n            max_ending_here = max_ending_here * x;\n            min_ending_here = min(min_ending_here * x, 1);\n        } else if x == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * x, 1);\n            min_ending_here = temp * x;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let (max_product_tmp, min_product_tmp) = (\n            max_product * arr[i],\n            min_product * arr[i],\n        );\n        max_product = max(arr[i], max(max_product_tmp, min_product_tmp));\n        min_product = min(arr[i], min(max_product_tmp, min_product_tmp));\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        let min_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        max_product = max_product_candidates.iter().max().unwrap().clone();\n        min_product = min_product_candidates.iter().min().unwrap().clone();\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let prev_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * prev_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_prod = arr[0];\n    let mut min_prod = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_prod_prev = max_prod;\n        max_prod = max(max(max_prod * curr, min_prod * curr), curr);\n        min_prod = min(min(max_prod_prev * curr, min_prod * curr), curr);\n        max_so_far = max(max_so_far, max_prod);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut max_product, &mut min_product);\n        }\n\n        max_product = std::cmp::max(arr[i], max_product * arr[i]);\n        min_product = std::cmp::min(arr[i], min_product * arr[i]);\n\n        max_so_far = std::cmp::max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let temp_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * temp_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let prev_max = max_product;\n        let prev_min = min_product;\n\n        max_product = max(curr, max(curr * prev_max, curr * prev_min));\n        min_product = min(curr, min(curr * prev_max, curr * prev_min));\n\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut max_product = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_ending_here > max_product {\n            max_product = max_ending_here;\n        }\n    }\n\n    max_product",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 0;\n    let mut min_product = 0;\n    let mut max_so_far = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(1, min_product * arr[i]);\n        } else if arr[i] == 0 {\n            max_product = 0;\n            min_product = 0;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_product = max_product * i;\n            min_product = min(min_product * i, 1);\n        } else if i == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * i, 1);\n            min_product = temp * i;\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let current = arr[i];\n        let temp_max = max_product;\n        max_product = max(max(max_product * current, min_product * current), current);\n        min_product = min(min(temp_max * current, min_product * current), current);\n        result = max(result, max_product);\n    }\n    result",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(arr[i], max(max_product * arr[i], min_product * arr[i]));\n        min_product = min(arr[i], min(temp * arr[i], min_product * arr[i]));\n        result = max(result, max_product);\n    }\n    result",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for &x in arr.iter() {\n        if x > 0 {\n            max_ending_here = max_ending_here * x;\n            min_ending_here = min(min_ending_here * x, 1);\n        } else if x == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * x, 1);\n            min_ending_here = temp * x;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(curr, max(max_product * curr, min_product * curr));\n        min_product = min(curr, min(temp_max * curr, min_product * curr));\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let (max_product_, min_product_) = if arr[i] < 0 {\n            (min_product * arr[i], max_product * arr[i])\n        } else {\n            (max_product * arr[i], min_product * arr[i])\n        };\n\n        max_product = max(max_product_, arr[i]);\n        min_product = min(min_product_, arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let temp = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![curr, max_product * curr, min_product * curr];\n        let min_product_candidates = vec![curr, max_product * curr, min_product * curr];\n        max_product = max_product_candidates.iter().max().unwrap().clone();\n        min_product = min_product_candidates.iter().min().unwrap().clone();\n        result = max(result, max_product);\n    }\n    result",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_product = max_product * i;\n            min_product = min(min_product * i, 1);\n        } else if i == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * i, 1);\n            min_product = temp * i;\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        let min_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(\n            max(max_product * curr, min_product * curr),\n            curr,\n        );\n        min_product = min(\n            min(temp_max * curr, min_product * curr),\n            curr,\n        );\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product;\n            max_product = min_product;\n            min_product = temp;\n        }\n\n        max_product = max(arr[i], max_product * arr[i]);\n        min_product = min(arr[i], min_product * arr[i]);\n\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_so_far = arr[0];\n    let mut min_so_far = arr[0];\n    let mut max_ending_here = arr[0];\n    let mut min_ending_here = arr[0];\n    let mut max_product = arr[0];\n\n    for i in 1..arr.len() {\n        max_ending_here = max(\n            max(max_ending_here * arr[i], min_ending_here * arr[i]),\n            arr[i],\n        );\n        min_ending_here = min(\n            min(max_so_far * arr[i], min_so_far * arr[i]),\n            arr[i],\n        );\n        max_product = max(max_product, max_ending_here);\n    }\n    max_product",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_prev = max_product;\n        max_product = max(curr, max(curr * max_product_prev, curr * min_product));\n        min_product = min(curr, min(curr * max_product_prev, curr * min_product));\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_ending_here = 1;\n    let mut result = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_ending_here > result {\n            result = max_ending_here;\n        }\n    }\n\n    result",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_new = max(curr, max(curr * max_product, curr * min_product));\n        let min_product_new = min(curr, min(curr * max_product, curr * min_product));\n        max_product = max_product_new;\n        min_product = min_product_new;\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_prod = arr[0];\n    let mut min_prod = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_prod_candidate = max(curr, max(curr * max_prod, curr * min_prod));\n        let min_prod_candidate = min(curr, min(curr * max_prod, curr * min_prod));\n        max_prod = max_prod_candidate;\n        min_prod = min_prod_candidate;\n        max_so_far = max(max_so_far, max_prod);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for &x in arr.iter() {\n        if x > 0 {\n            max_ending_here = max_ending_here * x;\n            min_ending_here = min(min_ending_here * x, 1);\n        } else if x == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * x, 1);\n            min_ending_here = temp * x;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut max_product, &mut min_product);\n        }\n\n        max_product = std::cmp::max(arr[i], max_product * arr[i]);\n        min_product = std::cmp::min(arr[i], min_product * arr[i]);\n\n        max_so_far = std::cmp::max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * temp_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut result = arr[0];\n\n    for i in 1..arr.len() {\n        let current = arr[i];\n        let max_product_copy = max_product;\n        let min_product_copy = min_product;\n\n        max_product = max(\n            max(max_product_copy * current, min_product_copy * current),\n            current,\n        );\n        min_product = min(\n            min(max_product_copy * current, min_product_copy * current),\n            current,\n        );\n\n        result = max(result, max_product);\n    }\n\n    result",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in arr {\n        if i > 0 {\n            max_ending_here = max_ending_here * i;\n            min_ending_here = min(min_ending_here * i, 1);\n        } else if i == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * i, 1);\n            min_ending_here = temp * i;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(arr[i], max(arr[i] * max_product, arr[i] * min_product));\n        min_product = min(arr[i], min(arr[i] * temp, arr[i] * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut curr_max = max_product;\n        let mut curr_min = min_product;\n\n        max_product = max(\n            max(curr_max * arr[i], curr_min * arr[i]),\n            arr[i] as isize,\n        );\n        min_product = min(\n            min(curr_max * arr[i], curr_min * arr[i]),\n            arr[i] as isize,\n        );\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut min_product = 1;\n    let mut max_product = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * temp_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * temp_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let temp_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * temp_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let mut temp_max = max_product;\n        max_product = max(max(max_product * curr, min_product * curr), curr);\n        min_product = min(min(temp_max * curr, min_product * curr), curr);\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 0;\n    let mut min_product = 0;\n    let mut max_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(1, min_product * arr[i]);\n        } else if arr[i] == 0 {\n            max_product = 0;\n            min_product = 0;\n        } else {\n            let temp = max_product;\n            max_product = max(1, min_product * arr[i]);\n            min_product = temp * arr[i];\n        }\n        if max_product > max_so_far {\n            max_so_far = max_product;\n        }\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut max_product, &mut min_product);\n        }\n        max_product = std::cmp::max(arr[i], max_product * arr[i]);\n        min_product = std::cmp::min(arr[i], min_product * arr[i]);\n        max_so_far = std::cmp::max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let temp_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * temp_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        return 0;\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let prev_max = max_product;\n        max_product = max(curr, max(curr * max_product, curr * min_product));\n        min_product = min(curr, min(curr * prev_max, curr * min_product));\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    if flag == 0 && max_so_far == 1 {\n        0\n    } else {\n        max_so_far\n    }",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let curr = arr[i];\n        let max_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n        let min_product_candidates = vec![\n            curr,\n            curr * max_product,\n            curr * min_product,\n        ];\n\n        max_product = *max_product_candidates.iter().max().unwrap();\n        min_product = *min_product_candidates.iter().min().unwrap();\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let mut temp = max_product;\n        max_product = max(max(arr[i], max_product * arr[i]), min_product * arr[i]);\n        min_product = min(min(arr[i], temp * arr[i]), min_product * arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_ending_here = 1;\n    let mut min_ending_here = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n    for i in 1..arr.len() {\n        let max_product_copy = max_product;\n        max_product = max(max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = min(min(max_product_copy * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = max(max_so_far, max_product);\n    }\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            std::mem::swap(&mut max_product, &mut min_product);\n        }\n\n        max_product = std::cmp::max(arr[i], max_product * arr[i]);\n        min_product = std::cmp::min(arr[i], min_product * arr[i]);\n\n        max_so_far = std::cmp::max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = 1;\n    let mut min_product = 1;\n    let mut max_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i];\n            min_product = min(min_product * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            let temp = max_product;\n            max_product = max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n\n        if max_so_far < max_product {\n            max_so_far = max_product;\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = 1;\n    let mut min_so_far = 1;\n    let mut max_product = 1;\n    let mut flag = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n            flag = 1;\n        } else if arr[i] == 0 {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_product < max_so_far {\n            max_product = max_so_far;\n        }\n    }\n\n    if flag == 0 && max_product == 1 {\n        return 0;\n    }\n\n    max_product",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let (max_product_prev, min_product_prev) = (max_product, min_product);\n        max_product = max(\n            max(max_product_prev * arr[i], min_product_prev * arr[i]),\n            arr[i] as isize,\n        );\n        min_product = min(\n            min(max_product_prev * arr[i], min_product_prev * arr[i]),\n            arr[i] as isize,\n        );\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far",
    "    let mut max_product = arr[0];\n    let mut min_product = arr[0];\n    let mut max_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product;\n            max_product = min_product;\n            min_product = temp;\n        }\n\n        max_product = max(arr[i], max_product * arr[i]);\n        min_product = min(arr[i], min_product * arr[i]);\n\n        max_so_far = max(max_so_far, max_product);\n    }\n\n    max_so_far"
  ]
}