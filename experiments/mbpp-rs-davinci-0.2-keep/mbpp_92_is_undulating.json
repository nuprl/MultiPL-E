{
  "name": "mbpp_92_is_undulating",
  "language": "rs",
  "prompt": "/// Write a function to check whether the given number is undulating or not.\nfn is_undulating(n: isize) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = is_undulating;\n    assert_eq!(candidate(1212121), true);\n    assert_eq!(candidate(1991), false);\n    assert_eq!(candidate(121), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut n = n;\n    let mut last_digit = n % 10;\n    n /= 10;\n    let mut is_increasing = true;\n    while n > 0 {\n        let digit = n % 10;\n        if is_increasing {\n            if digit > last_digit {\n                return false;\n            }\n        } else {\n            if digit < last_digit {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    true",
    "    let mut n = n;\n    let mut last_digit = n % 10;\n    n /= 10;\n    let mut is_increasing = true;\n    while n > 0 {\n        let digit = n % 10;\n        if is_increasing && digit > last_digit {\n            return false;\n        } else if !is_increasing && digit < last_digit {\n            return false;\n        }\n        last_digit = digit;\n        is_increasing = !is_increasing;\n        n /= 10;\n    }\n    true",
    "    let mut n = n;\n    let mut prev = n % 10;\n    n /= 10;\n    let mut curr = n % 10;\n    n /= 10;\n    let mut next = n % 10;\n    n /= 10;\n    let mut is_increasing = prev < curr;\n    let mut is_decreasing = prev > curr;\n    while n > 0 {\n        prev = curr;\n        curr = next;\n        next = n % 10;\n        n /= 10;\n        if is_increasing && curr > next {\n            is_increasing = false;\n            is_decreasing = true;\n        } else if is_decreasing && curr < next {\n            is_increasing = true;\n            is_decreasing = false;\n        } else {\n            return false;\n        }\n    }\n    true",
    "    let mut n = n;\n    let mut prev_digit = n % 10;\n    n /= 10;\n    let mut curr_digit = n % 10;\n    n /= 10;\n    let mut is_increasing = curr_digit > prev_digit;\n    while n > 0 {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if is_increasing && curr_digit > prev_digit {\n            return false;\n        }\n        if !is_increasing && curr_digit < prev_digit {\n            return false;\n        }\n        is_increasing = !is_increasing;\n    }\n    true",
    "    let mut n = n;\n    let mut prev = n % 10;\n    n /= 10;\n    while n > 0 {\n        let curr = n % 10;\n        if prev == curr {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    true",
    "    let mut n = n;\n    let mut last_digit = n % 10;\n    n /= 10;\n    let mut is_increasing = true;\n    while n > 0 {\n        let digit = n % 10;\n        if is_increasing {\n            if digit > last_digit {\n                return false;\n            }\n        } else {\n            if digit < last_digit {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    true",
    "    let mut digits = digits(n);\n    let mut last = digits.pop().unwrap();\n    let mut last_was_odd = last % 2 == 1;\n    while let Some(d) = digits.pop() {\n        let is_odd = d % 2 == 1;\n        if is_odd == last_was_odd {\n            return false;\n        }\n        last_was_odd = is_odd;\n        last = d;\n    }\n    true",
    "    let mut n = n;\n    let mut prev = n % 10;\n    n /= 10;\n    while n > 0 {\n        let curr = n % 10;\n        if prev == curr {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    true",
    "    let mut n = n;\n    let mut last_digit = n % 10;\n    n /= 10;\n    let mut is_increasing = true;\n    while n > 0 {\n        let digit = n % 10;\n        if is_increasing {\n            if digit > last_digit {\n                return false;\n            }\n        } else {\n            if digit < last_digit {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    true",
    "    let s = n.to_string();\n    let mut i = 0;\n    let mut j = s.len() - 1;\n    while i < j {\n        if s.chars().nth(i) != s.chars().nth(j) {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    true",
    "    let mut n = n;\n    let mut prev = n % 10;\n    n /= 10;\n    while n > 0 {\n        let curr = n % 10;\n        if prev == curr {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    true",
    "    let s = n.to_string();\n    let mut last_char = ' ';\n    let mut last_diff = 0;\n    for c in s.chars() {\n        if last_char != ' ' {\n            let diff = (c as isize) - (last_char as isize);\n            if last_diff == 0 {\n                last_diff = diff;\n            } else if last_diff != diff {\n                return false;\n            }\n        }\n        last_char = c;\n    }\n    true",
    "    let mut digits = Vec::new();\n    let mut n = n;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    digits.reverse();\n    for i in 0..digits.len() - 2 {\n        if digits[i] == digits[i + 1] {\n            return false;\n        }\n    }\n    true",
    "    let mut n = n;\n    let mut prev_digit = n % 10;\n    n /= 10;\n    let mut prev_diff = 0;\n    while n > 0 {\n        let digit = n % 10;\n        let diff = digit - prev_digit;\n        if prev_diff == 0 {\n            prev_diff = diff;\n        } else if prev_diff != diff {\n            return false;\n        }\n        prev_digit = digit;\n        n /= 10;\n    }\n    true",
    "    let mut n = n;\n    let mut last_digit = n % 10;\n    n /= 10;\n    let mut is_increasing = true;\n    while n > 0 {\n        let digit = n % 10;\n        if is_increasing {\n            if digit > last_digit {\n                return false;\n            }\n        } else {\n            if digit < last_digit {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    true",
    "    let mut n = n;\n    let mut prev_digit = n % 10;\n    n /= 10;\n    let mut prev_diff = 0;\n    while n > 0 {\n        let digit = n % 10;\n        let diff = digit - prev_digit;\n        if diff == prev_diff {\n            return false;\n        }\n        prev_diff = diff;\n        prev_digit = digit;\n        n /= 10;\n    }\n    true",
    "    let mut n = n;\n    let mut prev_digit = n % 10;\n    n /= 10;\n    let mut prev_diff = 0;\n    while n > 0 {\n        let digit = n % 10;\n        let diff = prev_digit - digit;\n        if prev_diff != 0 && diff != prev_diff {\n            return false;\n        }\n        prev_diff = diff;\n        prev_digit = digit;\n        n /= 10;\n    }\n    true",
    "    let mut n = n;\n    let mut last_digit = n % 10;\n    n /= 10;\n    let mut is_increasing = true;\n    while n > 0 {\n        let digit = n % 10;\n        if is_increasing {\n            if digit > last_digit {\n                return false;\n            }\n        } else {\n            if digit < last_digit {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    true",
    "    let mut n = n;\n    let mut last_digit = n % 10;\n    let mut increasing = true;\n\n    while n > 0 {\n        n /= 10;\n        let digit = n % 10;\n        if digit < last_digit {\n            increasing = false;\n        } else if digit > last_digit {\n            if !increasing {\n                return false;\n            }\n            increasing = true;\n        }\n        last_digit = digit;\n    }\n\n    true",
    "    let mut n = n;\n    let mut prev_digit = n % 10;\n    n /= 10;\n    let mut prev_diff = 0;\n    while n > 0 {\n        let digit = n % 10;\n        let diff = digit - prev_digit;\n        if prev_diff != 0 && diff != prev_diff {\n            return false;\n        }\n        prev_diff = diff;\n        prev_digit = digit;\n        n /= 10;\n    }\n    true"
  ]
}