{
  "name": "mbpp_471_find_remainder",
  "language": "rs",
  "prompt": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut res = 1;\n    for i in arr {\n        res = (res * (i % n)) % n;\n    }\n    res\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut remainder = 1;\n    for i in arr {\n        remainder = (remainder * (i % n)) % n;\n    }\n    remainder\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result: isize = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * (i % n)) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * (i % n)) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product: isize = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product *= i;\n    }\n    product % n\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, &x| acc * x % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod: isize = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * (i % n)) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, &x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    arr.iter().fold(1, |acc, x| (acc * x) % n)\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product: isize = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result: isize = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut product = 1;\n    for i in arr {\n        product = (product * i) % n;\n    }\n    product\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut prod = 1;\n    for i in arr {\n        prod = (prod * i) % n;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut res = 1;\n    for i in 0..arr.len() {\n        res = (res * (arr[i] % n)) % n;\n    }\n    res\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    let mut result = 1;\n    for i in arr {\n        result = (result * i) % n;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}