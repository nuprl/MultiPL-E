{
  "language": "scala",
  "name": "HumanEval_8_sum_product",
  "results": [
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val product = numbers.foldLeft(1l)((product, number) => product * number)\n        val sum = numbers.foldLeft(0l)((sum, number) => sum + number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l) { (sum, number) => sum + number }\n        val product = numbers.foldLeft(1l) { (product, number) => product * number }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l) { (sum, number) => sum + number }\n        val product = numbers.foldLeft(1l) { (product, number) => product * number }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpricrrr7a.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpricrrr7a.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpricrrr7a.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpricrrr7a.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxwdl0ag.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxwdl0ag.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804139
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n        val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659803960
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n        val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659803960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp33alebit.scala:13:33 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Reassignment to val sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp33alebit.scala:14:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Reassignment to val product\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010035
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)((sum, number) => sum + number)\n        val product = numbers.foldLeft(1l)((product, number) => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val product = numbers.foldLeft(1l)((product, number) => product * number)\n        val sum = numbers.foldLeft(0l)((sum, number) => sum + number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpricrrr7a.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpricrrr7a.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { x => sum += x; product *= x }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqeh7fbje.scala:13:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach { \u001b[36mx\u001b[0m => sum += x; product *= x }\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqeh7fbje.scala:13:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach { \u001b[36mx\u001b[0m => sum += x; product *= x }\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpricrrr7a.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpricrrr7a.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { n =>\n            sum += n\n            product *= n\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph8om7eme.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += n\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph8om7eme.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= n\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxwdl0ag.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxwdl0ag.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804139
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)((sum, number) => sum + number)\n        val product = numbers.foldLeft(1l)((product, number) => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n        val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659803960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)((sum, number) => sum + number)\n        val product = numbers.foldLeft(1l)((product, number) => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => {\n            sum += n\n            product *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_4tj8w3n.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += n\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_4tj8w3n.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= n\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { x =>\n            sum += x\n            product *= x\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyogsu446.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += x\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyogsu446.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= x\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)((sum, number) => sum + number)\n        val product = numbers.foldLeft(1l)((product, number) => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp33alebit.scala:13:33 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Reassignment to val sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp33alebit.scala:14:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Reassignment to val product\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010035
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n        val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659803960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l) { (sum, number) => sum + number }\n        val product = numbers.foldLeft(1l) { (product, number) => product * number }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxwdl0ag.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxwdl0ag.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804139
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n        val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659803960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { x => sum += x; product *= x }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqeh7fbje.scala:13:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach { \u001b[36mx\u001b[0m => sum += x; product *= x }\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqeh7fbje.scala:13:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach { \u001b[36mx\u001b[0m => sum += x; product *= x }\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { n =>\n            sum += n\n            product *= n\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph8om7eme.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += n\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph8om7eme.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= n\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number) => sum + number)\n        val product = numbers.foldLeft(1L)((product, number) => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val product = numbers.foldLeft(1l)((product, number) => product * number)\n        val sum = numbers.foldLeft(0l)((sum, number) => sum + number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val product = numbers.foldLeft(1L)(_ * _)\n        val sum = numbers.foldLeft(0L)(_ + _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l) { (sum, number) => sum + number }\n        val product = numbers.foldLeft(1l) { (product, number) => product * number }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n        val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659803960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcs91x_um.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum = sum + n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxoiu0xw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product = product * n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8ndklvtm.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8ndklvtm.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value *= is not a member of Long - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum = sum + x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpanbqvt0j.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product = product * x)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    Long\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010038
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *= x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz65kb9o.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mx\u001b[0m => product *= x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => {\n            sum += n\n            product *= n\n        })\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_4tj8w3n.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += n\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_4tj8w3n.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= n\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach { number =>\n            sum += number\n            product *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69a9dv7q.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            product *= number\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => sum += n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplzeaulnf.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mn\u001b[0m => product *= n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => sum += number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu3c8zzc.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        numbers.foreach(\u001b[36mnumber\u001b[0m => product *= number)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value *= is not a member of Int - did you mean product.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804055
    }
  ]
}