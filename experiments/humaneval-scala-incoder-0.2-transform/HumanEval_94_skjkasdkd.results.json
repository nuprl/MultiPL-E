{
  "language": "scala",
  "name": "HumanEval_94_skjkasdkd",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 = mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 = mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 = mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 = mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 = mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 = mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 = mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:25:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[3",
      "stdout": "",
      "timestamp": 1659804681
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp59gehw41.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp59gehw41.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1659804706
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpasor44gq.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804669
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgiyrdh_o.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804696
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmlb2u0uv.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlb2u0uv.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804682
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804665
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9ns93za0.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804709
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt_k_5c5p.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804691
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 = mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 = mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 = mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 = mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 = mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 = mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 = mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:25:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[3",
      "stdout": "",
      "timestamp": 1659804681
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj529lyl8.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeIndex = primes.indexOf(maxPrime)\n        val maxPrimeValue = maxPrime.toInt\n        val maxPrimeDigit = maxPrime % 10\n        val maxPrimeDigitValue = maxPrimeDigit % 10\n        val maxPrimeDigitSum = maxPrimeDigitValue + maxPrimeDigit\n        val maxPrimeDigitSumValue = maxPrimeDigitSum.toInt\n        val maxPrimeDigitSumDigit = maxPrimeDigitSumValue % 10\n        val maxPrimeDigitSumDigitValue = maxPrimeDigitSumDigit % 10\n        val maxPrimeDigitSumDigitSum = maxPrimeDigitSumDigitValue + maxPrimeDigitSumDigit\n        val maxPrimeDigitSumDigitSumValue = maxPrimeDigitSumDigitSum.toInt\n        val maxPrimeDigitSumDigitSumDigit = maxPrimeDigitSumDigitSumValue % 10\n        val maxPrimeDigitSumDigitSumDigitValue = maxPrimeDigitSumDigitSumDigit % 10\n        val maxPrimeDigitSumDigitSumDigitSum = maxPrimeDigitSumDigitSumDigitValue + maxPrimeDigitSumDigitSumDigit\n        val maxPrimeDigitSumDigitSumDigitSumValue = maxPrimeDigitSumDigitSumDigitSum.toInt\n        val maxPrimeDigitSumDigitSumDigitSumDigit = maxPrimeDigitSumDigitSumDigitSumValue % 10\n        val maxPrimeDigitSumDigitSumDigitSumDigitValue = maxPrimeDigitSumDigitSumDigitSumDigit % 10\n        val maxPrimeDigitSumDigitSumDigitSumDigitSum = maxPrimeDigitSumDigitSumDigitSumDigitValue + maxPrimeDigitSumDigitSumDigitSumDigit\n        val maxPrimeDigitSumDigitSumDigitSumDigitSumValue = maxPrimeDigitSumDigitSumDigitSumDigitSum.toInt\n        val maxPrimeDigitSumDigitSumDigitSumDigitSumDigit = maxPrimeDigitSumDigitSumDigitSumDigitSumValue % 10\n        val maxPrimeDigitSumDigitSumDigitSumDigitSumDigitValue = maxPrimeDigitSumDigitSumDigitSumDigitSumDigit % 10\n        val maxPrimeDigitSumDigitSumDigitSumDigitSumDigitSum = maxPrimeDigitSum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9u4ohalz.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9u4ohalz.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^",
      "stdout": "",
      "timestamp": 1659804658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesSet = primes.toSet\n        val primesSetSize = primesSet.size\n        val primesSetIterator = primesSet.iterator\n        val primesSetIteratorSize = primesSetIterator.size\n        val primesSetIteratorIterator = primesSetIterator.iterator\n        val primesSetIteratorIteratorIterator = primesSetIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj7awk1mh.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj7awk1mh.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\u001b[0m = primesSetIteratorIteratorIterator.iterator\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mprimesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj7awk1mh.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659804953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        val maxPrimeDigits = maxPrime.toString.toInt\n        val maxPrimeSumOfDigits = sumOfDigits + maxPrimeDigits\n        val maxPrimeSumOfDigits2 = maxPrimeSumOfDigits * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits3 = maxPrimeSumOfDigits2 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits4 = maxPrimeSumOfDigits3 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits5 = maxPrimeSumOfDigits4 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits6 = maxPrimeSumOfDigits5 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits7 = maxPrimeSumOfDigits6 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits8 = maxPrimeSumOfDigits7 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits9 = maxPrimeSumOfDigits8 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits10 = maxPrimeSumOfDigits9 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits11 = maxPrimeSumOfDigits10 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits12 = maxPrimeSumOfDigits11 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits13 = maxPrimeSumOfDigits12 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits14 = maxPrimeSumOfDigits13 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits15 = maxPrimeSumOfDigits14 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits16 = maxPrimeSumOfDigits15 * maxPrimeSumOfDigits\n        val maxPrimeSumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaf21wf49.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaf21wf49.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val maxPrime = primes.max\n        val maxPrimeSet = maxPrime.toSet\n        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwz09g_b0.scala:23:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSet\u001b[0m = maxPrime.toSet\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value toSet is not a member of Long - did you mean maxPrime.toInt?\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010221
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd9puij47.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd9puij47.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpum5il2o6.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzlbogjyv.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlbogjyv.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeDigit = maxPrime.digits.sum\n        val maxPrimeDigits = maxPrimeDigit.toString\n        val maxPrimeSum = maxPrimeDigit.toLong\n        val maxPrimeSumDigits = maxPrimeSum.toString\n        val maxPrimeSumDigit = maxPrimeSum.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = maxPrimeSumDigit.toString\n        val maxPrimeSumDigit = maxPrimeSumDigit.digits.sum\n        val maxPrimeSumDigits = max\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps2sm9o5j.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSumDigits\u001b[0m = maxPrimeSumDigit.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSumDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSumDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps2sm9o5j.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSumDigit\u001b[0m = maxPrimeSumDigit.digits.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSumDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSumDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps2sm9o5j.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSumDigits\u001b[0m = maxPrimeSumDigit.toString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSumDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSumDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps2sm9o5j.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSumDigit\u001b[0m = maxPrimeSumDigit.digits.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSumDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSumDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps2sm9o5j.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zhftd5d.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zhftd5d.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 409\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxi5imp_t.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxi5imp_t.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptdenn_v_.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptdenn_v_.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOf\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_ovjmbft.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ovjmbft.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msumOfDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35msumOfDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ovjmbft.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msumOfDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35msumOfDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ovjmbft.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msumOfDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35msumOfDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ovjmbft.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val largestPrime = primes.max\n        val largestPrimeDigits = largestPrime.toString.toList.map(_.toInt)\n        val sumOfDigits = largestPrimeDigits.sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2quo0md0.scala:28)\n\tat Problem.main(tmp2quo0md0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^",
      "stdout": "",
      "timestamp": 1659804658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph1a3anyy.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph1a3anyy.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmfwkds3p.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfwkds3p.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804665
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt_k_5c5p.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804691
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeIndex = primes.indexOf(maxPrime)\n        val sumOfDigits = maxPrime.toString.toLong.digits.sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9gn0cfuo.scala:24:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = maxPrime.toString.toLong.digits.sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value digits is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010221
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp1ieqiha.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1ieqiha.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp8jyqgq9h.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => math.pow(10, x)).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsa5p882y.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sumOfDigits + maxPrime\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Double\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010221
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 183 == 0).filter(_ % 191 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 243 == 0).filter(_ % 247 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 283 == 0).filter(_ % 289 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 321 == 0).filter(_ % 323 == 0).filter(_ % 327 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvrxo2ign.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrxo2ign.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m183\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804665
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeDigit = maxPrime % 10\n        val maxPrimeDigitSum = maxPrimeDigit.toLong\n        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits + maxPrimeDigitSum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmpuoasz_nx.scala:25)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpuoasz_nx.scala:25)\n\tat Problem$.main(tmpuoasz_nx.scala:29)\n\tat Problem.main(tmpuoasz_nx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj529lyl8.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9ns93za0.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804709
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesCount = primes.count()\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpw3hgsbmn.scala:21:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesCount\u001b[0m = primes.count()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter p of \u001b[33mmethod\u001b[0m \u001b[35mcount\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOnceOps\u001b[0m: (p: Long => Boolean): Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw3hgsbmn.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp88htse6e.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88htse6e.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfzjxgekf.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_ % 209 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr5rbv2ae.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr5rbv2ae.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.ListBuffer[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:25:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[3",
      "stdout": "",
      "timestamp": 1660010232
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9cvwc6bi.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9cvwc6bi.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010230
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp63kxgy59.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010234
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^",
      "stdout": "",
      "timestamp": 1659804658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4y65upey.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010235
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4ek86akx.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ek86akx.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010235
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val maxPrime = primes.max\n        val maxPrimeSet = maxPrime.toSet\n        val maxPrimeSum = maxPrimeSet.sum\n        val maxPrimeSumSet = maxPrimeSum.toSet\n        val maxPrimeSumSetSum = maxPrimeSumSet.toSet.sum\n        val maxPrimeSumSetSumSet = maxPrimeSumSetSum.toSet\n        val maxPrimeSumSetSumSetSum = maxPrimeSumSetSumSet.toSet.sum\n        val maxPrimeSumSetSumSetSumSet = maxPrimeSumSetSumSetSum.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSum = maxPrimeSumSetSumSetSumSet.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSet = maxPrimeSumSetSumSetSumSetSum.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSetSum = maxPrimeSumSetSumSetSumSetSumSet.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSetSumSet = maxPrimeSumSetSumSetSumSetSumSet.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSetSumSetSum = maxPrimeSumSetSumSetSumSetSumSetSum.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSetSumSetSum = maxPrimeSumSetSumSetSumSetSumSetSumSet.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSetSumSetSumSet = maxPrimeSumSetSumSetSumSetSumSetSumSetSum.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSetSumSetSumSetSum = maxPrimeSumSetSumSetSumSetSumSetSumSetSumSet.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSetSumSetSumSetSumSet = maxPrimeSumSetSumSetSumSetSumSetSumSetSumSet.toSet.sum\n        val maxPrimeSumSetSumSetSumSetSumSetSumSetSumSetSumSetSumSet = maxPrimeSumSetSumSetSumSetSumSetSumSetSumSet\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9afhhezv.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSumSetSumSetSumSetSumSetSumSetSum\u001b[0m = maxPrimeSumSetSumSetSumSetSumSetSumSet.toSet.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSumSetSumSetSumSetSumSetSumSetSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSumSetSumSetSumSetSumSetSumSetSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9afhhezv.scala:23:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSet\u001b[0m = maxPrime.toSet\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value toSet is not a member of Long - did you mean maxPrime.toInt?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9afhhezv.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010235
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val primesSetSize = primesSet.size\n        val maxPrime = primes.max\n        val maxPrimeSize = maxPrime.toString.length\n        val maxPrimeSet = maxPrime.toSet\n        val maxPrimeSetSize = maxPrimeSet.size\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSetSize = maxPrimeSetSize.toString.length\n        val maxPrimeSet\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj02f3bcg.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj02f3bcg.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSetSize\u001b[0m = maxPrimeSetSize.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj02f3bcg.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSetSize\u001b[0m = maxPrimeSetSize.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj02f3bcg.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSetSize\u001b[0m = maxPrimeSetSize.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj02f3bcg.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSetSize\u001b[0m = maxPrimeSetSize.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote tha",
      "stdout": "",
      "timestamp": 1660010235
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.ListBuffer[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k8gg3ku.scala:25:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[3",
      "stdout": "",
      "timestamp": 1660010232
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_35u3igk.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010231
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd9puij47.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd9puij47.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpw4dey7r4.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m213\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010235
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptdenn_v_.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptdenn_v_.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 423 == 0).filter(_ % 429 == 0).filter\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2eqysocv.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010235
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm93tb1tp.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010230
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp88htse6e.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88htse6e.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbei03t35.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 39\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm79ndprj.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm79ndprj.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 361 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt5pmx0a6.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt5pmx0a6.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_ % 419 == 0).filter\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprb_p0m98.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010235
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmfwkds3p.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfwkds3p.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp94k7ho73.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp94k7ho73.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => math.pow(10, x)).sum\n        sumOfDigits + maxPrime.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq55zl0_t.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sumOfDigits + maxPrime.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Double\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010234
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeIndex = primes.indexWhere(_ == maxPrime)\n        val maxPrimeDigit = maxPrime % 10\n        val maxPrimeDigitCount = maxPrimeDigit.size\n        val maxPrimeDigitSum = maxPrimeDigit.sum\n        val maxPrimeDigitSumCount = maxPrimeDigitSum.size\n        val maxPrimeDigitSumSum = maxPrimeDigitSum.sum\n        val maxPrimeDigitSumSumCount = maxPrimeDigitSumSum.size\n        val maxPrimeDigitSumSumSum = maxPrimeDigitSumSum.sum\n        val maxPrimeDigitSumSumSumCount = maxPrimeDigitSumSumSum.size\n        val maxPrimeDigitSumSumSumSum = maxPrimeDigitSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumCount = maxPrimeDigitSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSum = maxPrimeDigitSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumCount = maxPrimeDigitSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSum = maxPrimeDigitSumSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumSumCount = maxPrimeDigitSumSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSumSum = maxPrimeDigitSumSumSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumSumSumCount = maxPrimeDigitSumSumSumSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSumSumSum = maxPrimeDigitSumSumSumSumSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumSumSumSumCount = maxPrimeDigitSumSumSumSumSumSumSumSumSumCount.size\n        val maxPrimeDigitSumSumSumSumSumSumSumSumSum = maxPrimeDigitSumSumSumSumSumSumSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumSumSumSumSumCount = maxPrimeDigitSumSumSumSumSum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptmilkswg.scala:25:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitCount\u001b[0m = maxPrimeDigit.size\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value size is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptmilkswg.scala:26:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitSum\u001b[0m = maxPrimeDigit.sum\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value sum is not a member of Long\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmptmilkswg.scala:40:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitSumSumSumSumSumSumSumSum\u001b[0m = maxPrimeDigitSumSumSumSumSumSumSumSum.sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m        Recursive \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeDigitSumSumSumSumSumSumSumSum\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptmilkswg.scala:42:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitSumSumSumSumSumSumSumSumSum\u001b[0m = maxPrimeDigitSumSumSumSumSumSumSumSumSumSum.sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: maxPrimeDigitSumSumSumSumSumSumSumSumSumSum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptmilkswg.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo5zc35ld.scala:22:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 = mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 = mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 = mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 = mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 = mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 = mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 = mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:25:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[3",
      "stdout": "",
      "timestamp": 1659804681
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n        val primeSum = primes.map(x => x.toString.toInt).sum\n        primeSum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyj9jgip_.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010232
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpasor44gq.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804669
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6f_p9kfl.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6f_p9kfl.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9ns93za0.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804709
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeIndex = primes.indexOf(maxPrime)\n        val maxPrimeDigit = maxPrime.toString.toInt\n        val maxPrimeDigitCount = maxPrimeDigit.size\n        val maxPrimeDigitSum = maxPrimeDigit.reduceLeft((x, y) => x + y)\n        val maxPrimeDigitSumCount = maxPrimeDigitSum.size\n        val maxPrimeDigitSumSum = maxPrimeDigitSum.reduceLeft((x, y) => x + y)\n        val maxPrimeDigitSumSumCount = maxPrimeDigitSumSum.size\n        val maxPrimeDigitSumSumSum = maxPrimeDigitSumSum.reduceLeft((x, y) => x + y)\n        val maxPrimeDigitSumSumSumCount = maxPrimeDigitSumSumSum.size\n        val maxPrimeDigitSumSumSumSum = maxPrimeDigitSumSumSum.reduceLeft((x, y) => x + y)\n        val maxPrimeDigitSumSumSumSumCount = maxPrimeDigitSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSum = maxPrimeDigitSumSumSumSum.reduceLeft((x, y) => x + y)\n        val maxPrimeDigitSumSumSumSumCount = maxPrimeDigitSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSum = maxPrimeDigitSumSumSumSumSum.reduceLeft((x, y) => x + y)\n        val maxPrimeDigitSumSumSumSumSumCount = maxPrimeDigitSumSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSum = maxPrimeDigitSumSumSumSumSumSum.reduceLeft((x, y) => x + y)\n        val maxPrimeDigitSumSumSumSumSumSumCount = maxPrimeDigitSumSumSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSumSum = maxPrimeDigitSumSumSumSumSumSumSum.reduceLeft((x, y) => x + y)\n        val maxPrimeDigitSumSumSumSumSumSumSumCount = maxPrimeDigitSumSumSumSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSumSumSum = maxPrimeDigitSumSumSumSumSumSumSumSumSum.reduceLeft((x, y) => x + \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpyx4olp45.scala:42:117 --------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitSumSumSumSumSumSumSumSum\u001b[0m = maxPrimeDigitSumSumSumSumSumSumSumSumSum.reduceLeft((\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyx4olp45.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitSumSumSumSumCount\u001b[0m = maxPrimeDigitSumSumSumSumSum.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeDigitSumSumSumSumCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeDigitSumSumSumSumCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyx4olp45.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitSumSumSumSumSumSum\u001b[0m = maxPrimeDigitSumSumSumSumSumSum.reduceLeft((\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeDigitSumSumSumSumSumSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeDigitSumSumSumSumSumSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyx4olp45.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[3",
      "stdout": "",
      "timestamp": 1660010237
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeIndex = primes.indexOf(maxPrime)\n        val sumOfDigits = lst.map(x => x.toInt).sum\n        val sumOfDigitsOfMaxPrime = sumOfDigits / maxPrime\n        val maxPrimeDigits = lst.map(x => x.toInt).take(maxPrimeIndex).sum\n        val maxPrimeDigitsOfMaxPrime = maxPrimeDigits / maxPrime\n        val maxPrimeDigitsOfMaxPrimeAndSumOfDigits = maxPrimeDigitsOfMaxPrime + sumOfDigitsOfMaxPrime\n        val maxPrimeDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrime = maxPrimeDigitsOfMaxPrimeAndSumOfDigits / maxPrime\n        val maxPrimeDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigits = maxPrimeDigitsOfMaxPrimeAndSumOfDigits / maxPrime\n        val maxPrimeDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrime = maxPrimeDigitsOfMaxPrimeAndSumOfDigits / maxPrime\n        val maxPrimeDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigits = maxPrimeDigitsOfMaxPrimeAndSumOfDigits / maxPrime\n        val maxPrimeDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrime = maxPrimeDigitsOfMaxPrimeAndSumOfDigits / maxPrime\n        val maxPrimeDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigits = maxPrimeDigitsOfMaxPrimeAndSumOfDigits / maxPrime\n        val maxPrimeDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOfDigitsOfMaxPrimeAndSumOf\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjqx6r4ua.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjqx6r4ua.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjqx6r4ua.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010235
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4q8vzgg.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4q8vzgg.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 209 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 231 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 361 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzb1rt9mu.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzb1rt9mu.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010244
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 183 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwe5hj45m.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe5hj45m.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m183\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010246
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesSet = primes.toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmp6lfjkptf.scala:23)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmp6lfjkptf.scala:23)\n\tat Problem$.main(tmp6lfjkptf.scala:27)\n\tat Problem.main(tmp6lfjkptf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010246
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val result = sumOfDigits + maxPrime.toString.toLong\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcn0uq7fh.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcn0uq7fh.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010241
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val largestPrime = mutable.Set[Long]()\n        val sumOfDigits = mutable.Set[Long]()\n        val primesCount = mutable.Set[Long]()\n        val largestPrimeCount = mutable.Set[Long]()\n        val sumOfDigitsCount = mutable.Set[Long]()\n        val primesCountCount = mutable.Set[Long]()\n        val largestPrimeCountCount = mutable.Set[Long]()\n        val sumOfDigitsCountCount = mutable.Set[Long]()\n        val primesCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCount = mutable.Set[Long]()\n        val sumOfDigitsCountCountCount = mutable.Set[Long]()\n        val primesCountCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCountCount = mutable.Set[Long]()\n        val sumOfDigitsCountCountCountCount = mutable.Set[Long]()\n        val primesCountCountCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCountCountCount = mutable.Set[Long]()\n        val sumOfDigitsCountCountCountCountCount = mutable.Set[Long]()\n        val primesCountCountCountCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCountCountCountCount = mutable.Set[Long]()\n        val sumOfDigitsCountCountCountCountCountCount = mutable.Set[Long]()\n        val primesCountCountCountCountCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCountCountCountCountCount = mutable.Set[Long]()\n        val sumOfDigitsCountCountCountCountCountCountCount = mutable.Set[Long]()\n        val primesCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n        val sumOfDigitsCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n        val primesCountCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1bhv7uok.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1bhv7uok.scala:21:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlargestPrime\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1bhv7uok.scala:22:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1bhv7uok.scala:23:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesCount\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1bhv7uok.scala:24:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlargestPrimeCount\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1bhv7uok.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 ",
      "stdout": "",
      "timestamp": 1660010245
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7n4bl0gh.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7n4bl0gh.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4q8vzgg.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4q8vzgg.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 231 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8savdfjh.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8savdfjh.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010248
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9ns93za0.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804709
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpg23o1tt6.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m213\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp94k7ho73.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp94k7ho73.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 361 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpuuzw2brt.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zhftd5d.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zhftd5d.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val largestPrime = mutable.Set[Long]()\n        val sumOfDigits = mutable.Set[Long]()\n        val primeSum = mutable.Set[Long]()\n        val primeSums = mutable.Set[Long]()\n        val primeSumsSet = mutable.Set[Long]()\n        val primeSumsSet2 = mutable.Set[Long]()\n        val primeSumsSet3 = mutable.Set[Long]()\n        val primeSumsSet4 = mutable.Set[Long]()\n        val primeSumsSet5 = mutable.Set[Long]()\n        val primeSumsSet6 = mutable.Set[Long]()\n        val primeSumsSet7 = mutable.Set[Long]()\n        val primeSumsSet8 = mutable.Set[Long]()\n        val primeSumsSet9 = mutable.Set[Long]()\n        val primeSumsSet10 = mutable.Set[Long]()\n        val primeSumsSet11 = mutable.Set[Long]()\n        val primeSumsSet12 = mutable.Set[Long]()\n        val primeSumsSet13 = mutable.Set[Long]()\n        val primeSumsSet14 = mutable.Set[Long]()\n        val primeSumsSet15 = mutable.Set[Long]()\n        val primeSumsSet16 = mutable.Set[Long]()\n        val primeSumsSet17 = mutable.Set[Long]()\n        val primeSumsSet18 = mutable.Set[Long]()\n        val primeSumsSet19 = mutable.Set[Long]()\n        val primeSumsSet20 = mutable.Set[Long]()\n        val primeSumsSet21 = mutable.Set[Long]()\n        val primeSumsSet22 = mutable.Set[Long]()\n        val primeSumsSet23 = mutable.Set[Long]()\n        val primeSumsSet24 = mutable.Set[Long]()\n        val primeSumsSet25 = mutable.Set[Long]()\n        val primeSumsSet26 = mutable.Set[Long]()\n        val primeSumsSet27 = mutable.Set[Long]()\n        val primeSumsSet28 = mutable.Set[Long]()\n        val primeSumsSet29 = mut\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hze1xje.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hze1xje.scala:21:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlargestPrime\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hze1xje.scala:22:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hze1xje.scala:23:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeSum\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hze1xje.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeSums\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hze1xje.scala:25:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mpr",
      "stdout": "",
      "timestamp": 1660010246
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_510iin4.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_510iin4.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val sumOfDigits = maxPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpffcaplu8.scala:23:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = maxPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvrfppw_n.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrfppw_n.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj529lyl8.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5hl7vxuj.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5hl7vxuj.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010248
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd9puij47.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd9puij47.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_ % 399 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw_e7mc5e.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_e7mc5e.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010248
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr315ndhh.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010244
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph1a3anyy.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph1a3anyy.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^",
      "stdout": "",
      "timestamp": 1659804658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804665
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 283 == 0).filter(_ % 289 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 343 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_ % 399 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpdr69ioae.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m227\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010248
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmlb2u0uv.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlb2u0uv.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804682
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toLong).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplg9do7oa.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010245
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7upxmfwl.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010245
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphqkpyjqg.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqkpyjqg.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010249
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zhftd5d.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zhftd5d.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val primesSet = primes.toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => primesSet.contains(x.toInt)).map(x => x.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb6wacot2.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010246
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpum5il2o6.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9e_8rbt9.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9e_8rbt9.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010251
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val maxPrime = primes.max\n        val maxPrimeSet = maxPrime.toSet\n        val sumOfDigits = lst.filter(_ % maxPrime).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkn6mo5y6.scala:23:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSet\u001b[0m = maxPrime.toSet\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value toSet is not a member of Long - did you mean maxPrime.toInt?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkn6mo5y6.scala:24:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(_ % maxPrime).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Long\n\u001b[31m   |\u001b[0m                                     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010252
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeDigit = maxPrime % 10\n        val maxPrimeDigitCount = maxPrimeDigit == 0 ? maxPrimeDigit : maxPrimeDigit - 1\n        val maxPrimeDigitSum = maxPrimeDigitCount * maxPrimeDigit\n        val maxPrimeDigitSumOfDigits = maxPrimeDigitSum.sum\n        val maxPrimeDigitSumOfDigitsCount = maxPrimeDigitSumOfDigits.length\n        val maxPrimeDigitSumOfDigitsSum = maxPrimeDigitSumOfDigitsCount * maxPrimeDigitSumOfDigits\n        val maxPrimeDigitSumOfDigitsSumOfDigits = maxPrimeDigitSumOfDigitsSum.sum\n        val maxPrimeDigitSumOfDigitsSumOfDigitsCount = maxPrimeDigitSumOfDigitsSumOfDigits.length\n        val maxPrimeDigitSumOfDigitsSumOfDigitsSum = maxPrimeDigitSumOfDigitsSumOfDigitsCount * maxPrimeDigitSumOfDigitsSumOfDigits\n        val maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsCount = maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigits.length\n        val maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSum = maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsCount * maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigits\n        val maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigits = maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigitsCount * maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigits\n        val maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigits = maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigitsCount * maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigits\n        val maxPrimeDigitSum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7dmpc6a.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt7dmpc6a.scala:24:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitCount\u001b[0m = maxPrimeDigit == \u001b[31m0\u001b[0m ? maxPrimeDigit : \u001b[35mmaxPrimeDigit\u001b[0m \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt7dmpc6a.scala:24:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitCount\u001b[0m = maxPrimeDigit == \u001b[31m0\u001b[0m ? maxPrimeDigit : \u001b[35mmaxPrimeDigit\u001b[0m \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          value ? is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt7dmpc6a.scala:32:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsCount\u001b[0m = maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigits.length\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt7dmpc6a.scala:34:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigits\u001b[0m = maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigitsCount * maxPrimeDigitSumOfDigitsSumOfDigitsSumOfDigitsSumOfDigits\n\u001b[31m\u001b[31m   |\u001b[0m   ",
      "stdout": "",
      "timestamp": 1660010254
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmfwkds3p.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfwkds3p.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zhftd5d.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zhftd5d.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^",
      "stdout": "",
      "timestamp": 1659804658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0ia1722x.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010253
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val largestPrime = primes.max\n        val largestPrimeDigits = largestPrime.toString.toList.map(_.toInt)\n        val largestPrimeSum = largestPrimeDigits.sum\n        largestPrimeSum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphr752b5t.scala:28)\n\tat Problem.main(tmphr752b5t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfzjxgekf.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^",
      "stdout": "",
      "timestamp": 1659804658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => math.pow(10, x)).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp294dk70y.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sumOfDigits + maxPrime\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Double\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010257
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqm1kn9_8.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm1kn9_8.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010259
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^",
      "stdout": "",
      "timestamp": 1659804658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpasor44gq.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804669
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 209 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 231 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 38\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl2vl8294.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl2vl8294.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010258
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpj5ijf2ef.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m213\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010259
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 259 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 279 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 319 == 0).filter(_ % 323 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 343 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 361 == 0).filter(_ % 363 == 0).filter(_ % 367\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpufxmini4.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpufxmini4.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt_k_5c5p.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804691
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesSet = primes.toSet\n        val primesSetSize = primesSet.size\n        val maxPrime = primes.max\n        val maxPrimeSet = maxPrime.toSet\n        val maxPrimeSetSize = maxPrimeSet.size\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrimeSetSize = maxPrimeSetSize.toLong\n        val maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3xz1y64v.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3xz1y64v.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSetSize\u001b[0m = maxPrimeSetSize.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3xz1y64v.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSetSize\u001b[0m = maxPrimeSetSize.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3xz1y64v.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSetSize\u001b[0m = maxPrimeSetSize.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3xz1y64v.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxPrimeSetSize\u001b[0m = maxPrimeSetSize.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxPrimeSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxPrimeSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel d",
      "stdout": "",
      "timestamp": 1660010259
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpum5il2o6.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpag7gztt0.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpag7gztt0.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val primesSetIterator = primesSet.iterator\n        val primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNext\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphydc1b3w.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSetIteratorNextNextNextNextNextNextNextNext\u001b[0m = primesSetIteratorNextNextNextNextNextNextNext.next\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mprimesSetIteratorNextNextNextNextNextNextNextNext is already defined as \u001b[33mvalue\u001b[0m \u001b[35mprimesSetIteratorNextNextNextNextNextNextNextNext\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphydc1b3w.scala:24:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSetIteratorNextNext\u001b[0m = primesSetIteratorNext.next\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value next is not a member of Long\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphydc1b3w.scala:33:72 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\u001b[0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphydc1b3w.scala:34:76 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\u001b[0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mprimesSetIteratorNextNextNextNextNex",
      "stdout": "",
      "timestamp": 1660010260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6f_p9kfl.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6f_p9kfl.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 259 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu9_yup5f.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9_yup5f.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010261
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 243 == 0).filter(_ % 247 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_ % 273 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa5bz2m6_.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa5bz2m6_.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvrfppw_n.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrfppw_n.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zhftd5d.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zhftd5d.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmfwkds3p.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfwkds3p.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_k858hm4.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m201\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m207\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toLong).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplg9do7oa.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010245
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpxtmdz8ks.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010261
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9_vg0p67.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9_vg0p67.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010261
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804665
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 = mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 = mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 = mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 = mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 = mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 = mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 = mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.HashSet[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:25:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[3",
      "stdout": "",
      "timestamp": 1659804681
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 231 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 243 == 0).filter(_ % 247 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_ % 361 == 0).filter(_ % 36\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9gevmum1.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gevmum1.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010261
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptvua0y1i.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvua0y1i.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010262
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzlbogjyv.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlbogjyv.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_k858hm4.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m201\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m207\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphlfjnkyq.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m213\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010262
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmhse9xuz.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhse9xuz.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010262
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_k858hm4.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m201\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m207\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010260
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val sumOf\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_ovjmbft.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ovjmbft.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msumOfDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35msumOfDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ovjmbft.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msumOfDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35msumOfDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ovjmbft.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msumOfDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35msumOfDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ovjmbft.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9ns93za0.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804709
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4lup6ytv.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lup6ytv.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010262
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbei03t35.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010236
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zcava9b.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804660
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val primesSet = primes.toSet\n        val primesSetSize = primesSet.size\n        val primesSetIterator = primesSet.iterator\n        val primesSetIteratorSize = primesSetIterator.size\n        val primesSetIteratorIterator = primesSetIterator.iterator\n        val primesSetIteratorIteratorSize = primesSetIteratorIterator.size\n        val primesSetIteratorIteratorIterator = primesSetIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorSize = primesSetIteratorIteratorIterator.size\n        val primesSetIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIterator.size\n        val primesSetIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIteratorIterator.size\n        val primesSetIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp27da5ng8.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27da5ng8.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27da5ng8.scala:37:170 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\u001b[0m = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue iterator is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map As",
      "stdout": "",
      "timestamp": 1660010265
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppydgzom_.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppydgzom_.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010265
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpxtmdz8ks.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010261
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3u6wwp7o.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3u6wwp7o.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010266
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpilqd8zuk.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpilqd8zuk.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010266
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804665
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 259 == 0).filter(_ % 261 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 279 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 319 == 0).filter(_ % 323 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 377\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkps9044q.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkps9044q.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010267
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4q8vzgg.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4q8vzgg.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010239
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9cvwc6bi.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9cvwc6bi.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010230
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmfwkds3p.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfwkds3p.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val maxDigit = sumOfDigits / maxPrime\n        val sumOfDigits = sumOfDigits % maxPrime\n        sumOfDigits + maxDigit\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpaui73dq_.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = sumOfDigits % maxPrime\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msumOfDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35msumOfDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaui73dq_.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaui73dq_.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010266
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_ % 433 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmplp059o1q.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd80cud6i.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd80cud6i.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7n4bl0gh.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7n4bl0gh.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        val result = sumOfDigits + maxPrime.toString.toInt\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplo2s9q07.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplo2s9q07.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = lst.filter(\u001b[36mx\u001b[0m => isPrime(x)).map(\u001b[36mx\u001b[0m => x.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010266
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 231 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 361 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpimypwxi5.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpimypwxi5.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n        val primesSet = primes.toSet\n        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj529lyl8.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msumOfDigits\u001b[0m = largestPrime.map(_.toString.toInt).sum\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value map is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd9puij47.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd9puij47.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpm6osn4ae.scala:20:1770 -------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m191\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m193\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m197\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m199\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m211\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m223\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % ",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzlbogjyv.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlbogjyv.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010222
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7n4bl0gh.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7n4bl0gh.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m161\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m181\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010247
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmfwkds3p.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfwkds3p.scala:21:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010223
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet2\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet3\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet4\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^",
      "stdout": "",
      "timestamp": 1659804658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.ListBuffer[Long]()\n        val primesSet = mutable.Set[Long]()\n        val primesMap = mutable.Map[Long, Long]()\n        val primesSetMap = mutable.Map[Long, Long]()\n        val primesSetMap2 = mutable.Map[Long, Long]()\n        val primesSetMap3 = mutable.Map[Long, Long]()\n        val primesSetMap4 = mutable.Map[Long, Long]()\n        val primesSetMap5 = mutable.Map[Long, Long]()\n        val primesSetMap6 = mutable.Map[Long, Long]()\n        val primesSetMap7 = mutable.Map[Long, Long]()\n        val primesSetMap8 = mutable.Map[Long, Long]()\n        val primesSetMap9 = mutable.Map[Long, Long]()\n        val primesSetMap10 = mutable.Map[Long, Long]()\n        val primesSetMap11 = mutable.Map[Long, Long]()\n        val primesSetMap12 = mutable.Map[Long, Long]()\n        val primesSetMap13 = mutable.Map[Long, Long]()\n        val primesSetMap14 = mutable.Map[Long, Long]()\n        val primesSetMap15 = mutable.Map[Long, Long]()\n        val primesSetMap16 = mutable.Map[Long, Long]()\n        val primesSetMap17 = mutable.Map[Long, Long]()\n        val primesSetMap18 = mutable.Map[Long, Long]()\n        val primesSetMap19 = mutable.Map[Long, Long]()\n        val primesSetMap20 = mutable.Map[Long, Long]()\n        val primesSetMap21 = mutable.Map[Long, Long]()\n        val primesSetMap22 = mutable.Map[Long, Long]()\n        val primesSetMap23 = mutable.Map[Long, Long]()\n        val primesSetMap24 = mutable.Map[Long, Long]()\n        val primesSetMap25 = mutable.Map[Long, Long]()\n        val primesSetMap26 = mutable.Map[Long, Long]()\n        val primesSetMap27 = mutable.Map[Long, Long]()\n        val primesSetMap28 = mutable.Map[Long, Long]()\n        val primesSetMap29 = \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpi_2tpjdj.scala:51:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSetMap29\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_2tpjdj.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_2tpjdj.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSet\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_2tpjdj.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesMap\u001b[0m = mutable.Map[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_2tpjdj.scala:23:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesSetMap\u001b[0m = mutable.Map[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_2tpjdj.scala:24:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 259 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 279 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbllx8ve5.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbllx8ve5.scala:20:1767 ------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = lst.filter(_ % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m143\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m147\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m159\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m177\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m).filter(_ % \u001b[31",
      "stdout": "",
      "timestamp": 1660010268
    }
  ]
}