name: HumanEval_120_maximum
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long maxIndex\
    \ = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \           }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n    \
    \        if(arr.get(i) > max) {\n                result.add(max);\n          \
    \      max = arr.get(i);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr5kgys92.java:34: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = maxIndex; i < arr.size(); i++) {\n   \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) > max) {\n                max = arr.get(i);\n                maxIndex\
    \ = i;\n            }\n        }\n        result.add(max);\n        if (maxIndex\
    \ + 1 < arr.size()) {\n            for (int i = maxIndex + 1; i < arr.size();\
    \ i++) {\n                result.add(arr.get(i));\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphshojeti.java:36: error: incompatible types: possible lossy conversion\
    \ from long to int\n            for (int i = maxIndex + 1; i < arr.size(); i++)\
    \ {\n                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr.get(0);\n        long minValue\
    \ = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > maxValue) {\n                maxValue = arr.get(i);\n                maxIndex\
    \ = i;\n            }\n            if(arr.get(i) < minValue) {\n             \
    \   minValue = arr.get(i);\n                minIndex = i;\n            }\n   \
    \     }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ == maxValue) {\n                temp.add(arr.get(i));\n            }\n     \
    \       if(arr.get(i) == minValue) {\n                temp.add(arr.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < temp.size(); i++) {\n  \
    \          max = Math.max(max, temp.get(i));\n        }\n        for(int i = 0;\
    \ i < temp.size(); i++) {\n            min = Math.min(min, temp.get(i));\n   \
    \     }\n        for(int i = 0; i < temp.size(); i++) {\n            if(temp.get(i)\
    \ == maxValue) {\n                result.add(maxIndex);\n            }\n     \
    \       if(temp.get(i) == minValue) {\n                result.add(minIndex);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvb5m3f62.java:69)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        for\
    \ (long i : arr) {\n            if (i > max) {\n                max = i;\n   \
    \         }\n        }\n        long maxIndex = arr.indexOf(max);\n        if\
    \ (maxIndex == arr.size() - 1) {\n            result.add(max);\n        } else\
    \ {\n            for (long i = maxIndex + 1; i < arr.size(); i++) {\n        \
    \        if (arr.get(i) > max) {\n                    result.add(max);\n     \
    \               break;\n                }\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu2pl5031.java:37: error: no suitable method found for get(long)\n\
    \                if (arr.get(i) > max) {\n                       ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n/tmp/tmpu2pl5031.java:41: error: no suitable method\
    \ found for get(long)\n                result.add(arr.get(i));\n             \
    \                 ^\n    method List.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                result.add(max);\n        \
    \        result.add(arr.get(maxIndex));\n                break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkccjdsd1.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                result.add(temp);\n           \
    \ }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            temp\
    \ = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr.get(i);\n            if(temp > max) {\n                result.add(temp);\n\
    \            }\n        }\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpft3bif1n.java:131: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = \n \
    \   }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoqo6q06b.java:117: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpoqo6q06b.java:118: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpoqo6q06b.java:118: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpoqo6q06b.java:118:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpoqo6q06b.java:118: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpoqo6q06b.java:118:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpoqo6q06b.java:132: error: reached\
    \ end of file while parsing\n}\n ^\n/tmp/tmpoqo6q06b.java:133: error: reached\
    \ end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                result.add(temp);\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpad5cw5bh.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = 0;\n\
    \        long maxIndex = 0;\n        long minIndex = 0;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n     \
    \       min = Math.min(min, arr.get(i));\n            maxIndex = i;\n        \
    \    minIndex = i;\n        }\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            if(arr.get(i) == max) {\n                result.add(max);\n     \
    \           maxIndex = i;\n            }\n            if(arr.get(i) == min) {\n\
    \                result.add(min);\n                minIndex = i;\n           \
    \ }\n        }\n        if(maxIndex - minIndex == k) {\n            return result;\n\
    \        }\n        ArrayList<Long> left = new ArrayList<>();\n        ArrayList<Long>\
    \ right = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            if(maxIndex - minIndex == k - 1) {\n                result.add(arr.get(i));\n\
    \                return result;\n            }\n            if(arr.get(i) < min)\
    \ {\n                left.add(arr.get(i));\n            }\n            if(arr.get(i)\
    \ > max) {\n                right.add(arr.get(i));\n            }\n        }\n\
    \        left.addAll(maximum(new ArrayList<>(left), k - 1));\n        right.addAll(maximum(new\
    \ ArrayList<>(right), k - 1));\n        result.addAll(left);\n        result.addAll(right);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa184jwae.java:71)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long maxIndex2 = arr.size() - 1;\n        long maxIndex3 = arr.size() - 1;\n\
    \        long maxIndex4 = arr.size() - 1;\n        long maxIndex5 = arr.size()\
    \ - 1;\n        long maxIndex6 = arr.size() - 1;\n        long maxIndex7 = arr.size()\
    \ - 1;\n        long maxIndex8 = arr.size() - 1;\n        long maxIndex9 = arr.size()\
    \ - 1;\n        long maxIndex10 = arr.size() - 1;\n        long maxIndex11 = arr.size()\
    \ - 1;\n        long maxIndex12 = arr.size() - 1;\n        long maxIndex13 = arr.size()\
    \ - 1;\n        long maxIndex14 = arr.size() - 1;\n        long maxIndex15 = arr.size()\
    \ - 1;\n        long maxIndex16 = arr.size() - 1;\n        long maxIndex17 = arr.size()\
    \ - 1;\n        long maxIndex18 = arr.size() - 1;\n        long maxIndex19 = arr.size()\
    \ - 1;\n        long maxIndex20 = arr.size() - 1;\n        long maxIndex21 = arr.size()\
    \ - 1;\n        long maxIndex22 = arr.size() - 1;\n        long maxIndex23 = arr.size()\
    \ - 1;\n        long maxIndex24 = arr.size() - 1;\n        long maxIndex25 = arr.size()\
    \ - 1;\n        long maxIndex26 = arr.size() - 1;\n        long maxIndex27 = arr.size()\
    \ - 1;\n        long maxIndex28 = arr.size() - 1;\n        long maxIndex29 = arr.size()\
    \ - 1;\n        long maxIndex30 = arr.size() - 1;\n        long maxIndex31 = arr.size()\
    \ - 1;\n        long maxIndex32 = arr.size() - 1;\n        long maxIndex33 = arr.size()\
    \ - 1;\n        long maxIndex34 = arr.size() - 1;\n        long maxIndex35 = arr.size()\
    \ - 1;\n        long maxIndex36 = arr.size() - 1;\n        long maxIndex37 = arr.size()\
    \ - 1;\n        long maxIndex38 = arr.size() - 1;\n        long maxIndex39 = arr.size()\
    \ - 1;\n        long maxIndex40 = arr.size() - 1;\n        long maxIndex41 = arr.size()\
    \ - 1;\n        long maxIndex42 = arr.size() - 1;\n        long maxIndex43 = arr.size()\
    \ - 1;\n        long maxIndex44 = arr.size() - 1;\n        long maxIndex45 = arr.size()\
    \ - 1;\n        long maxIndex\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5804antn.java:73: error: ';' expected\n        long maxIndex\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long currentMax = arr.get(0);\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long current = arr.get(i);\n            if (current > max)\
    \ {\n                max = current;\n                maxIndex = i;\n         \
    \   }\n        }\n        ArrayList<Long> temp = new ArrayList<>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (i != maxIndex) {\n     \
    \           temp.add(arr.get(i));\n            }\n        }\n        Collections.sort(temp);\n\
    \        result.addAll(temp);\n        if (result.size() > k) {\n            result\
    \ = result.subList(0, k);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy5sr362m.java:45: error: no suitable method found for subList(int,long)\n\
    \            result = result.subList(0, k);\n                           ^\n  \
    \  method List.subList(int,int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.subList(int,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.subList(int,int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (max < arr.get(i)) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            if (maxIndex != i) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsb9n4cov.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpsb9n4cov.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        while(maxIndex < arr.size()\
    \ && arr.size() > k) {\n            long curMax = arr.get(maxIndex);\n       \
    \     for(int i = maxIndex + 1; i < arr.size(); i++) {\n                if(arr.get(i)\
    \ > curMax) {\n                    curMax = arr.get(i);\n                }\n \
    \           }\n            result.add(curMax);\n            maxIndex++;\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpurz3rpk5.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpurz3rpk5.java:36: error: no suitable method found for get(long)\n\
    \            long curMax = arr.get(maxIndex);\n                             ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy convers"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(0);\n        long maxIndex = -1;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue =\
    \ arr.get(i);\n                maxIndex = i;\n            }\n        }\n     \
    \   result.add(maxValue);\n        if (maxIndex + 1 < arr.size()) {\n        \
    \    result.add(arr.get(maxIndex + 1));\n        }\n        if (maxIndex + 2 <\
    \ arr.size()) {\n            result.add(arr.get(maxIndex + 2));\n        }\n \
    \       if (maxIndex + 3 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 3));\n        }\n        if (maxIndex + 4 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 4));\n        }\n        if (maxIndex + 5 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 5));\n        }\n        if (maxIndex + 6 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 6));\n        }\n        if (maxIndex + 7 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 7));\n        }\n        if (maxIndex + 8 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 8));\n        }\n        if (maxIndex + 9 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 9));\n        }\n        if (maxIndex + 10 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 10));\n        }\n        if (maxIndex + 11 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 11));\n        }\n        if (maxIndex + 12 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 12));\n        }\n        if (maxIndex + 13 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 13));\n        }\n        if (maxIndex + 14 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 14));\n        }\n        if (maxIndex + 15 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 15));\n        }\n        if (maxIndex + 16 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 16));\n        }\n        if (maxIndex + 17 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 17));\n        }\n        if (maxIndex + 18 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 18));\n        }\n        if (maxIndex + 19 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 19));\n        }\n        if (maxIndex + 20 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 20));\n        }\n        if (maxIndex + 21 < arr.size()) {\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp49l7ke6w.java:99: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp49l7ke6w.java:99: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp49l7ke6w.java:99: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp49l7ke6w.java:99: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp49l7ke6w.java:99: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp49l7ke6w.java:113:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd7b8qihd.java:132: error: ')' expected\n            if(temp > max\n\
    \                         ^\n/tmp/tmpd7b8qihd.java:133: error: illegal start of\
    \ statement\n    }\n    ^\n/tmp/tmpd7b8qihd.java:134: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpd7b8qihd.java:134:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpd7b8qihd.java:134: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                 ^\n/tmp/tmpd7b8qihd.java:134:\
    \ error: '.class' expected\n    public static void main(String[] args) {\n   \
    \                                  ^\n/tmp/tmpd7b8qihd.java:134: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpd7b8qihd.java:148: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (max < arr.get(i))\
    \ {\n                max = arr.get(i);\n                maxIndex = i;\n      \
    \      }\n        }\n        if (maxIndex + 1 < arr.size()) {\n            max\
    \ = Math.max(max, arr.get(maxIndex + 1));\n        }\n        if (maxIndex + 2\
    \ < arr.size()) {\n            max = Math.max(max, arr.get(maxIndex + 2));\n \
    \       }\n        if (maxIndex + 3 < arr.size()) {\n            max = Math.max(max,\
    \ arr.get(maxIndex + 3));\n        }\n        if (maxIndex + 4 < arr.size()) {\n\
    \            max = Math.max(max, arr.get(maxIndex + 4));\n        }\n        if\
    \ (maxIndex + 5 < arr.size()) {\n            max = Math.max(max, arr.get(maxIndex\
    \ + 5));\n        }\n        if (maxIndex + 6 < arr.size()) {\n            max\
    \ = Math.max(max, arr.get(maxIndex + 6));\n        }\n        if (maxIndex + 7\
    \ < arr.size()) {\n            max = Math.max(max, arr.get(maxIndex + 7));\n \
    \       }\n        if (maxIndex + 8 < arr.size()) {\n            max = Math.max(max,\
    \ arr.get(maxIndex + 8));\n        }\n        if (maxIndex + 9 < arr.size()) {\n\
    \            max = Math.max(max, arr.get(maxIndex + 9));\n        }\n        if\
    \ (maxIndex + 10 < arr.size()) {\n            max = Math.max(max, arr.get(maxIndex\
    \ + 10));\n        }\n        if (maxIndex + 11 < arr.size()) {\n            max\
    \ = Math.max(max, arr.get(maxIndex + 11));\n        }\n        if (maxIndex +\
    \ 12 < arr.size()) {\n            max = Math.max(max, arr.get(maxIndex + 12));\n\
    \        }\n        if (maxIndex + 13 < arr.size()) {\n            max = Math.max(max,\
    \ arr.get(maxIndex + 13));\n        }\n        if (maxIndex + 14 < arr.size())\
    \ {\n            max = Math.max(max, arr.get(maxIndex + 14));\n        }\n   \
    \     if (maxIndex + 15 < arr.size()) {\n            max = Math.max(max, arr.get(maxIndex\
    \ + 15));\n        }\n        if (maxIndex + 16 < arr.size()) {\n            max\
    \ = Math.max(max, arr.get(maxIndex + 16));\n        }\n        if (maxIndex +\
    \ 17 < arr.size()) {\n            max = Math.max(max, arr.get(maxIndex + 17));\n\
    \        }\n        if (maxIndex + 18 < arr.size()) {\n            max = Math.max(max,\
    \ arr.get(maxIndex + 18));\n        }\n        if (maxIndex + 19 < arr.size())\
    \ {\n            max = Math.max(max, arr.get(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpat8bowj1.java:90: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpat8bowj1.java:90: error: ')' expected\n    }\n     ^\n/tmp/tmpat8bowj1.java:91:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpat8bowj1.java:91: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpat8bowj1.java:91:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpat8bowj1.java:91: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpat8bowj1.java:105: error: reached end of file while parsing\n}\n\
    \ ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = 0;\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            if(arr.get(i) > maxValue) {\n       \
    \         maxValue = arr.get(i);\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = maxIndex; i < arr.size(); i++) {\n           \
    \ if(arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   if(arr.get(i) > maxValue) {\n                result.add(arr.get(i));\n   \
    \         }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3f6sdazq.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp3f6sdazq.java:35: error: incompatible types: possible lossy\
    \ conversion from long to int\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n                    ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentMax = maxValue;\n        long currentIndex = maxIndex;\n      \
    \  boolean isMax = true;\n        while (currentIndex >= 0) {\n            if\
    \ (currentMax < arr.get(currentIndex)) {\n                currentMax = arr.get(currentIndex);\n\
    \                currentIndex = currentIndex - 1;\n            } else {\n    \
    \            isMax = false;\n                break;\n            }\n        }\n\
    \        if (isMax) {\n            result.add(maxValue);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1obzbz7.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpr1obzbz7.java:33: error: no suitable method found for get(long)\n\
    \            if (currentMax < arr.get(currentIndex)) {\n                     \
    \           ^\n    method List.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible l"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           max = Math.max(max, arr.get(i));\n            if(max >= k) {\n   \
    \             result.add(max);\n                maxIndex = i;\n            }\n\
    \        }\n        if(maxIndex < arr.size() - 1) {\n            result.add(arr.get(maxIndex\
    \ + 1));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkfqikogc.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpkfqikogc.java:37: error: no suitable method found for get(long)\n\
    \            result.add(arr.get(maxIndex + 1));\n                          ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n     \
    \   long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long\
    \ sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long sum10\
    \ = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13 =\
    \ 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n\
    \        long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n \
    \       long sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n  \
    \      long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n   \
    \     long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n    \
    \    long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n     \
    \   long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n      \
    \  long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n       \
    \ long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long\
    \ sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44\
    \ = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 =\
    \ 0;\n        long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n\
    \        long sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n \
    \       long sum54 = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n  \
    \      long sum57 = 0;\n        long sum58 = 0;\n        long sum59 = 0;\n   \
    \     long sum60 = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n    \
    \    long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n     \
    \   long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n      \
    \  long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n       \
    \ long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long\
    \ sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long sum78\
    \ = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81 =\
    \ 0;\n        long sum82 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpax2ld49_.java:110: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpax2ld49_.java:110: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long temp = 0;\n        for(int i = 0; i < arr.size(); i++) {\n     \
    \       if(max < arr.get(i)) {\n                max = arr.get(i);\n          \
    \  }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(max\
    \ < arr.get(i)) {\n                temp = arr.get(i);\n                arr.set(i,\
    \ max);\n                max = temp;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(max < arr.get(i)) {\n        \
    \        temp = arr.get(i);\n                arr.set(i, max);\n              \
    \  max = temp;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(max < arr.get(i)) {\n                temp = arr.get(i);\n\
    \                arr.set(i, max);\n                max = temp;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(max\
    \ < arr.get(i)) {\n                temp = arr.get(i);\n                arr.set(i,\
    \ max);\n                max = temp;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(max < arr.get(i)) {\n        \
    \        temp = arr.get(i);\n                arr.set(i, max);\n              \
    \  max = temp;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(max < arr.get(i)) {\n                temp = arr.get(i);\n\
    \                arr.set(i, max);\n                max = temp;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(max\
    \ < arr.get(i)) {\n                temp = arr.get(i);\n                arr.set(i,\
    \ max);\n                max = temp;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(max < arr.get(i)) {\n        \
    \        temp = arr.get(i);\n                arr.set(i, max);\n              \
    \  max = temp;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(max < arr.get(i)) {\n                temp = arr.get(i);\n\
    \                arr.set(i, max);\n                max = temp;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(max\
    \ < arr.get(i)) {\n                temp = arr.get(i);\n                arr.set(i,\
    \ max);\n                max = temp;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(max < arr.get(i)) {\n        \
    \        temp = arr.get(i);\n                arr.set(i, max);\n              \
    \  max = temp;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(max < arr.get(i)) {\n                temp = arr.get(i);\n\
    \                arr.set(i, max);\n                max = temp;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(max\
    \ < arr.get(i)) {\n                temp = arr\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ge92893.java:120: error: ';' expected\n                temp =\
    \ arr\n                          ^\n/tmp/tmp6ge92893.java:122: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp6ge92893.java:122:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp6ge92893.java:122: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                 ^\n/tmp/tmp6ge92893.java:122:\
    \ error: '.class' expected\n    public static void main(String[] args) {\n   \
    \                                  ^\n/tmp/tmp6ge92893.java:122: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp6ge92893.java:136: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n\
    \            if(curr > max) {\n                max = curr;\n                maxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long curr = arr.get(i);\n            if(curr == max) {\n    \
    \            result.add(max);\n                result.add(maxIndex);\n       \
    \         break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidnebtiw.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                result.add(max);\n        \
    \        result.add(arr.get(maxIndex));\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzuauzlce.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(max < arr.get(i)) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        while(maxIndex < arr.size()\
    \ && maxIndex < k) {\n            result.add(max);\n            maxIndex++;\n\
    \            max = 0;\n            for(int i = 0; i < arr.size(); i++) {\n   \
    \             if(max < arr.get(i)) {\n                    max = arr.get(i);\n\
    \                    maxIndex = i;\n                }\n            }\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy2echluk.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long maxIndex\
    \ = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long curr =\
    \ arr.get(i);\n            if(curr > max) {\n                max = curr;\n   \
    \             maxIndex = i;\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            long curr = arr.get(i);\n            if(curr\
    \ == max) {\n                res.add(max);\n                res.add(maxIndex);\n\
    \                break;\n            }\n        }\n        return res;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpocq_357h.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (max < arr.get(i)) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (result.size() > k) {\n            result.remove(k);\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjxux05em.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long cur = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (i == 0) {\n                max = arr.get(i);\n                cur\
    \ = arr.get(i);\n            } else if (arr.get(i) > max) {\n                max\
    \ = arr.get(i);\n                cur = arr.get(i);\n            }\n          \
    \  if (cur == k) {\n                res.add(max);\n                cur = 0;\n\
    \                max = 0;\n            }\n        }\n        return res;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx3e2xhi0.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long min = 0;\n        int count = 0;\n      \
    \  for(int i = 0; i < arr.size(); i++) {\n            min = arr.get(i);\n    \
    \        for(int j = i; j < arr.size(); j++) {\n                if(arr.get(j)\
    \ < min) {\n                    min = arr.get(j);\n                }\n       \
    \     }\n            max = Math.max(max, min);\n            count++;\n       \
    \     if(count == k) {\n                result.add(max);\n                count\
    \ = 0;\n                max = 0;\n                min = 0;\n            }\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbadbzx08.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxavg8rsn.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpxavg8rsn.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> max = new ArrayList<>();\n\
    \        ArrayList<Long> tmp = new ArrayList<>();\n        long maxVal = -1000;\n\
    \        long minVal = 1000;\n        long maxIndex = 0;\n        long minIndex\
    \ = 0;\n        long maxCount = 0;\n        long minCount = 0;\n        long maxCount2\
    \ = 0;\n        long minCount2 = 0;\n        long maxCount3 = 0;\n        long\
    \ minCount3 = 0;\n        long maxCount4 = 0;\n        long minCount4 = 0;\n \
    \       long maxCount5 = 0;\n        long minCount5 = 0;\n        long maxCount6\
    \ = 0;\n        long minCount6 = 0;\n        long maxCount7 = 0;\n        long\
    \ minCount7 = 0;\n        long maxCount8 = 0;\n        long minCount8 = 0;\n \
    \       long maxCount9 = 0;\n        long minCount9 = 0;\n        long maxCount10\
    \ = 0;\n        long minCount10 = 0;\n        long maxCount11 = 0;\n        long\
    \ minCount11 = 0;\n        long maxCount12 = 0;\n        long minCount12 = 0;\n\
    \        long maxCount13 = 0;\n        long minCount13 = 0;\n        long maxCount14\
    \ = 0;\n        long minCount14 = 0;\n        long maxCount15 = 0;\n        long\
    \ minCount15 = 0;\n        long maxCount16 = 0;\n        long minCount16 = 0;\n\
    \        long maxCount17 = 0;\n        long minCount17 = 0;\n        long maxCount18\
    \ = 0;\n        long minCount18 = 0;\n        long maxCount19 = 0;\n        long\
    \ minCount19 = 0;\n        long maxCount20 = 0;\n        long minCount20 = 0;\n\
    \        long maxCount21 = 0;\n        long minCount21 = 0;\n        long maxCount22\
    \ = 0;\n        long minCount22 = 0;\n        long maxCount23 = 0;\n        long\
    \ minCount23 = 0;\n        long maxCount24 = 0;\n        long minCount24 = 0;\n\
    \        long maxCount25 = 0;\n        long minCount25 = 0;\n        long maxCount26\
    \ = 0;\n        long minCount26 = 0;\n        long maxCount27 = 0;\n        long\
    \ minCount27 = 0;\n        long maxCount28 = 0;\n        long minCount28 = 0;\n\
    \        long maxCount29 = 0;\n        long minCount29 = 0;\n        long maxCount30\
    \ = 0;\n        long minCount30 = 0;\n        long maxCount31 = 0;\n        long\
    \ minCount31 = 0;\n        long maxCount32 = 0;\n        long minCount32 = 0;\n\
    \        long maxCount33 = 0;\n        long minCount33 = 0;\n        long maxCount34\
    \ = 0;\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3tg4erqw.java:99: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long maxIndex\
    \ = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(!result.contains(arr.get(i))) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(result);\n        return result.subList(0,\
    \ k);\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprhyrt6_8.java:34: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = maxIndex; i < arr.size(); i++) {\n   \
    \                 ^\n/tmp/tmprhyrt6_8.java:40: error: no suitable method found\
    \ for subList(int,long)\n        return result.subList(0, k);\n              \
    \       ^\n    method List.subList(int,int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method AbstractList.subList(int,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.subList(int,int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(maxIndex != i) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0yu63ejb.java:36: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            tmp.add(arr.get(i));\n        }\n        Collections.sort(tmp);\n\
    \        for(int i = 0; i < tmp.size(); i++) {\n            if(tmp.get(i) > max)\
    \ {\n                max = tmp.get(i);\n                maxIndex = i;\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   if(maxIndex == i) {\n                result.add(arr.get(i));\n           \
    \ } else {\n                if(arr.get(i) > max) {\n                    result.add(arr.get(i));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpln6lsg1p.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = -1;\n        for(int i = 1; i < arr.size(); i++) {\n\
    \            if(arr.get(i) > max) {\n                max = arr.get(i);\n     \
    \           maxIndex = i;\n            }\n        }\n        for(int i = 0; i\
    \ < k; i++) {\n            result.add(max);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6jq6npl4.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        long sum = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n     \
    \   long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long\
    \ sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long sum10\
    \ = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13 =\
    \ 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n\
    \        long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n \
    \       long sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n  \
    \      long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n   \
    \     long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n    \
    \    long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n     \
    \   long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n      \
    \  long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n       \
    \ long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long\
    \ sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44\
    \ = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 =\
    \ 0;\n        long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n\
    \        long sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n \
    \       long sum54 = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n  \
    \      long sum57 = 0;\n        long sum58 = 0;\n        long sum59 = 0;\n   \
    \     long sum60 = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n    \
    \    long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n     \
    \   long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n      \
    \  long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n       \
    \ long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long\
    \ sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long sum78\
    \ = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81 =\
    \ 0;\n        long sum82 = 0;\n        long sum83 = 0;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqlhybiu7.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (max < arr.get(i)) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (maxIndex ==\
    \ arr.size() - 1) {\n            result.add(max);\n        } else {\n        \
    \    for (int i = maxIndex + 1; i < arr.size(); i++) {\n                if (max\
    \ < arr.get(i)) {\n                    max = arr.get(i);\n                   \
    \ maxIndex = i;\n                }\n            }\n            result.add(max);\n\
    \            result.add(arr.get(maxIndex));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpancku6be.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpancku6be.java:38: error: incompatible types: possible lossy\
    \ conversion from long to int\n            for (int i = maxIndex + 1; i < arr.size();\
    \ i++) {\n                                  ^\n/tmp/tmpancku6be.java:45: error:\
    \ no suitable method found for get(long)\n            result.add(arr.get(maxIndex));\n\
    \                          ^\n    method List.get(int"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (result.size() > k) {\n            result.remove(k);\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb_f8eyzz.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long currentMax = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            if(arr.get(i) > currentMax) {\n                currentMax\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == currentMax)\
    \ {\n                result.add(maxIndex);\n                result.add(arr.get(i));\n\
    \            }\n        }\n        if(result.size() > k) {\n            return\
    \ result.subList(0, k);\n        } else {\n            return result;\n      \
    \  }\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3d5fw4uq.java:42: error: no suitable method found for subList(int,long)\n\
    \            return result.subList(0, k);\n                         ^\n    method\
    \ List.subList(int,int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.subList(int,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.subList(int,int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        long sum = 0;\n        long count = 0;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            sum = sum + arr.get(i);\n            if(sum > max) {\n \
    \               max = sum;\n            }\n        }\n        for(int i = 0; i\
    \ < arr.size(); i++) {\n            temp = arr.get(i);\n            if(temp >\
    \ max) {\n                max = temp;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            sum = sum + arr.get(i);\n       \
    \     if(sum > max) {\n                max = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            sum = sum\
    \ + arr.get(i);\n            if(sum > max) {\n                max = sum;\n   \
    \         }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n      \
    \      temp = arr.get(i);\n            if(temp > max) {\n                max =\
    \ temp;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            sum = sum + arr.get(i);\n            if(sum > max) {\n      \
    \          max = sum;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            temp = arr.get(i);\n            if(temp > max) {\n     \
    \           max = temp;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            sum = sum + arr.get(i);\n            if(sum\
    \ > max) {\n                max = sum;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n            if(temp\
    \ > max) {\n                max = temp;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            sum = sum + arr.get(i);\n       \
    \     if(sum > max) {\n                max = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            sum = sum\
    \ + arr.get(i);\n            if(sum > max) {\n                max = sum;\n   \
    \         }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n      \
    \      temp = arr.get(i);\n            if(temp > max) {\n                max =\
    \ temp;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            sum = sum + arr.get(i);\n            if(sum > max) {\n      \
    \          max = sum;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            temp = arr.get(i);\n            if(temp > max) {\n     \
    \           max = temp;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            sum = sum + arr.get(i);\n            if(sum\
    \ > max) {\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptw6b1s4k.java:130: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmptw6b1s4k.java:130: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmptw6b1s4k.java:130: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmptw6b1s4k.java:130: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmptw6b1s4k.java:130: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmptw6b1s4k.java:144: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentMax = maxValue;\n        long currentIndex = maxIndex;\n      \
    \  long currentSum = 0;\n        while (currentIndex >= 0) {\n            currentSum\
    \ = currentSum + arr.get(currentIndex);\n            if (currentSum > k) {\n \
    \               result.add(currentMax);\n                currentMax = currentSum;\n\
    \                currentIndex = currentIndex - 1;\n            } else {\n    \
    \            currentMax = currentMax;\n                currentIndex = currentIndex\
    \ - 1;\n            }\n        }\n        result.add(currentMax);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrird2_f.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpnrird2_f.java:33: error: no suitable method found for get(long)\n\
    \            currentSum = currentSum + arr.get(currentIndex);\n              \
    \                           ^\n    method List.get(int) is not applicable\n  \
    \    (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mism"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        long current = 0;\n        long currentIndex\
    \ = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n\
    \            if(current > max) {\n                max = current;\n           \
    \     maxIndex = i;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            current = arr.get(i);\n            if(current == max) {\n\
    \                result.add(max);\n                currentIndex = i;\n       \
    \     }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n          \
    \  current = arr.get(i);\n            if(current > max) {\n                result.add(max);\n\
    \                currentIndex = i;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n         \
    \   if(current > max) {\n                result.add(max);\n                currentIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            current = arr.get(i);\n            if(current > max) {\n    \
    \            result.add(max);\n                currentIndex = i;\n           \
    \ }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            current\
    \ = arr.get(i);\n            if(current > max) {\n                result.add(max);\n\
    \                currentIndex = i;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n         \
    \   if(current > max) {\n                result.add(max);\n                currentIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            current = arr.get(i);\n            if(current > max) {\n    \
    \            result.add(max);\n                currentIndex = i;\n           \
    \ }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            current\
    \ = arr.get(i);\n            if(current > max) {\n                result.add(max);\n\
    \                currentIndex = i;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n         \
    \   if(current > max) {\n                result.add(max);\n                currentIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            current = arr.get(i);\n            if(current > max) {\n    \
    \            result.add(max);\n                currentIndex = i;\n           \
    \ }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            current\
    \ = arr.get(i);\n            if(current > max) {\n                result.add(max);\n\
    \                currentIndex = i;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n         \
    \   if(current > max) {\n                result.add(max);\n                currentIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            current = arr.get(i);\n            if(current > max) {\n    \
    \            result.add(max);\n                currentIndex = i;\n           \
    \ }\n        }\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_z422tdv.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> max = new ArrayList<>();\n\
    \        ArrayList<Long> temp = new ArrayList<>();\n        long maxValue = Long.MIN_VALUE;\n\
    \        long minValue = Long.MAX_VALUE;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value > maxValue)\
    \ {\n                maxValue = value;\n                max.clear();\n       \
    \         max.add(value);\n            }\n            else if(value < minValue)\
    \ {\n                minValue = value;\n                temp.clear();\n      \
    \          temp.add(value);\n            }\n            else {\n             \
    \   temp.add(value);\n            }\n            if(temp.size() > k) {\n     \
    \           result.addAll(temp);\n                temp.clear();\n            }\n\
    \        }\n        if(temp.size() > 0) {\n            result.addAll(temp);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphs4mfndh.java:57)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long maxValue = Long.MIN_VALUE;\n     \
    \   long currentMax = Long.MIN_VALUE;\n        long currentValue = Long.MIN_VALUE;\n\
    \        long currentCount = 0;\n        for (long i : arr) {\n            currentCount++;\n\
    \            if (currentCount > k) {\n                break;\n            }\n\
    \            if (currentCount > currentMax) {\n                currentMax = currentCount;\n\
    \                currentValue = i;\n            }\n            if (currentCount\
    \ > maxValue) {\n                maxValue = currentCount;\n            }\n   \
    \     }\n        result.add(currentValue);\n        result.add(currentMax);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ny7wwvj.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(k);\n        long maxIndex = k;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) > maxValue) {\n                maxValue =\
    \ arr.get(i);\n                maxIndex = i;\n            }\n        }\n     \
    \   result.add(maxValue);\n        result.add(maxIndex);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp67ayc7g8.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp67ayc7g8.java:27: error: no suitable method found for get(long)\n\
    \        long maxValue = arr.get(k);\n                           ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from lo"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < k; i++) {\n            if (arr.get(i) > max) {\n\
    \                max = arr.get(i);\n            }\n        }\n        result.add(max);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprpgl9lkq.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long maxValue = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value > maxValue) {\n\
    \                maxValue = value;\n                maxIndex = i;\n          \
    \  }\n        }\n        max = maxValue;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if (value == maxValue)\
    \ {\n                result.add(max);\n                result.add(maxIndex);\n\
    \                result.add(value);\n                result.add(maxIndex + 1);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnsfp6134.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long maxIndex2 = arr.size() - 1;\n        long maxIndex3 = arr.size() - 1;\n\
    \        long maxIndex4 = arr.size() - 1;\n        long maxIndex5 = arr.size()\
    \ - 1;\n        long maxIndex6 = arr.size() - 1;\n        long maxIndex7 = arr.size()\
    \ - 1;\n        long maxIndex8 = arr.size() - 1;\n        long maxIndex9 = arr.size()\
    \ - 1;\n        long maxIndex10 = arr.size() - 1;\n        long maxIndex11 = arr.size()\
    \ - 1;\n        long maxIndex12 = arr.size() - 1;\n        long maxIndex13 = arr.size()\
    \ - 1;\n        long maxIndex14 = arr.size() - 1;\n        long maxIndex15 = arr.size()\
    \ - 1;\n        long maxIndex16 = arr.size() - 1;\n        long maxIndex17 = arr.size()\
    \ - 1;\n        long maxIndex18 = arr.size() - 1;\n        long maxIndex19 = arr.size()\
    \ - 1;\n        long maxIndex20 = arr.size() - 1;\n        long maxIndex21 = arr.size()\
    \ - 1;\n        long maxIndex22 = arr.size() - 1;\n        long maxIndex23 = arr.size()\
    \ - 1;\n        long maxIndex24 = arr.size() - 1;\n        long maxIndex25 = arr.size()\
    \ - 1;\n        long maxIndex26 = arr.size() - 1;\n        long maxIndex27 = arr.size()\
    \ - 1;\n        long maxIndex28 = arr.size() - 1;\n        long maxIndex29 = arr.size()\
    \ - 1;\n        long maxIndex30 = arr.size() - 1;\n        long maxIndex31 = arr.size()\
    \ - 1;\n        long maxIndex32 = arr.size() - 1;\n        long maxIndex33 = arr.size()\
    \ - 1;\n        long maxIndex34 = arr.size() - 1;\n        long maxIndex35 = arr.size()\
    \ - 1;\n        long maxIndex36 = arr.size() - 1;\n        long maxIndex37 = arr.size()\
    \ - 1;\n        long maxIndex38 = arr.size() - 1;\n        long maxIndex39 = arr.size()\
    \ - 1;\n        long maxIndex40 = arr.size() - 1;\n        long maxIndex41 = arr.size()\
    \ - 1;\n        long maxIndex42 = arr.size() - 1;\n        long maxIndex43 = arr.size()\
    \ - 1;\n        long maxIndex44 = arr.size() - 1;\n        long maxIndex45 = arr.size()\
    \ - 1;\n        long maxIndex\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd2_wbyjq.java:73: error: ';' expected\n        long maxIndex\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            if(max > k) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n        }\n        if(maxIndex\
    \ != arr.size() - 1) {\n            result.add(max);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4demq112.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(0);\n        long maxIndex = -1;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue =\
    \ arr.get(i);\n                maxIndex = i;\n            }\n        }\n     \
    \   result.add(maxValue);\n        if (maxIndex < k) {\n            ArrayList<Long>\
    \ subResult = maximum(arr, k - maxIndex);\n            for (int i = 0; i < subResult.size();\
    \ i++) {\n                result.add(subResult.get(i));\n            }\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp956741q2.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex + 1 < k) {\n            result.add(arr.get(maxIndex + 1));\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsm90r55_.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpsm90r55_.java:37: error: no suitable method found for get(long)\n\
    \            result.add(arr.get(maxIndex + 1));\n                          ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (k == maxIndex)\
    \ {\n            result.add(max);\n        }\n        if (k > maxIndex) {\n  \
    \          k = maxIndex;\n        }\n        if (k == arr.size()) {\n        \
    \    result.add(max);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsdwj2hcf.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentMax = maxValue;\n        long currentIndex = maxIndex;\n      \
    \  long currentSum = 0;\n        long currentSumIndex = 0;\n        while (currentIndex\
    \ >= 0) {\n            currentSum = currentSum + arr.get(currentIndex);\n    \
    \        currentSumIndex = currentSumIndex;\n            currentSumIndex++;\n\
    \            if (currentSum > currentMax) {\n                currentMax = currentSum;\n\
    \                maxIndex = currentIndex;\n            }\n            currentIndex--;\n\
    \        }\n        if (maxIndex - currentIndex >= k) {\n            while (currentIndex\
    \ >= 0) {\n                result.add(arr.get(currentIndex));\n              \
    \  currentIndex--;\n            }\n        } else {\n            while (currentIndex\
    \ >= 0) {\n                result.add(maxValue);\n                currentIndex--;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9hn8iw4t.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp9hn8iw4t.java:34: error: no suitable method found for get(long)\n\
    \            currentSum = currentSum + arr.get(currentIndex);\n              \
    \                           ^\n    method List.get(int) is not applicable\n  \
    \    (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mism"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           max = Math.max(max, arr.get(i));\n            if(max >= k) {\n   \
    \             result.add(max);\n                maxIndex = i;\n            }\n\
    \        }\n        if(maxIndex != arr.size() - 1) {\n            result.add(arr[maxIndex\
    \ + 1]);\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjcv0s3fa.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpjcv0s3fa.java:37: error: incompatible types: possible lossy\
    \ conversion from long to int\n            result.add(arr[maxIndex + 1]);\n  \
    \                                  ^\n/tmp/tmpjcv0s3fa.java:37: error: array required,\
    \ but ArrayList<Long> found\n            result.add(arr[maxIndex + 1]);\n    \
    \                      ^\nNote: Some messages have been simplif"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (k == arr.size())\
    \ {\n            result.add(max);\n            return result;\n        }\n   \
    \     if (k > arr.size()) {\n            k = arr.size();\n        }\n        if\
    \ (k == 1) {\n            result.add(arr.get(maxIndex));\n            return result;\n\
    \        }\n        ArrayList<Long> left = new ArrayList<>();\n        ArrayList<Long>\
    \ right = new ArrayList<>();\n        long leftMax = 0;\n        long rightMax\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > max) {\n                left.add(arr.get(i));\n                if (arr.get(i)\
    \ > leftMax) {\n                    leftMax = arr.get(i);\n                }\n\
    \            } else {\n                right.add(arr.get(i));\n              \
    \  if (arr.get(i) > rightMax) {\n                    rightMax = arr.get(i);\n\
    \                }\n            }\n        }\n        ArrayList<Long> leftResult\
    \ = maximum(left, k - 1);\n        ArrayList<Long> rightResult = maximum(right,\
    \ k - 1);\n        ArrayList<Long> result = new ArrayList<>();\n        result.addAll(leftResult);\n\
    \        result.add(max);\n        result.addAll(rightResult);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgc_t2ihm.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpgc_t2ihm.java:43: error: no suitable method found for get(long)\n\
    \            result.add(arr.get(maxIndex));\n                          ^\n   \
    \ method List.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n    method AbstractList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion f"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if(value > max) {\n                max = value;\n\
    \                maxIndex = i;\n            }\n        }\n        for(int i =\
    \ maxIndex; i < arr.size(); i++) {\n            long value = arr.get(i);\n   \
    \         if(value > max) {\n                max = value;\n                maxIndex\
    \ = i;\n            }\n        }\n        for(int i = maxIndex; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value > max) {\n\
    \                max = value;\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = maxIndex; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if(value > max) {\n                max\
    \ = value;\n                maxIndex = i;\n            }\n        }\n        for(int\
    \ i = maxIndex; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value > max) {\n                max = value;\n               \
    \ maxIndex = i;\n            }\n        }\n        for(int i = maxIndex; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value > max) {\n\
    \                max = value;\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = maxIndex; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if(value > max) {\n                max\
    \ = value;\n                maxIndex = i;\n            }\n        }\n        for(int\
    \ i = maxIndex; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value > max) {\n                max = value;\n               \
    \ maxIndex = i;\n            }\n        }\n        for(int i = maxIndex; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value > max) {\n\
    \                max = value;\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = maxIndex; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if(value > max) {\n                max\
    \ = value;\n                maxIndex = i;\n            }\n        }\n        for(int\
    \ i = maxIndex; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value > max) {\n                max = value;\n               \
    \ maxIndex = i;\n            }\n        }\n        for(int i = maxIndex; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value > max) {\n\
    \                max = value;\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = maxIndex; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if(value > max) {\n                max\
    \ = value;\n                maxIndex = i;\n            }\n        }\n        for(int\
    \ i = maxIndex; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value > max) {\n                max = value;\n               \
    \ maxIndex = i;\n            }\n        }\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8fofih4d.java:35: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = maxIndex; i < arr.size(); i++) {\n   \
    \                 ^\n/tmp/tmp8fofih4d.java:42: error: incompatible types: possible\
    \ lossy conversion from long to int\n        for(int i = maxIndex; i < arr.size();\
    \ i++) {\n                    ^\n/tmp/tmp8fofih4d.java:49: error: incompatible\
    \ types: possible lossy conversion from long to int\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:56: error:\
    \ incompatible types: possible lossy conversion from long to int\n        for(int\
    \ i = maxIndex; i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:63:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for(int i = maxIndex; i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:70:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for(int i = maxIndex; i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:77:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for(int i = maxIndex; i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:84:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for(int i = maxIndex; i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:91:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for(int i = maxIndex; i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:98:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for(int i = maxIndex; i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:105:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for(int i = maxIndex; i < arr.size(); i++) {\n                    ^\n/tmp/tmp8fofih4d.java:112:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for(int i = maxIndex; i < arr.size(); i++) {\n                "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long maxIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        ArrayList<Long> left = new ArrayList<>();\n\
    \        ArrayList<Long> right = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            if (i < maxIndex) {\n                left.add(arr.get(i));\n\
    \            } else {\n                right.add(arr.get(i));\n            }\n\
    \        }\n        ArrayList<Long> leftMax = maximum(left, k);\n        ArrayList<Long>\
    \ rightMax = maximum(right, k);\n        ArrayList<Long> merged = new ArrayList<>();\n\
    \        merged.addAll(leftMax);\n        merged.addAll(rightMax);\n        result.addAll(merged);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.maximum(tmp4tbet86n.java:26)\n\tat Problem.maximum(tmp4tbet86n.java:43)\n\
    \tat Problem.maximum(tmp4tbet86n.java:43)\n\tat Problem.main(tmp4tbet86n.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n \
    \       long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n  \
    \      long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n  \
    \      long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n\
    \        long temp77 = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n\
    \        long temp80 = 0;\n        long temp81 = 0;\n        long temp82 = 0;\n\
    \        long temp83 = 0;\n        long temp84 = 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpku19ivwl.java:111: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (max < arr.get(i)) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex + 1 < arr.size()) {\n            ArrayList<Long> temp =\
    \ new ArrayList<>();\n            temp.clear();\n            temp.add(arr.get(maxIndex\
    \ + 1));\n            temp.retainAll(arr);\n            result.addAll(temp);\n\
    \        }\n        if (result.size() > k) {\n            result.remove(k);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwmc6imd3.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpwmc6imd3.java:39: error: no suitable method found for get(long)\n\
    \            temp.add(arr.get(maxIndex + 1));\n                        ^\n   \
    \ method List.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n    method AbstractList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion f"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        for (long i : arr) {\n            if (i < min) {\n                min\
    \ = i;\n            }\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (max > min) {\n            int count = 0;\n\
    \            for (long i : arr) {\n                if (i > max) {\n          \
    \          result.add(max);\n                    max = i;\n                  \
    \  count++;\n                } else if (i < min) {\n                    result.add(min);\n\
    \                    min = i;\n                    count++;\n                }\n\
    \            }\n            if (count > k) {\n                result.add(max);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppfibjmud.java:57)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = 0;\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            if(arr.get(i) > maxValue) {\n       \
    \         maxValue = arr.get(i);\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(i !=\
    \ maxIndex) {\n                result.add(arr.get(i));\n            }\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq6bvml3u.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long maxIndex\
    \ = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = 0; i < k; i++) {\n            result.add(max);\n\
    \            max = arr.get(maxIndex);\n            maxIndex++;\n        }\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2v51a1yr.java:36: error: no suitable method found for get(long)\n\
    \            max = arr.get(maxIndex);\n                     ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method ArrayList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        for(long i : arr) {\n            max = Math.max(max, i);\n          \
    \  min = Math.min(min, i);\n        }\n        long mid = max - (max - min) /\
    \ 2;\n        for(long i : arr) {\n            if(i <= mid) {\n              \
    \  result.add(i);\n            }\n        }\n        if(result.size() > k) {\n\
    \            Collections.sort(result);\n            result = result.subList(0,\
    \ k);\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl36z2rdx.java:40: error: no suitable method found for subList(int,long)\n\
    \            result = result.subList(0, k);\n                           ^\n  \
    \  method List.subList(int,int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.subList(int,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.subList(int,int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex + 1 < arr.size()) {\n            ArrayList<Long> subArr\
    \ = new ArrayList<>();\n            subArr.add(arr.get(maxIndex + 1));\n     \
    \       subArr.addAll(Arrays.copyOfRange(arr, maxIndex + 1, arr.size()));\n  \
    \          result = result.stream().flatMap(x -> subArr.stream()).collect(Collectors.toList());\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflkwke9k.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpflkwke9k.java:38: error: no suitable method found for get(long)\n\
    \            subArr.add(arr.get(maxIndex + 1));\n                          ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long\
    \ num = arr.get(i);\n            if(num > max) {\n                max = num;\n\
    \                maxIndex = i;\n            }\n        }\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if(num\
    \ == max) {\n                result.add(max);\n                result.add(maxIndex);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpczm2s0w6.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ curr = arr.get(i);\n            if (curr > max) {\n                max = curr;\n\
    \                maxIndex = i;\n            }\n        }\n        if (k == 1)\
    \ {\n            result.add(max);\n        } else {\n            for (int i =\
    \ 0; i < k; i++) {\n                result.add(max);\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_inayx3.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(max < arr.get(i)) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(maxIndex != i) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgh5ve56r.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long max = 0;\n        long cur = 0;\n   \
    \     long maxIndex = 0;\n        long curIndex = 0;\n        for(int i = 0; i\
    \ < arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n       \
    \     cur = arr.get(i);\n            for(int j = i; j < arr.size(); j++) {\n \
    \               if(cur > arr.get(j)) {\n                    max = Math.max(max,\
    \ arr.get(j));\n                    cur = arr.get(j);\n                }\n   \
    \         }\n            if(max != 0) {\n                res.add(max);\n     \
    \           maxIndex++;\n            }\n        }\n        for(int i = 0; i <\
    \ k; i++) {\n            max = Math.max(max, res.get(maxIndex));\n           \
    \ maxIndex++;\n        }\n        return res;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5voxnxfe.java:45: error: no suitable method found for get(long)\n\
    \            max = Math.max(max, res.get(maxIndex));\n                       \
    \            ^\n    method List.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long cur\
    \ = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if\
    \ (max < arr.get(i)) {\n                max = arr.get(i);\n            }\n   \
    \         if (cur < arr.get(i)) {\n                cur = arr.get(i);\n       \
    \     }\n            if (k == arr.size()) {\n                result.add(max);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_gte68e.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long cur\
    \ = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            max\
    \ = Math.max(max, arr.get(i));\n            cur = Math.max(cur, arr.get(i));\n\
    \            if(max >= k) {\n                result.add(cur);\n              \
    \  max = cur;\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyu418hbg.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        for (long i : arr) {\n            if (i < min) {\n                min\
    \ = i;\n            }\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (max > min) {\n            long mid = max\
    \ + (max - min) / 2;\n            while (k > 0) {\n                result.add(mid);\n\
    \                k--;\n                mid = max + (max - min) / 2;\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpld30xtwh.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            if(i == k - 1) {\n                result.add(max);\n\
    \            }\n            else if(max < arr.get(i)) {\n                max =\
    \ arr.get(i);\n                maxIndex = i;\n            }\n        }\n     \
    \   return result;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphk4wksnd.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                result.add(max);\n        \
    \        result.add(arr.get(maxIndex));\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfczex2mt.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \                arr.remove(maxIndex);\n                i--;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpffebjp3u.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpffebjp3u.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex + 1 < arr.size()) {\n            ArrayList<Long> subArr\
    \ = new ArrayList<>();\n            subArr.add(arr.get(maxIndex + 1));\n     \
    \       subArr.addAll(Arrays.copyOfRange(arr, maxIndex + 1, arr.size()));\n  \
    \          result.addAll(maximum(subArr, k));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcpwlmcb1.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpcpwlmcb1.java:38: error: no suitable method found for get(long)\n\
    \            subArr.add(arr.get(maxIndex + 1));\n                          ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = 0;\n\
    \        long maxIndex = 0;\n        long minIndex = 0;\n        long maxValue\
    \ = arr.get(0);\n        long minValue = arr.get(0);\n        long maxIndexValue\
    \ = arr.get(0);\n        long minIndexValue = arr.get(0);\n        for(int i =\
    \ 1; i < arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n  \
    \          min = Math.min(min, arr.get(i));\n            maxIndex = i;\n     \
    \       minIndex = i;\n            maxValue = arr.get(i);\n            minValue\
    \ = arr.get(i);\n            maxIndexValue = arr.get(i);\n            minIndexValue\
    \ = arr.get(i);\n        }\n        for(int i = arr.size() - 1; i >= 0; i--) {\n\
    \            if(arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
    \                maxIndex = i;\n            }\n            if(arr.get(i) < minValue)\
    \ {\n                minValue = arr.get(i);\n                minIndex = i;\n \
    \           }\n            if(arr.get(i) > maxIndexValue) {\n                maxIndexValue\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n            if(arr.get(i)\
    \ < minIndexValue) {\n                minIndexValue = arr.get(i);\n          \
    \      minIndex = i;\n            }\n        }\n        for(int i = arr.size()\
    \ - 1; i >= 0; i--) {\n            if(arr.get(i) > maxValue) {\n             \
    \   maxValue = arr.get(i);\n                maxIndex = i;\n            }\n   \
    \         if(arr.get(i) < minValue) {\n                minValue = arr.get(i);\n\
    \                minIndex = i;\n            }\n            if(arr.get(i) > maxIndexValue)\
    \ {\n                maxIndexValue = arr.get(i);\n                maxIndex = i;\n\
    \            }\n            if(arr.get(i) < minIndexValue) {\n               \
    \ minIndexValue = arr.get(i);\n                minIndex = i;\n            }\n\
    \        }\n        for(int i = arr.size() - 1; i >= 0; i--) {\n            if(arr.get(i)\
    \ > maxValue) {\n                maxValue = arr.get(i);\n                maxIndex\
    \ = i;\n            }\n            if(arr.get(i) < minValue) {\n             \
    \   minValue = arr.get(i);\n                minIndex = i;\n            }\n   \
    \         if(arr.get(i) > maxIndexValue) {\n                maxIndexValue = arr.get(i);\n\
    \                maxIndex = i;\n            }\n            if(arr.get(i) < minIndexValue)\
    \ {\n                minIndexValue = arr.get(i);\n                minIndex = i;\n\
    \            }\n        }\n        for(int i = arr.size() - 1; i >= 0; i--) {\n\
    \            if(arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
    \                maxIndex = i;\n            }\n            if(arr.get(i) < minValue)\
    \ {\n                minValue = arr.get(i);\n                minIndex = i;\n \
    \           }\n            if(arr\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjyuxdvnh.java:107: error: ')' expected\n            if(arr\n  \
    \                ^\n/tmp/tmpjyuxdvnh.java:108: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpjyuxdvnh.java:109: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpjyuxdvnh.java:109:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpjyuxdvnh.java:109: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                 ^\n/tmp/tmpjyuxdvnh.java:109:\
    \ error: '.class' expected\n    public static void main(String[] args) {\n   \
    \                                  ^\n/tmp/tmpjyuxdvnh.java:109: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpjyuxdvnh.java:123: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            min = Math.min(min, arr.get(i));\n        }\n    \
    \    for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                res.add(max);\n                max = Long.MAX_VALUE;\n  \
    \          }\n            else if(arr.get(i) == min) {\n                res.add(min);\n\
    \                min = Long.MAX_VALUE;\n            }\n            else if(arr.get(i)\
    \ > max && arr.get(i) > min) {\n                res.add(arr.get(i));\n       \
    \     }\n        }\n        return res;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ni_munv.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long min = Long.MAX_VALUE;\n        long sum =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n            }\n    \
    \        if(sum < min) {\n                min = sum;\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n\
    \            if(sum > max) {\n                max = sum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmktwq3eo.java:135: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpmktwq3eo.java:135: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpmktwq3eo.java:135: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpmktwq3eo.java:135: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpmktwq3eo.java:135: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpmktwq3eo.java:149: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long tempMax = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) > max) {\n                max\
    \ = arr.get(i);\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) == max) {\n                temp.add(arr.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) > max) {\n                tempMax = arr.get(i);\n    \
    \        }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n       \
    \     if(arr.get(i) == max) {\n                temp.add(arr.get(i));\n       \
    \     }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n          \
    \  if(arr.get(i) == max) {\n                temp.add(arr.get(i));\n          \
    \  }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ == max) {\n                temp.add(arr.get(i));\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                temp.add(arr.get(i));\n            }\n        }\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n\
    \                temp.add(arr.get(i));\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n       \
    \         temp.add(arr.get(i));\n            }\n        }\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n           \
    \     temp.add(arr.get(i));\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n              \
    \  temp.add(arr.get(i));\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                temp.add(arr.get(i));\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                temp.add(arr.get(i));\n   \
    \         }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n      \
    \      if(arr.get(i) == max) {\n                temp.add(arr.get(i));\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   if(arr.get(i) == max) {\n                temp.add(arr.get(i));\n         \
    \   }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ == max) {\n                temp.add(arr.get(i));\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                temp.add(arr.get(i));\n            }\n        }\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n\
    \                temp.add(arr.get(i));\n            }\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo3esbv14.java:119: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        long currentMax = arr.get(0);\n        long\
    \ currentMaxIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n      \
    \      if(arr.get(i) > currentMax) {\n                currentMax = arr.get(i);\n\
    \                currentMaxIndex = i;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == currentMax) {\n\
    \                result.add(arr.get(i));\n                result.add(arr.get(currentMaxIndex));\n\
    \                result.add(arr.get(currentMaxIndex + 1));\n                result.add(arr.get(currentMaxIndex\
    \ + 2));\n                result.add(arr.get(currentMaxIndex + 3));\n        \
    \        result.add(arr.get(currentMaxIndex + 4));\n                result.add(arr.get(currentMaxIndex\
    \ + 5));\n                result.add(arr.get(currentMaxIndex + 6));\n        \
    \        result.add(arr.get(currentMaxIndex + 7));\n                result.add(arr.get(currentMaxIndex\
    \ + 8));\n                result.add(arr.get(currentMaxIndex + 9));\n        \
    \        result.add(arr.get(currentMaxIndex + 10));\n                result.add(arr.get(currentMaxIndex\
    \ + 11));\n                result.add(arr.get(currentMaxIndex + 12));\n      \
    \          result.add(arr.get(currentMaxIndex + 13));\n                result.add(arr.get(currentMaxIndex\
    \ + 14));\n                result.add(arr.get(currentMaxIndex + 15));\n      \
    \          result.add(arr.get(currentMaxIndex + 16));\n                result.add(arr.get(currentMaxIndex\
    \ + 17));\n                result.add(arr.get(currentMaxIndex + 18));\n      \
    \          result.add(arr.get(currentMaxIndex + 19));\n                result.add(arr.get(currentMaxIndex\
    \ + 20));\n                result.add(arr.get(currentMaxIndex + 21));\n      \
    \          result.add(arr.get(currentMaxIndex + 22));\n                result.add(arr.get(currentMaxIndex\
    \ + 23));\n                result.add(arr.get(currentMaxIndex + 24));\n      \
    \          result.add(arr.get(currentMaxIndex + 25));\n                result.add(arr.get(currentMaxIndex\
    \ + 26));\n                result.add(arr.get(currentMaxIndex + 27));\n      \
    \          result.add(arr.get(currentMaxIndex + 28));\n                result.add(arr.get(currentMaxIndex\
    \ + 29));\n                result.add(arr.get(currentMaxIndex + 30));\n      \
    \          result.add(arr.get(currentMaxIndex + 31));\n                result.add(arr.get(currentMaxIndex\
    \ + 32));\n                result.add(arr.get(currentMaxIndex + 33));\n      \
    \          result.add(arr.get(current\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu_0kk96w.java:74: error: ')' expected\n                result.add(arr.get(current\n\
    \                                          ^\n/tmp/tmpu_0kk96w.java:75: error:\
    \ ';' expected\n    }\n     ^\n/tmp/tmpu_0kk96w.java:76: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n           ^\n\
    /tmp/tmpu_0kk96w.java:76: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpu_0kk96w.java:76: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpu_0kk96w.java:76: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpu_0kk96w.java:90:\
    \ error: reached end of file while parsing\n}\n ^\n/tmp/tmpu_0kk96w.java:91: error:\
    \ reached end of file while parsing\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentMax = arr.get(0);\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxValue = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n\
    \            if(arr.get(i) > currentMax) {\n                currentMax = arr.get(i);\n\
    \                currentMaxIndex = i;\n                currentMaxValue = arr.get(i);\n\
    \            }\n        }\n        while(currentMaxIndex != k) {\n           \
    \ result.add(currentMaxValue);\n            currentMaxValue = arr.get(currentMaxIndex\
    \ + 1);\n            currentMaxIndex++;\n        }\n        result.add(currentMaxValue);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4uv1e17n.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp4uv1e17n.java:41: error: no suitable method found for get(long)\n\
    \            currentMaxValue = arr.get(currentMaxIndex + 1);\n               \
    \                  ^\n    method List.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; pos"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (maxIndex ==\
    \ arr.size() - 1) {\n            result.add(max);\n        } else {\n        \
    \    result.add(max, maxIndex);\n        }\n        if (k > result.size()) {\n\
    \            k = result.size();\n        }\n        return result.subList(0, k);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl2pzhk0r.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpl2pzhk0r.java:38: error: no suitable method found for add(long,long)\n\
    \            result.add(max, maxIndex);\n                  ^\n    method List.add(int,Long)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.add(int,Long) is not applicable\n    \
    \  (argument mismatch; possible lossy conversio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long tempMax = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                temp.add(arr.get(i));\n            }\n        }\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n\
    \                tempMax = tempMax;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n       \
    \         tempMax = tempMax;\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n              \
    \  tempMax = tempMax;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) == max) {\n                tempMax = tempMax;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                tempMax = tempMax;\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   if(arr.get(i) == max) {\n                tempMax = tempMax;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ == max) {\n                tempMax = tempMax;\n            }\n        }\n  \
    \      for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                tempMax = tempMax;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n       \
    \         tempMax = tempMax;\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n              \
    \  tempMax = tempMax;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) == max) {\n                tempMax = tempMax;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                tempMax = tempMax;\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   if(arr.get(i) == max) {\n                tempMax = tempMax;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ == max) {\n                tempMax = tempMax;\n            }\n        }\n  \
    \      for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                tempMax = tempMax;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n       \
    \         tempMax = tempMax;\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size()\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr9dauae2.java:117: error: ';' expected\n        for(int i = 0;\
    \ i < arr.size()\n                                     ^\n/tmp/tmpr9dauae2.java:118:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmpr9dauae2.java:118:\
    \ error: ')' expected\n    }\n     ^\n/tmp/tmpr9dauae2.java:119: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpr9dauae2.java:119: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                 ^\n/tmp/tmpr9dauae2.java:119: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpr9dauae2.java:119: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpr9dauae2.java:133: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        for (int i = 0; i < k; i++) {\n            max = Math.max(max, arr.get(i));\n\
    \        }\n        result.add(max);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0l6jul8.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            long\
    \ curr = arr.get(i);\n            if(curr > max) {\n                max = curr;\n\
    \                maxIndex = i;\n            }\n        }\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n           \
    \ if(curr == max) {\n                result.add(max);\n                maxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long curr = arr.get(i);\n            if(curr == max) {\n    \
    \            result.add(max);\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            long curr\
    \ = arr.get(i);\n            if(curr == max) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n        }\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n           \
    \ if(curr == max) {\n                result.add(max);\n                maxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long curr = arr.get(i);\n            if(curr == max) {\n    \
    \            result.add(max);\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            long curr\
    \ = arr.get(i);\n            if(curr == max) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n        }\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n           \
    \ if(curr == max) {\n                result.add(max);\n                maxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long curr = arr.get(i);\n            if(curr == max) {\n    \
    \            result.add(max);\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            long curr\
    \ = arr.get(i);\n            if(curr == max) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n        }\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n           \
    \ if(curr == max) {\n                result.add(max);\n                maxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long curr = arr.get(i);\n            if(curr == max) {\n    \
    \            result.add(max);\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            long curr\
    \ = arr.get(i);\n            if(curr == max) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n        }\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n           \
    \ if(curr == max) {\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpns1zy5f5.java:124: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpns1zy5f5.java:124: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpns1zy5f5.java:124: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpns1zy5f5.java:124: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpns1zy5f5.java:124: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpns1zy5f5.java:138: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = 0;\n\
    \        long maxIndex = 0;\n        long minIndex = 0;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n     \
    \       min = Math.min(min, arr.get(i));\n            maxIndex = i;\n        \
    \    minIndex = i;\n        }\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            if(arr.get(i) == max) {\n                result.add(max);\n     \
    \           maxIndex++;\n            }\n            if(arr.get(i) == min) {\n\
    \                result.add(min);\n                minIndex++;\n            }\n\
    \        }\n        if(maxIndex - minIndex > k) {\n            k = maxIndex -\
    \ minIndex;\n        }\n        for(int i = 0; i < k; i++) {\n            result.add(arr.get(minIndex));\n\
    \            minIndex++;\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwg7v1j04.java:50: error: no suitable method found for get(long)\n\
    \            result.add(arr.get(minIndex));\n                          ^\n   \
    \ method List.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n    method AbstractList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        long index = 0;\n        long value = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            index = i;\n            value = arr.get(i);\n\
    \            for(int j = i; j < arr.size(); j++) {\n                if(arr.get(j)\
    \ > value) {\n                    index = j;\n                    value = arr.get(j);\n\
    \                }\n            }\n            tmp.add(value);\n            if(tmp.size()\
    \ > k) {\n                max = tmp.get(k);\n                maxIndex = index;\n\
    \                maxValue = value;\n            }\n            tmp.remove(value);\n\
    \        }\n        result.add(maxValue);\n        result.add(maxIndex);\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1e2lu67c.java:43: error: no suitable method found for get(long)\n\
    \                max = tmp.get(k);\n                         ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method ArrayList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) {\n                max = arr.get(i);\n            }\n        }\n      \
    \  if (k > max) {\n            k = max;\n        }\n        ArrayList<Long> temp\
    \ = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            temp.add(arr.get(i));\n\
    \        }\n        result.addAll(temp);\n        return result;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr5y19ts2.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long maxIndex\
    \ = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        if (maxIndex + 1\
    \ == arr.size()) {\n            result.add(max);\n        }\n        if (maxIndex\
    \ - 1 == -1) {\n            result.add(max);\n        }\n        if (maxIndex\
    \ - 1 == arr.size() - 1) {\n            result.add(max);\n        }\n        if\
    \ (maxIndex - 1 != -1) {\n            result.add(max);\n        }\n        if\
    \ (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n        }\n\
    \        if (maxIndex - 1 != -1) {\n            result.add(max);\n        }\n\
    \        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex - 1 != -1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex + 1 != arr.size() - 1) {\n            result.add(max);\n\
    \        }\n        if (maxIndex\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppwk824zz.java:122: error: ')' expected\n        if (maxIndex\n\
    \                    ^\n/tmp/tmppwk824zz.java:123: error: illegal start of statement\n\
    \    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = 0;\n        long currentMax = Long.MIN_VALUE;\n        long currentMaxIndex\
    \ = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            currentMax\
    \ = arr.get(i);\n            currentMaxIndex = i;\n            for(int j = i +\
    \ 1; j < arr.size(); j++) {\n                if(arr.get(j) > currentMax) {\n \
    \                   currentMax = arr.get(j);\n                    currentMaxIndex\
    \ = j;\n                }\n            }\n            if(currentMaxIndex != i)\
    \ {\n                result.add(currentMax);\n                result.add(currentMaxIndex);\n\
    \                max = Math.max(max, currentMax);\n            }\n        }\n\
    \        if(max != Long.MIN_VALUE) {\n            result.add(max);\n         \
    \   result.add(maxIndex);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkbww56aj.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long tempMax = 0;\n        long tempMaxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         temp = arr;\n            tempMax = max;\n            tempMaxIndex =\
    \ i;\n            for(int j = 0; j < arr.size(); j++) {\n                if(temp.get(j)\
    \ > tempMax) {\n                    tempMax = temp.get(j);\n                 \
    \   tempMaxIndex = j;\n                }\n            }\n            if(tempMaxIndex\
    \ != i) {\n                temp.set(tempMaxIndex, temp.get(i));\n            \
    \    temp.remove(i);\n            }\n            result.add(tempMax);\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa0r14f9u.java:44: error: no suitable method found for set(long,Long)\n\
    \                temp.set(tempMaxIndex, temp.get(i));\n                    ^\n\
    \    method List.set(int,Long) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.set(int,Long) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\n    method ArrayList.set(int,Long) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (maxIndex ==\
    \ k) {\n            result.add(max);\n            return result;\n        }\n\
    \        ArrayList<Long> left = new ArrayList<>();\n        ArrayList<Long> right\
    \ = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (i < maxIndex) {\n                left.add(arr.get(i));\n         \
    \   } else if (i > maxIndex) {\n                right.add(arr.get(i));\n     \
    \       }\n        }\n        ArrayList<Long> result = maximum(left, k);\n   \
    \     result.add(max);\n        result = maximum(result, k);\n        result.add(max);\n\
    \        result = maximum(result, k);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4s18jh4l.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp4s18jh4l.java:48: error: variable result is already defined\
    \ in method maximum(ArrayList<Long>,long)\n        ArrayList<Long> result = maximum(left,\
    \ k);\n                        ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                result.add(temp);\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptb5bd1lv.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        for (int i = 1; i < k; i++) {\n            if (arr.get(i) > max) {\n\
    \                max = arr.get(i);\n            }\n        }\n        result.add(max);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2qmo27p0.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long maxValue = 0;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if(value > maxValue) {\n\
    \                maxValue = value;\n                maxIndex = i;\n          \
    \  }\n        }\n        max = maxValue;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value > maxValue)\
    \ {\n                maxValue = value;\n                maxIndex = i;\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if(value == maxValue) {\n          \
    \      result.add(maxIndex);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp42clm0fv.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        long sum = 0;\n        long count = 0;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            temp = arr.get(i);\n            sum += temp;\n         \
    \   count++;\n            if(count > k) {\n                result.add(temp);\n\
    \                max = temp;\n                count = 0;\n            }\n    \
    \        else if(count == k) {\n                if(temp > max) {\n           \
    \         result.add(temp);\n                    max = temp;\n               \
    \ }\n            }\n        }\n        if(count > 0) {\n            result.add(max);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppwsww4ju.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(k\
    \ - 1);\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) > max)\
    \ {\n                max = arr.get(i);\n            }\n        }\n        result.add(max);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp22bqoco5.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp22bqoco5.java:27: error: no suitable method found for get(long)\n\
    \        long max = arr.get(k - 1);\n                      ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i =\
    \ 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpus22fz1t.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max && temp > k) {\n                result.add(temp);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ngko1te.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long maxValue = arr.get(0);\n        long\
    \ maxIndex = -1;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > maxValue) {\n                maxValue = arr.get(i);\n                maxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) == maxValue) {\n                result.add(maxIndex);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuqa1hp3u.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(k - 1);\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ > maxValue) {\n                maxValue = arr.get(i);\n            }\n     \
    \   }\n        result.add(maxValue);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppd2qyvq6.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmppd2qyvq6.java:27: error: no suitable method found for get(long)\n\
    \        long maxValue = arr.get(k - 1);\n                           ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion fro"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            min = Math.min(min, arr.get(i));\n        }\n    \
    \    for(int i = 0; i < arr.size(); i++) {\n            if((arr.get(i) - min)\
    \ >= (max - min)) {\n                result.add(arr.get(i));\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzhybx1ye.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long maxIndex2 = arr.size() - 1;\n        long maxIndex3 = arr.size() - 1;\n\
    \        long maxIndex4 = arr.size() - 1;\n        long maxIndex5 = arr.size()\
    \ - 1;\n        long maxIndex6 = arr.size() - 1;\n        long maxIndex7 = arr.size()\
    \ - 1;\n        long maxIndex8 = arr.size() - 1;\n        long maxIndex9 = arr.size()\
    \ - 1;\n        long maxIndex10 = arr.size() - 1;\n        long maxIndex11 = arr.size()\
    \ - 1;\n        long maxIndex12 = arr.size() - 1;\n        long maxIndex13 = arr.size()\
    \ - 1;\n        long maxIndex14 = arr.size() - 1;\n        long maxIndex15 = arr.size()\
    \ - 1;\n        long maxIndex16 = arr.size() - 1;\n        long maxIndex17 = arr.size()\
    \ - 1;\n        long maxIndex18 = arr.size() - 1;\n        long maxIndex19 = arr.size()\
    \ - 1;\n        long maxIndex20 = arr.size() - 1;\n        long maxIndex21 = arr.size()\
    \ - 1;\n        long maxIndex22 = arr.size() - 1;\n        long maxIndex23 = arr.size()\
    \ - 1;\n        long maxIndex24 = arr.size() - 1;\n        long maxIndex25 = arr.size()\
    \ - 1;\n        long maxIndex26 = arr.size() - 1;\n        long maxIndex27 = arr.size()\
    \ - 1;\n        long maxIndex28 = arr.size() - 1;\n        long maxIndex29 = arr.size()\
    \ - 1;\n        long maxIndex30 = arr.size() - 1;\n        long maxIndex31 = arr.size()\
    \ - 1;\n        long maxIndex32 = arr.size() - 1;\n        long maxIndex33 = arr.size()\
    \ - 1;\n        long maxIndex34 = arr.size() - 1;\n        long maxIndex35 = arr.size()\
    \ - 1;\n        long maxIndex36 = arr.size() - 1;\n        long maxIndex37 = arr.size()\
    \ - 1;\n        long maxIndex38 = arr.size() - 1;\n        long maxIndex39 = arr.size()\
    \ - 1;\n        long maxIndex40 = arr.size() - 1;\n        long maxIndex41 = arr.size()\
    \ - 1;\n        long maxIndex42 = arr.size() - 1;\n        long maxIndex43 = arr.size()\
    \ - 1;\n        long maxIndex44 = arr.size() - 1;\n        long maxIndex45 = arr.size()\
    \ - 1;\n        long maxIndex\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0g42jj48.java:73: error: ';' expected\n        long maxIndex\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> max = new ArrayList<>();\n\
    \        ArrayList<Long> temp = new ArrayList<>();\n        long maxNum = Long.MIN_VALUE;\n\
    \        long minNum = Long.MAX_VALUE;\n        long maxSum = Long.MIN_VALUE;\n\
    \        long minSum = Long.MAX_VALUE;\n        long sum = 0;\n        long tempSum\
    \ = 0;\n        long tempSum2 = 0;\n        long tempSum3 = 0;\n        long tempSum4\
    \ = 0;\n        long tempSum5 = 0;\n        long tempSum6 = 0;\n        long tempSum7\
    \ = 0;\n        long tempSum8 = 0;\n        long tempSum9 = 0;\n        long tempSum10\
    \ = 0;\n        long tempSum11 = 0;\n        long tempSum12 = 0;\n        long\
    \ tempSum13 = 0;\n        long tempSum14 = 0;\n        long tempSum15 = 0;\n \
    \       long tempSum16 = 0;\n        long tempSum17 = 0;\n        long tempSum18\
    \ = 0;\n        long tempSum19 = 0;\n        long tempSum20 = 0;\n        long\
    \ tempSum21 = 0;\n        long tempSum22 = 0;\n        long tempSum23 = 0;\n \
    \       long tempSum24 = 0;\n        long tempSum25 = 0;\n        long tempSum26\
    \ = 0;\n        long tempSum27 = 0;\n        long tempSum28 = 0;\n        long\
    \ tempSum29 = 0;\n        long tempSum30 = 0;\n        long tempSum31 = 0;\n \
    \       long tempSum32 = 0;\n        long tempSum33 = 0;\n        long tempSum34\
    \ = 0;\n        long tempSum35 = 0;\n        long tempSum36 = 0;\n        long\
    \ tempSum37 = 0;\n        long tempSum38 = 0;\n        long tempSum39 = 0;\n \
    \       long tempSum40 = 0;\n        long tempSum41 = 0;\n        long tempSum42\
    \ = 0;\n        long tempSum43 = 0;\n        long tempSum44 = 0;\n        long\
    \ tempSum45 = 0;\n        long tempSum46 = 0;\n        long tempSum47 = 0;\n \
    \       long tempSum48 = 0;\n        long tempSum49 = 0;\n        long tempSum50\
    \ = 0;\n        long tempSum51 = 0;\n        long tempSum52 = 0;\n        long\
    \ tempSum53 = 0;\n        long tempSum54 = 0;\n        long tempSum55 = 0;\n \
    \       long tempSum56 = 0;\n        long tempSum57 = 0;\n        long tempSum58\
    \ = 0;\n        long tempSum59 = 0;\n        long tempSum60 = 0;\n        long\
    \ tempSum61 = 0;\n        long tempSum62 = 0;\n        long tempSum63 = 0;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprcw7pzu6.java:97: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long maxValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value > maxValue)\
    \ {\n                maxValue = value;\n                maxIndex = i;\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if(value == maxValue) {\n          \
    \      result.add(maxValue);\n                result.add(maxIndex);\n        \
    \        result.add(value);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwthoc9od.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            if(max > k) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjzmtr9xz.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n     \
    \   long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long\
    \ sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long sum10\
    \ = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13 =\
    \ 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n\
    \        long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n \
    \       long sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n  \
    \      long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n   \
    \     long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n    \
    \    long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n     \
    \   long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n      \
    \  long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n       \
    \ long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long\
    \ sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44\
    \ = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 =\
    \ 0;\n        long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n\
    \        long sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n \
    \       long sum54 = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n  \
    \      long sum57 = 0;\n        long sum58 = 0;\n        long sum59 = 0;\n   \
    \     long sum60 = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n    \
    \    long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n     \
    \   long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n      \
    \  long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n       \
    \ long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long\
    \ sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long sum78\
    \ = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81 =\
    \ 0;\n        long sum82 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphz5svudq.java:110: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmphz5svudq.java:110: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        for (long i : arr) {\n            if (i < min) {\n                min\
    \ = i;\n            }\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (max > min) {\n            int count = 0;\n\
    \            long maxCount = 0;\n            for (long i : arr) {\n          \
    \      if (i == max) {\n                    maxCount++;\n                }\n \
    \               if (maxCount >= k) {\n                    result.add(max);\n \
    \                   maxCount = 0;\n                }\n            }\n        \
    \    if (maxCount >= k) {\n                result.add(max);\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2addrvgd.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            if(i == 0 || max != arr.get(i)) {\n              \
    \  result.add(max);\n                maxIndex = i;\n            }\n        }\n\
    \        ArrayList<Long> result2 = new ArrayList<>();\n        for(int i = 0;\
    \ i < k; i++) {\n            result2.add(arr.get(maxIndex));\n            maxIndex++;\n\
    \        }\n        result2.add(max);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvgs7g3s4.java:37: error: no suitable method found for get(long)\n\
    \            result2.add(arr.get(maxIndex));\n                           ^\n \
    \   method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = 0;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue) {\n      \
    \          maxValue = arr.get(i);\n                maxIndex = i;\n           \
    \ }\n        }\n        result.add(maxValue);\n        if (maxIndex < k) {\n \
    \           result.add(maxValue);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi3m2icpe.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        int count = 0;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            max = Math.max(max, arr.get(i));\n            count++;\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(count\
    \ == k) {\n                result.add(arr.get(i));\n                count--;\n\
    \            }\n            else if(count > k) {\n                result.add(arr.get(i));\n\
    \                count--;\n            }\n            else {\n               \
    \ temp.add(arr.get(i));\n            }\n        }\n        for(int i = 0; i <\
    \ temp.size(); i++) {\n            max = Math.max(max, temp.get(i));\n       \
    \ }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07crqsl6.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (max < arr.get(i)) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        ArrayList<Long>\
    \ temp = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (i == maxIndex) {\n                temp.add(arr.get(i));\n   \
    \         }\n        }\n        result.addAll(temp);\n        if (result.size()\
    \ > k) {\n            result.remove(k);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw6vcv2l1.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long maxIndex\
    \ = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \           }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n    \
    \        if(arr.get(i) > max) {\n                result.add(max);\n          \
    \      max = arr.get(i);\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprj4c86x4.java:34: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = maxIndex; i < arr.size(); i++) {\n   \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long maxIndexValue = arr.get(maxIndex);\n        while (maxIndexValue != 0)\
    \ {\n            long currentValue = arr.get(maxIndex);\n            if (currentValue\
    \ == 0) {\n                maxIndex--;\n                maxIndexValue = arr.get(maxIndex);\n\
    \            } else {\n                result.add(maxValue);\n               \
    \ maxValue = currentValue;\n                maxIndex--;\n                maxIndexValue\
    \ = arr.get(maxIndex);\n            }\n        }\n        if (maxIndex < arr.size()\
    \ - 1) {\n            result.add(maxValue);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxd1k9zll.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpxd1k9zll.java:29: error: no suitable method found for get(long)\n\
    \        long maxIndexValue = arr.get(maxIndex);\n                           \
    \     ^\n    method List.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy c"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (max < arr.get(i))\
    \ {\n                max = arr.get(i);\n            }\n        }\n        if (max\
    \ > k) {\n            max = k;\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (max < arr.get(i)) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjzkbg2xr.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long temp = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            temp = arr.get(i);\n            if(temp > max) {\n              \
    \  max = temp;\n                maxIndex = i;\n            }\n        }\n    \
    \    for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n \
    \           if(temp == max) {\n                result.add(temp);\n           \
    \     result.add(maxIndex);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f9x4_3l.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(arr.size()\
    \ - 1);\n        long maxIndex = arr.size() - 1;\n        for (int i = 0; i <\
    \ arr.size() - k; i++) {\n            if (arr.get(i) > max) {\n              \
    \  max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        result.add(max);\n        result.add(arr.get(maxIndex));\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp98mjjfoz.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp98mjjfoz.java:36: error: no suitable method found for get(long)\n\
    \        result.add(arr.get(maxIndex));\n                      ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            if(i == arr.size() - 1) {\n                result.add(max);\n\
    \            }\n            else if(max < arr.get(i)) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n        }\n        if(result.size()\
    \ > k) {\n            result.remove(k);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmownt3fy.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long maxIndexValue = arr.get(maxIndex);\n        long maxIndexIndexValue =\
    \ arr.get(maxIndex - 1);\n        long maxIndexIndexIndexValue = arr.get(maxIndex\
    \ - 2);\n        long maxIndexIndexIndexIndexValue = arr.get(maxIndex - 3);\n\
    \        long maxIndexIndexIndexIndexIndexValue = arr.get(maxIndex - 4);\n   \
    \     long maxIndexIndexIndexIndexIndexIndexValue = arr.get(maxIndex - 5);\n \
    \       long maxIndexIndexIndexIndexIndexIndexIndexValue = arr.get(maxIndex -\
    \ 6);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexValue = arr.get(maxIndex\
    \ - 7);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexValue =\
    \ arr.get(maxIndex - 8);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 9);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 10);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 11);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 12);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 13);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 14);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 15);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 16);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 17);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 18);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 19);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 20);\n        long maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = arr.get(maxIndex - 21);\n        long max\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9_ht8lfc.java:51: error: ';' expected\n        long max\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(max < arr.get(i)) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(maxIndex != i) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5gpqauoj.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp5gpqauoj.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(k);\n        long maxIndex = 0;\n        for(int i = 0; i < k; i++)\
    \ {\n            if(arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n\
    \                maxIndex = i;\n            }\n        }\n        result.add(maxValue);\n\
    \        for(int i = k; i < arr.size(); i++) {\n            if(arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        result.add(maxValue);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdft7aosu.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpdft7aosu.java:27: error: no suitable method found for get(long)\n\
    \        long maxValue = arr.get(k);\n                           ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from lo"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long maxIndex2 = arr.size() - 1;\n        long maxIndex3 = arr.size() - 1;\n\
    \        long maxIndex4 = arr.size() - 1;\n        long maxIndex5 = arr.size()\
    \ - 1;\n        long maxIndex6 = arr.size() - 1;\n        long maxIndex7 = arr.size()\
    \ - 1;\n        long maxIndex8 = arr.size() - 1;\n        long maxIndex9 = arr.size()\
    \ - 1;\n        long maxIndex10 = arr.size() - 1;\n        long maxIndex11 = arr.size()\
    \ - 1;\n        long maxIndex12 = arr.size() - 1;\n        long maxIndex13 = arr.size()\
    \ - 1;\n        long maxIndex14 = arr.size() - 1;\n        long maxIndex15 = arr.size()\
    \ - 1;\n        long maxIndex16 = arr.size() - 1;\n        long maxIndex17 = arr.size()\
    \ - 1;\n        long maxIndex18 = arr.size() - 1;\n        long maxIndex19 = arr.size()\
    \ - 1;\n        long maxIndex20 = arr.size() - 1;\n        long maxIndex21 = arr.size()\
    \ - 1;\n        long maxIndex22 = arr.size() - 1;\n        long maxIndex23 = arr.size()\
    \ - 1;\n        long maxIndex24 = arr.size() - 1;\n        long maxIndex25 = arr.size()\
    \ - 1;\n        long maxIndex26 = arr.size() - 1;\n        long maxIndex27 = arr.size()\
    \ - 1;\n        long maxIndex28 = arr.size() - 1;\n        long maxIndex29 = arr.size()\
    \ - 1;\n        long maxIndex30 = arr.size() - 1;\n        long maxIndex31 = arr.size()\
    \ - 1;\n        long maxIndex32 = arr.size() - 1;\n        long maxIndex33 = arr.size()\
    \ - 1;\n        long maxIndex34 = arr.size() - 1;\n        long maxIndex35 = arr.size()\
    \ - 1;\n        long maxIndex36 = arr.size() - 1;\n        long maxIndex37 = arr.size()\
    \ - 1;\n        long maxIndex38 = arr.size() - 1;\n        long maxIndex39 = arr.size()\
    \ - 1;\n        long maxIndex40 = arr.size() - 1;\n        long maxIndex41 = arr.size()\
    \ - 1;\n        long maxIndex42 = arr.size() - 1;\n        long maxIndex43 = arr.size()\
    \ - 1;\n        long maxIndex44 = arr.size() - 1;\n        long maxIndex45 = arr.size()\
    \ - 1;\n        long maxIndex\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpft74w8w5.java:73: error: ';' expected\n        long maxIndex\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                result.add(temp);\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuupoc34x.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long maxValue = arr.get(0);\n        long\
    \ maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) > maxValue) {\n                maxValue = arr.get(i);\n     \
    \           maxIndex = i;\n            }\n        }\n        result.add(maxValue);\n\
    \        if (maxIndex + 1 < arr.size()) {\n            ArrayList<Long> subResult\
    \ = maximum(arr, k - 1);\n            for (int i = 0; i < subResult.size(); i++)\
    \ {\n                result.add(subResult.get(i));\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pwemn5m.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(arr.size()\
    \ - 1);\n        long maxIndex = arr.size() - 1;\n        long maxCount = 0;\n\
    \        long maxCountIndex = 0;\n        long maxCountValue = 0;\n        long\
    \ maxCountValueIndex = 0;\n        long maxCountValueValue = 0;\n        long\
    \ maxCountValueValueIndex = 0;\n        long maxCountValueValueValue = 0;\n  \
    \      long maxCountValueValueValueIndex = 0;\n        long maxCountValueValueValueIndex\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n        long maxCountValueValueValueIndexValueValue\
    \ = 0;\n        long maxCountValueValueValueValue = 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkkdvhp4_.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpkkdvhp4_.java:37: error: variable maxCountValueValueValueIndex\
    \ is already defined in method maximum(ArrayList<Long>,long)\n        long maxCountValueValueValueIndex\
    \ = 0;\n             ^\n/tmp/tmpkkdvhp4_.java:40: error: variable maxCountValueValueValueValue\
    \ is already defined in method maximum(ArrayList<Long>,long)\n        long maxCountValueValueValueVa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = 0;\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            if(arr.get(i) > maxValue) {\n       \
    \         maxValue = arr.get(i);\n                maxIndex = i;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(i !=\
    \ maxIndex) {\n                result.add(arr.get(i));\n            }\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8lycukcf.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(0);\n        long maxIndex = -1;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxValue =\
    \ arr.get(i);\n                maxIndex = i;\n            }\n        }\n     \
    \   if (maxIndex + k > arr.size()) {\n            k = arr.size() - maxIndex;\n\
    \        }\n        ArrayList<Long> subArr = new ArrayList<>();\n        for (int\
    \ i = 0; i < k; i++) {\n            subArr.add(arr.get(maxIndex + i));\n     \
    \   }\n        result.addAll(subArr);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8wpbxs7m.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8wpbxs7m.java:40: error: no suitable method found for get(long)\n\
    \            subArr.add(arr.get(maxIndex + i));\n                          ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long tempMax = 0;\n        long tempMax2 = 0;\n\
    \        long tempMax3 = 0;\n        long tempMax4 = 0;\n        long tempMax5\
    \ = 0;\n        long tempMax6 = 0;\n        long tempMax7 = 0;\n        long tempMax8\
    \ = 0;\n        long tempMax9 = 0;\n        long tempMax10 = 0;\n        long\
    \ tempMax11 = 0;\n        long tempMax12 = 0;\n        long tempMax13 = 0;\n \
    \       long tempMax14 = 0;\n        long tempMax15 = 0;\n        long tempMax16\
    \ = 0;\n        long tempMax17 = 0;\n        long tempMax18 = 0;\n        long\
    \ tempMax19 = 0;\n        long tempMax20 = 0;\n        long tempMax21 = 0;\n \
    \       long tempMax22 = 0;\n        long tempMax23 = 0;\n        long tempMax24\
    \ = 0;\n        long tempMax25 = 0;\n        long tempMax26 = 0;\n        long\
    \ tempMax27 = 0;\n        long tempMax28 = 0;\n        long tempMax29 = 0;\n \
    \       long tempMax30 = 0;\n        long tempMax31 = 0;\n        long tempMax32\
    \ = 0;\n        long tempMax33 = 0;\n        long tempMax34 = 0;\n        long\
    \ tempMax35 = 0;\n        long tempMax36 = 0;\n        long tempMax37 = 0;\n \
    \       long tempMax38 = 0;\n        long tempMax39 = 0;\n        long tempMax40\
    \ = 0;\n        long tempMax41 = 0;\n        long tempMax42 = 0;\n        long\
    \ tempMax43 = 0;\n        long tempMax44 = 0;\n        long tempMax45 = 0;\n \
    \       long tempMax46 = 0;\n        long tempMax47 = 0;\n        long tempMax48\
    \ = 0;\n        long tempMax49 = 0;\n        long tempMax50 = 0;\n        long\
    \ tempMax51 = 0;\n        long tempMax52 = 0;\n        long tempMax53 = 0;\n \
    \       long tempMax54 = 0;\n        long tempMax55 = 0;\n        long tempMax56\
    \ = 0;\n        long tempMax57 = 0;\n        long tempMax58 = 0;\n        long\
    \ tempMax59 = 0;\n        long tempMax60 = 0;\n        long tempMax61 = 0;\n \
    \       long tempMax62 = 0;\n        long tempMax63 = 0;\n        long tempMax64\
    \ = 0;\n        long tempMax65 = 0;\n        long tempMax66 = 0;\n        long\
    \ tempMax67 = 0;\n        long tempMax68 = 0;\n        long tempMax69 = 0;\n \
    \       long tempMax70 = 0;\n        long tempMax\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm0aat477.java:98: error: ';' expected\n        long tempMax\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex < k) {\n            result.add(arr.get(maxIndex));\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8z3vo37_.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8z3vo37_.java:37: error: no suitable method found for get(long)\n\
    \            result.add(arr.get(maxIndex));\n                          ^\n   \
    \ method List.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n    method AbstractList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion f"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long cur = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (cur < arr.get(i)) {\n                max = arr.get(i);\n         \
    \       cur = arr.get(i);\n            }\n            if (i == arr.size() - 1)\
    \ {\n                res.add(max);\n            }\n        }\n        return res;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoqq9pms0.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long tempMax = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if((arr.size() - i)\
    \ <= k) {\n                temp.add(arr.get(i));\n            } else {\n     \
    \           tempMax = Math.max(tempMax, arr.get(i));\n                if(tempMax\
    \ < max) {\n                    temp = new ArrayList<>();\n                  \
    \  temp.add(arr.get(i));\n                }\n            }\n        }\n      \
    \  for(int i = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprn6poatx.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                result.add(max);\n        \
    \        result.add(arr.get(maxIndex));\n                maxIndex++;\n       \
    \     }\n        }\n        if(result.size() > k) {\n            ArrayList<Long>\
    \ newResult = new ArrayList<>();\n            for(int i = 0; i < result.size();\
    \ i++) {\n                newResult.add(result.get(i));\n            }\n     \
    \       newResult.removeAll(Arrays.asList(Long.valueOf(-1000), Long.valueOf(1000)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(0)));\n          \
    \  newResult.removeAll(Arrays.asList(Long.valueOf(-1)));\n            newResult.removeAll(Arrays.asList(Long.valueOf(-2)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(-3)));\n         \
    \   newResult.removeAll(Arrays.asList(Long.valueOf(-4)));\n            newResult.removeAll(Arrays.asList(Long.valueOf(-5)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(-1)));\n         \
    \   newResult.removeAll(Arrays.asList(Long.valueOf(-2)));\n            newResult.removeAll(Arrays.asList(Long.valueOf(-3)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(-4)));\n         \
    \   newResult.removeAll(Arrays.asList(Long.valueOf(-5)));\n            newResult.removeAll(Arrays.asList(Long.valueOf(-6)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(-7)));\n         \
    \   newResult.removeAll(Arrays.asList(Long.valueOf(-8)));\n            newResult.removeAll(Arrays.asList(Long.valueOf(-9)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(-10)));\n        \
    \    newResult.removeAll(Arrays.asList(Long.valueOf(-11)));\n            newResult.removeAll(Arrays.asList(Long.valueOf(-12)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(-13)));\n        \
    \    newResult.removeAll(Arrays.asList(Long.valueOf(-14)));\n            newResult.removeAll(Arrays.asList(Long.valueOf(-15)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(-16)));\n        \
    \    newResult.removeAll(Arrays.asList(Long.valueOf(-17)));\n            newResult.removeAll(Arrays.asList(Long.valueOf(-18)));\n\
    \            newResult.removeAll(Arrays.asList(Long.valueOf(-\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgptofjdm.java:72: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpgptofjdm.java:72: error: ')' expected\n    }\n     ^\n/tmp/tmpgptofjdm.java:73:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpgptofjdm.java:73: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpgptofjdm.java:73: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpgptofjdm.java:73: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpgptofjdm.java:87:\
    \ error: reached end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(k\
    \ - 1);\n        long maxIndex = 0;\n        for(int i = 0; i < k; i++) {\n  \
    \          if(arr.get(i) > max) {\n                max = arr.get(i);\n       \
    \         maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        result.add(arr.get(maxIndex));\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwglj3a09.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpwglj3a09.java:27: error: no suitable method found for get(long)\n\
    \        long max = arr.get(k - 1);\n                      ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long temp = 0;\n        for (int i = 0; i < arr.size(); i++) {\n    \
    \        if (i == 0) {\n                max = arr.get(i);\n                temp\
    \ = arr.get(i);\n            } else if (arr.get(i) > max) {\n                max\
    \ = arr.get(i);\n                temp = arr.get(i);\n            }\n        }\n\
    \        if (k == 1) {\n            result.add(temp);\n        } else {\n    \
    \        for (int i = 0; i < arr.size() - k + 1; i++) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpen0z2cpf.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i =\
    \ 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0e7501g2.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        for\
    \ (long i : arr) {\n            if (max < i) {\n                max = i;\n   \
    \         }\n        }\n        if (max > Long.MAX_VALUE) {\n            max =\
    \ Long.MAX_VALUE;\n        }\n        if (k == 1) {\n            result.add(max);\n\
    \            return result;\n        }\n        ArrayList<Long> left = new ArrayList<>();\n\
    \        ArrayList<Long> right = new ArrayList<>();\n        long mid = max /\
    \ 2;\n        while (true) {\n            if (k == left.size() + right.size())\
    \ {\n                result.add(mid);\n                return result;\n      \
    \      }\n            if (k == left.size()) {\n                left.add(mid);\n\
    \                mid = mid + 1;\n            }\n            if (k == right.size())\
    \ {\n                right.add(mid);\n                mid = mid - 1;\n       \
    \     }\n            if (mid > max) {\n                break;\n            }\n\
    \            if (mid < max) {\n                if (k == left.size()) {\n     \
    \               left.add(mid);\n                    mid = mid + 1;\n         \
    \       }\n                if (k == right.size()) {\n                    right.add(mid);\n\
    \                    mid = mid - 1;\n                }\n            }\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (max < arr.get(i)) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (maxIndex ==\
    \ arr.size() - 1) {\n            result.add(max);\n        } else {\n        \
    \    while (maxIndex < arr.size() - 1) {\n                result.add(arr.get(maxIndex));\n\
    \                maxIndex++;\n            }\n            result.add(max);\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vfq2v93.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp5vfq2v93.java:39: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            if (maxValue < arr.get(i))\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        if (maxIndex - k >= 0) {\n            result.add(maxValue);\n\
    \            for (int i = maxIndex - k; i < maxIndex; i++) {\n               \
    \ result.add(arr.get(i));\n            }\n        } else {\n            result.add(maxValue);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph2vxb2wk.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmph2vxb2wk.java:37: error: incompatible types: possible lossy\
    \ conversion from long to int\n            for (int i = maxIndex - k; i < maxIndex;\
    \ i++) {\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long maxIndex2 = arr.size() - 1;\n        long maxIndex3 = arr.size() - 1;\n\
    \        long maxIndex4 = arr.size() - 1;\n        long maxIndex5 = arr.size()\
    \ - 1;\n        long maxIndex6 = arr.size() - 1;\n        long maxIndex7 = arr.size()\
    \ - 1;\n        long maxIndex8 = arr.size() - 1;\n        long maxIndex9 = arr.size()\
    \ - 1;\n        long maxIndex10 = arr.size() - 1;\n        long maxIndex11 = arr.size()\
    \ - 1;\n        long maxIndex12 = arr.size() - 1;\n        long maxIndex13 = arr.size()\
    \ - 1;\n        long maxIndex14 = arr.size() - 1;\n        long maxIndex15 = arr.size()\
    \ - 1;\n        long maxIndex16 = arr.size() - 1;\n        long maxIndex17 = arr.size()\
    \ - 1;\n        long maxIndex18 = arr.size() - 1;\n        long maxIndex19 = arr.size()\
    \ - 1;\n        long maxIndex20 = arr.size() - 1;\n        long maxIndex21 = arr.size()\
    \ - 1;\n        long maxIndex22 = arr.size() - 1;\n        long maxIndex23 = arr.size()\
    \ - 1;\n        long maxIndex24 = arr.size() - 1;\n        long maxIndex25 = arr.size()\
    \ - 1;\n        long maxIndex26 = arr.size() - 1;\n        long maxIndex27 = arr.size()\
    \ - 1;\n        long maxIndex28 = arr.size() - 1;\n        long maxIndex29 = arr.size()\
    \ - 1;\n        long maxIndex30 = arr.size() - 1;\n        long maxIndex31 = arr.size()\
    \ - 1;\n        long maxIndex32 = arr.size() - 1;\n        long maxIndex33 = arr.size()\
    \ - 1;\n        long maxIndex34 = arr.size() - 1;\n        long maxIndex35 = arr.size()\
    \ - 1;\n        long maxIndex36 = arr.size() - 1;\n        long maxIndex37 = arr.size()\
    \ - 1;\n        long maxIndex38 = arr.size() - 1;\n        long maxIndex39 = arr.size()\
    \ - 1;\n        long maxIndex40 = arr.size() - 1;\n        long maxIndex41 = arr.size()\
    \ - 1;\n        long maxIndex42 = arr.size() - 1;\n        long maxIndex43 = arr.size()\
    \ - 1;\n        long maxIndex44 = arr.size() - 1;\n        long maxIndex45 = arr.size()\
    \ - 1;\n        long maxIndex\n    }\n    public static void main(String[] args)\
    \ {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7fvbt1n9.java:73: error: ';' expected\n        long maxIndex\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        while(maxIndex < arr.size()\
    \ - k) {\n            result.add(max);\n            max++;\n            maxIndex++;\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3_2m16xl.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxVal = arr.get(0);\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ maxVal) {\n                maxVal = arr.get(i);\n                maxIndex =\
    \ i;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (i == maxIndex) {\n                temp.add(arr.get(i));\n   \
    \         } else {\n                temp.add(arr.get(i));\n            }\n   \
    \     }\n        if (temp.size() > k) {\n            max = temp.get(k);\n    \
    \    } else {\n            max = temp.get(temp.size() - 1);\n        }\n     \
    \   result.add(max);\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7k0k6chf.java:44: error: no suitable method found for get(long)\n\
    \            max = temp.get(k);\n                      ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method ArrayList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long maxValue = 0;\n        long temp = 0;\n        long temp2 =\
    \ 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n\
    \        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n \
    \       long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n\
    \        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n\
    \        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n\
    \        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5n6kdy38.java:111: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentValue = arr.get(0);\n        long currentIndex = arr.size() - 1;\n\
    \        while (currentIndex >= 0) {\n            if (currentValue > maxValue)\
    \ {\n                maxValue = currentValue;\n                maxIndex = currentIndex;\n\
    \            }\n            currentValue = arr.get(currentIndex--);\n        }\n\
    \        if (maxIndex - maxValue > k) {\n            result.add(maxValue);\n \
    \           while (maxIndex > 0) {\n                result.add(arr.get(maxIndex--));\n\
    \            }\n        } else {\n            while (maxIndex > 0) {\n       \
    \         result.add(arr.get(maxIndex--));\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqpdg0lng.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpqpdg0lng.java:36: error: no suitable method found for get(long)\n\
    \            currentValue = arr.get(currentIndex--);\n                       \
    \       ^\n    method List.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        long maxValue = arr.get(0);\n        for(int\
    \ i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > maxValue) {\n   \
    \             maxValue = arr.get(i);\n                maxIndex = i;\n        \
    \    }\n        }\n        while(maxIndex != k) {\n            result.add(maxValue);\n\
    \            maxValue = arr.get(maxIndex);\n            maxIndex++;\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5gc1hqi.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpe5gc1hqi.java:38: error: no suitable method found for get(long)\n\
    \            maxValue = arr.get(maxIndex);\n                          ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion fr"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n       \
    \         max = arr.get(i);\n            }\n        }\n        if (k > max) {\n\
    \            k = max;\n        }\n        long maxIndex = 0;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == max) {\n      \
    \          result.add(max);\n                maxIndex++;\n            }\n    \
    \    }\n        if (result.size() < k) {\n            for (int i = result.size();\
    \ i < k; i++) {\n                result.add(max);\n                maxIndex++;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f3j1rlk.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            min = Math.min(min, arr.get(i));\n        }\n    \
    \    for(int i = 0; i < arr.size(); i++) {\n            if((max - min) <= k) {\n\
    \                result.add(arr.get(i));\n            }\n            if((max -\
    \ min) > k) {\n                result.add(max);\n                max = Math.max(max,\
    \ arr.get(i));\n                min = Math.min(min, arr.get(i));\n           \
    \ }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnxews2o.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        long maxIndex\
    \ = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        if (maxIndex + 1\
    \ < arr.size()) {\n            ArrayList<Long> subResult = maximum(arr, k - 1);\n\
    \            for (int i = 0; i < subResult.size(); i++) {\n                result.add(subResult.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4ei6q5_.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (k == maxIndex)\
    \ {\n            result.add(max);\n        } else {\n            for (int i =\
    \ maxIndex; i < k; i++) {\n                result.add(arr.get(i));\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpshr8f7rr.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpshr8f7rr.java:38: error: incompatible types: possible lossy\
    \ conversion from long to int\n            for (int i = maxIndex; i < k; i++)\
    \ {\n                         ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i =\
    \ 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxaizldw2.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (maxIndex - k\
    \ >= 0) {\n            for (int i = maxIndex - k; i < maxIndex; i++) {\n     \
    \           result.add(arr.get(i));\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf_gxuxsu.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpf_gxuxsu.java:36: error: incompatible types: possible lossy\
    \ conversion from long to int\n            for (int i = maxIndex - k; i < maxIndex;\
    \ i++) {\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long temp = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                max = temp;\n            }\n  \
    \      }\n        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            if(temp > max) {\n                result.add(temp);\n           \
    \ }\n        }\n        for(int i = 0; i < result.size(); i++) {\n           \
    \ temp = result.get(i);\n            if(temp > k) {\n                result.add(temp);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa2k98pw2.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(k);\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) == max) {\n                maxIndex = i;\n         \
    \   }\n        }\n        for(int i = maxIndex; i < arr.size(); i++) {\n     \
    \       if(!result.contains(arr.get(i))) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxjtyhp7e.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpxjtyhp7e.java:27: error: no suitable method found for get(long)\n\
    \        long max = arr.get(k);\n                      ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentMax = maxValue;\n        long currentIndex = maxIndex;\n      \
    \  boolean isMax = true;\n        while (currentIndex >= 0) {\n            if\
    \ (currentMax < arr.get(currentIndex)) {\n                currentMax = arr.get(currentIndex);\n\
    \                currentIndex = maxIndex;\n                isMax = true;\n   \
    \         } else if (currentMax == arr.get(currentIndex)) {\n                isMax\
    \ = false;\n            }\n            if (isMax) {\n                result.add(currentMax);\n\
    \                maxIndex--;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1dpaclbb.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp1dpaclbb.java:33: error: no suitable method found for get(long)\n\
    \            if (currentMax < arr.get(currentIndex)) {\n                     \
    \           ^\n    method List.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible l"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex + 1 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 1));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpva7_gu6h.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpva7_gu6h.java:37: error: no suitable method found for get(long)\n\
    \            result.add(arr.get(maxIndex + 1));\n                          ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (maxIndex ==\
    \ arr.size() - 1) {\n            result.add(max);\n            return result;\n\
    \        }\n        ArrayList<Long> left = new ArrayList<>();\n        ArrayList<Long>\
    \ right = new ArrayList<>();\n        long leftMax = arr.get(0);\n        long\
    \ rightMax = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) > leftMax) {\n                leftMax = arr.get(i);\n\
    \                leftIndex = i;\n            }\n            if (arr.get(i) > rightMax)\
    \ {\n                rightMax = arr.get(i);\n                rightIndex = i;\n\
    \            }\n        }\n        left.add(leftMax);\n        left.add(leftIndex);\n\
    \        right.add(rightMax);\n        right.add(rightIndex);\n        ArrayList<Long>\
    \ leftResult = maximum(left, k - 1);\n        ArrayList<Long> rightResult = maximum(right,\
    \ k - 1);\n        ArrayList<Long> result = new ArrayList<>();\n        result.addAll(leftResult);\n\
    \        result.addAll(rightResult);\n        result.add(max);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpujqf1wxh.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpujqf1wxh.java:46: error: cannot find symbol\n         \
    \       leftIndex = i;\n                ^\n  symbol:   variable leftIndex\n  location:\
    \ class Problem\n/tmp/tmpujqf1wxh.java:50: error: cannot find symbol\n       \
    \         rightIndex = i;\n                ^\n  symbol:   variable rightIndex\n\
    \  location: class Problem\n/tmp/tmpujqf1wxh.java:54: error: cannot fi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = 0;\n\
    \        long sum = 0;\n        long count = 0;\n        long sum2 = 0;\n    \
    \    long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long\
    \ sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long sum9\
    \ = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12 =\
    \ 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n\
    \        long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n \
    \       long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n  \
    \      long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n   \
    \     long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n    \
    \    long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n     \
    \   long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n      \
    \  long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n       \
    \ long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n        long\
    \ sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n        long sum43\
    \ = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n        long sum46 =\
    \ 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n\
    \        long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n \
    \       long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n  \
    \      long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n   \
    \     long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n    \
    \    long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n     \
    \   long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n      \
    \  long sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n       \
    \ long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long\
    \ sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77\
    \ = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n        long sum80 =\
    \ 0;\n        long sum81 = 0;\n        long sum82 = 0;\n        long \n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmbe8ago4.java:111: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpmbe8ago4.java:111: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(k);\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) == max) {\n                result.add(max);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n     \
    \   }\n        result.add(max);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph6ukmn43.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmph6ukmn43.java:27: error: no suitable method found for get(long)\n\
    \        long max = arr.get(k);\n                      ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i =\
    \ 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprhnrudoh.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            if(max > k) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n        }\n        if(maxIndex\
    \ != arr.size() - 1) {\n            result.add(max);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfzkhna9x.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentMax = maxValue;\n        long currentIndex = maxIndex;\n      \
    \  long currentElement = arr.get(maxIndex);\n        while (currentIndex >= 0\
    \ && currentElement > currentMax) {\n            currentMax = currentElement;\n\
    \            currentIndex = currentIndex - 1;\n            currentElement = arr.get(currentIndex);\n\
    \        }\n        if (currentIndex >= 0) {\n            result.add(currentMax);\n\
    \        }\n        if (result.size() > k) {\n            result.remove(k);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpveklz35d.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpveklz35d.java:31: error: no suitable method found for get(long)\n\
    \        long currentElement = arr.get(maxIndex);\n                          \
    \       ^\n    method List.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (k == maxIndex)\
    \ {\n            result.add(max);\n        }\n        if (k > maxIndex) {\n  \
    \          k = maxIndex;\n        }\n        ArrayList<Long> newArr = new ArrayList<>();\n\
    \        for (int i = maxIndex; i < arr.size(); i++) {\n            newArr.add(arr.get(i));\n\
    \        }\n        result.addAll(newArr);\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4ztidwu.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpg4ztidwu.java:42: error: incompatible types: possible lossy\
    \ conversion from long to int\n        for (int i = maxIndex; i < arr.size();\
    \ i++) {\n                     ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long current = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            current = arr.get(i);\n            if(current > max) {\n        \
    \        max = current;\n                maxIndex = i;\n            }\n      \
    \  }\n        for(int i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n\
    \            if(current > max) {\n                result.add(max);\n         \
    \       result.add(maxIndex);\n                max = current;\n              \
    \  maxIndex = i;\n            }\n        }\n        while(result.size() < k) {\n\
    \            result.add(max);\n            result.add(maxIndex);\n           \
    \ max = maxIndex + 1;\n            maxIndex = maxIndex + 1;\n        }\n     \
    \   return result;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgbe7h2j_.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        long current = 0;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            if (i == 0) {\n                max = arr.get(i);\n\
    \                maxIndex = i;\n            } else if (arr.get(i) > max) {\n \
    \               max = arr.get(i);\n                maxIndex = i;\n           \
    \ }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (i == maxIndex) {\n                result.add(max);\n            } else {\n\
    \                result.add(arr.get(i));\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5rolnfxy.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long tempMax = 0;\n        long tempMax2 = 0;\n\
    \        long tempMax3 = 0;\n        long tempMax4 = 0;\n        long tempMax5\
    \ = 0;\n        long tempMax6 = 0;\n        long tempMax7 = 0;\n        long tempMax8\
    \ = 0;\n        long tempMax9 = 0;\n        long tempMax10 = 0;\n        long\
    \ tempMax11 = 0;\n        long tempMax12 = 0;\n        long tempMax13 = 0;\n \
    \       long tempMax14 = 0;\n        long tempMax15 = 0;\n        long tempMax16\
    \ = 0;\n        long tempMax17 = 0;\n        long tempMax18 = 0;\n        long\
    \ tempMax19 = 0;\n        long tempMax20 = 0;\n        long tempMax21 = 0;\n \
    \       long tempMax22 = 0;\n        long tempMax23 = 0;\n        long tempMax24\
    \ = 0;\n        long tempMax25 = 0;\n        long tempMax26 = 0;\n        long\
    \ tempMax27 = 0;\n        long tempMax28 = 0;\n        long tempMax29 = 0;\n \
    \       long tempMax30 = 0;\n        long tempMax31 = 0;\n        long tempMax32\
    \ = 0;\n        long tempMax33 = 0;\n        long tempMax34 = 0;\n        long\
    \ tempMax35 = 0;\n        long tempMax36 = 0;\n        long tempMax37 = 0;\n \
    \       long tempMax38 = 0;\n        long tempMax39 = 0;\n        long tempMax40\
    \ = 0;\n        long tempMax41 = 0;\n        long tempMax42 = 0;\n        long\
    \ tempMax43 = 0;\n        long tempMax44 = 0;\n        long tempMax45 = 0;\n \
    \       long tempMax46 = 0;\n        long tempMax47 = 0;\n        long tempMax48\
    \ = 0;\n        long tempMax49 = 0;\n        long tempMax50 = 0;\n        long\
    \ tempMax51 = 0;\n        long tempMax52 = 0;\n        long tempMax53 = 0;\n \
    \       long tempMax54 = 0;\n        long tempMax55 = 0;\n        long tempMax56\
    \ = 0;\n        long tempMax57 = 0;\n        long tempMax58 = 0;\n        long\
    \ tempMax59 = 0;\n        long tempMax60 = 0;\n        long tempMax61 = 0;\n \
    \       long tempMax62 = 0;\n        long tempMax63 = 0;\n        long tempMax64\
    \ = 0;\n        long tempMax65 = 0;\n        long tempMax66 = 0;\n        long\
    \ tempMax67 = 0;\n        long tempMax68 = 0;\n        long tempMax69 = 0;\n \
    \       long tempMax70 = 0;\n        long tempMax\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmply_oguix.java:98: error: ';' expected\n        long tempMax\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            if (maxValue < arr.get(i))\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        if (maxIndex - k > 0) {\n            result.add(maxValue);\n\
    \            result.addAll(Arrays.copyOfRange(arr, maxIndex - k, maxIndex));\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv7lgf43b.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpv7lgf43b.java:37: error: no suitable method found for copyOfRange(ArrayList<Long>,long,long)\n\
    \            result.addAll(Arrays.copyOfRange(arr, maxIndex - k, maxIndex));\n\
    \                                ^\n    method Arrays.<T#1>copyOfRange(T#1[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Lo"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = arr.get(0);\n        for(int\
    \ i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n        \
    \        max = arr.get(i);\n            }\n        }\n        for(int i = 0; i\
    \ < arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(max);\n\
    \            }\n        }\n        for(int i = result.size() - 1; i >= k; i--)\
    \ {\n            result.remove(result.get(i));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8_j98sm7.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i =\
    \ 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdr7wk051.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex < k) {\n            ArrayList<Long> newArr = new ArrayList<>();\n\
    \            newArr.add(max);\n            newArr.addAll(Arrays.copyOfRange(arr,\
    \ maxIndex + 1, arr.size()));\n            result.addAll(maximum(newArr, k - maxIndex));\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv00y_hbs.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpv00y_hbs.java:39: error: no suitable method found for copyOfRange(ArrayList<Long>,long,int)\n\
    \            newArr.addAll(Arrays.copyOfRange(arr, maxIndex + 1, arr.size()));\n\
    \                                ^\n    method Arrays.<T#1>copyOfRange(T#1[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<L"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        result.add(max);\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        result.add(max);\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        result.add(max);\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        result.add(max);\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ufzy86d.java:119: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp6ufzy86d.java:119: error: ';' expected\n    }\n     ^\n/tmp/tmp6ufzy86d.java:120:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp6ufzy86d.java:120: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                 ^\n/tmp/tmp6ufzy86d.java:120:\
    \ error: '.class' expected\n    public static void main(String[] args) {\n   \
    \                                  ^\n/tmp/tmp6ufzy86d.java:120: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp6ufzy86d.java:134: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long max = 0;\n        long maxIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n\
    \            if(curr > max) {\n                max = curr;\n                maxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long curr = arr.get(i);\n            if(curr == max) {\n    \
    \            res.add(max);\n                res.add(maxIndex);\n             \
    \   res.add(curr);\n            }\n        }\n        return res;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddtbkv7q.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (max < arr.get(i)) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (k == 1) {\n\
    \            result.add(max);\n            return result;\n        }\n       \
    \ ArrayList<Long> sublist = new ArrayList<>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (i < maxIndex) {\n                sublist.add(arr.get(i));\n\
    \            }\n        }\n        ArrayList<Long> result = maximum(sublist, k\
    \ - 1);\n        result.add(max);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphzgt8mzl.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmphzgt8mzl.java:45: error: variable result is already defined\
    \ in method maximum(ArrayList<Long>,long)\n        ArrayList<Long> result = maximum(sublist,\
    \ k - 1);\n                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i =\
    \ 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsywnrnq3.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(i != maxIndex) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzx39wqlb.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptmz8nk2n.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmptmz8nk2n.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long tempMax = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                temp.add(arr.get(i));\n            }\n        }\n       \
    \ for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n\
    \                tempMax = tempMax;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n       \
    \         tempMax = tempMax;\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n              \
    \  tempMax = tempMax;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) == max) {\n                tempMax = tempMax;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                tempMax = tempMax;\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   if(arr.get(i) == max) {\n                tempMax = tempMax;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ == max) {\n                tempMax = tempMax;\n            }\n        }\n  \
    \      for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                tempMax = tempMax;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n       \
    \         tempMax = tempMax;\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n              \
    \  tempMax = tempMax;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) == max) {\n                tempMax = tempMax;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == max) {\n                tempMax = tempMax;\n      \
    \      }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n         \
    \   if(arr.get(i) == max) {\n                tempMax = tempMax;\n            }\n\
    \        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ == max) {\n                tempMax = tempMax;\n            }\n        }\n  \
    \      for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                tempMax = tempMax;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max) {\n       \
    \         tempMax = tempMax;\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size()\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14_a8ens.java:117: error: ';' expected\n        for(int i = 0;\
    \ i < arr.size()\n                                     ^\n/tmp/tmp14_a8ens.java:118:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmp14_a8ens.java:118:\
    \ error: ')' expected\n    }\n     ^\n/tmp/tmp14_a8ens.java:119: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp14_a8ens.java:119: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                 ^\n/tmp/tmp14_a8ens.java:119: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp14_a8ens.java:119: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp14_a8ens.java:133: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(arr.size()\
    \ - 1);\n        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n\
    \                maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex + 1 < arr.size()) {\n            ArrayList<Long> subResult\
    \ = maximum(arr, k - 1);\n            for (int i = 0; i < subResult.size(); i++)\
    \ {\n                result.add(subResult.get(i));\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpodygkr77.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long max = 0;\n        long tempMax = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if((int)arr.get(i)\
    \ == max) {\n                temp.add(arr.get(i));\n            }\n        }\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            if((int)arr.get(i)\
    \ == max) {\n                tempMax = tempMax;\n            }\n        }\n  \
    \      for(int i = 0; i < arr.size(); i++) {\n            if((int)arr.get(i) ==\
    \ max) {\n                tempMax = tempMax;\n            }\n        }\n     \
    \   for(int i = 0; i < arr.size(); i++) {\n            if((int)arr.get(i) == max)\
    \ {\n                tempMax = tempMax;\n            }\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if((int)arr.get(i) == max) {\n  \
    \              tempMax = tempMax;\n            }\n        }\n        for(int i\
    \ = 0; i < arr.size(); i++) {\n            if((int)arr.get(i) == max) {\n    \
    \            tempMax = tempMax;\n            }\n        }\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            if((int)arr.get(i) == max) {\n      \
    \          tempMax = tempMax;\n            }\n        }\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            if((int)arr.get(i) == max) {\n         \
    \       tempMax = tempMax;\n            }\n        }\n        for(int i = 0; i\
    \ < arr.size(); i++) {\n            if((int)arr.get(i) == max) {\n           \
    \     tempMax = tempMax;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if((int)arr.get(i) == max) {\n             \
    \   tempMax = tempMax;\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if((int)arr.get(i) == max) {\n                tempMax =\
    \ tempMax;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            if((int)arr.get(i) == max) {\n                tempMax = tempMax;\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if((int)arr.get(i) == max) {\n                tempMax = tempMax;\n \
    \           }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n    \
    \        if((int)arr.get(i) == max) {\n                tempMax = tempMax;\n  \
    \          }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n     \
    \       if((int)arr.get(i) == max) {\n                tempMax = tempMax;\n   \
    \         }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n      \
    \      if((int)arr.get(i\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm0lbquzg.java:108: error: ')' expected\n            if((int)arr.get(i\n\
    \                             ^\n/tmp/tmpm0lbquzg.java:110: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpm0lbquzg.java:110:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpm0lbquzg.java:110: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpm0lbquzg.java:110:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpm0lbquzg.java:110: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpm0lbquzg.java:124: error: reached end of file while parsing\n}\n\
    \ ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = 0;\n        long maxIndex2\
    \ = 0;\n        long maxIndex3 = 0;\n        long maxIndex4 = 0;\n        long\
    \ maxIndex5 = 0;\n        long maxIndex6 = 0;\n        long maxIndex7 = 0;\n \
    \       long maxIndex8 = 0;\n        long maxIndex9 = 0;\n        long maxIndex10\
    \ = 0;\n        long maxIndex11 = 0;\n        long maxIndex12 = 0;\n        long\
    \ maxIndex13 = 0;\n        long maxIndex14 = 0;\n        long maxIndex15 = 0;\n\
    \        long maxIndex16 = 0;\n        long maxIndex17 = 0;\n        long maxIndex18\
    \ = 0;\n        long maxIndex19 = 0;\n        long maxIndex20 = 0;\n        long\
    \ maxIndex21 = 0;\n        long maxIndex22 = 0;\n        long maxIndex23 = 0;\n\
    \        long maxIndex24 = 0;\n        long maxIndex25 = 0;\n        long maxIndex26\
    \ = 0;\n        long maxIndex27 = 0;\n        long maxIndex28 = 0;\n        long\
    \ maxIndex29 = 0;\n        long maxIndex30 = 0;\n        long maxIndex31 = 0;\n\
    \        long maxIndex32 = 0;\n        long maxIndex33 = 0;\n        long maxIndex34\
    \ = 0;\n        long maxIndex35 = 0;\n        long maxIndex36 = 0;\n        long\
    \ maxIndex37 = 0;\n        long maxIndex38 = 0;\n        long maxIndex39 = 0;\n\
    \        long maxIndex40 = 0;\n        long maxIndex41 = 0;\n        long maxIndex42\
    \ = 0;\n        long maxIndex43 = 0;\n        long maxIndex44 = 0;\n        long\
    \ maxIndex45 = 0;\n        long maxIndex46 = 0;\n        long maxIndex47 = 0;\n\
    \        long maxIndex48 = 0;\n        long maxIndex49 = 0;\n        long maxIndex50\
    \ = 0;\n        long maxIndex51 = 0;\n        long maxIndex52 = 0;\n        long\
    \ maxIndex53 = 0;\n        long maxIndex54 = 0;\n        long maxIndex55 = 0;\n\
    \        long maxIndex56 = 0;\n        long maxIndex57 = 0;\n        long maxIndex58\
    \ = 0;\n        long maxIndex59 = 0;\n        long maxIndex60 = 0;\n        long\
    \ maxIndex61 = 0;\n        long maxIndex62 = 0;\n        long maxIndex63 = 0;\n\
    \        long maxIndex64 = 0;\n        long maxIndex65 = 0;\n        long maxIndex66\
    \ = 0;\n        long maxIndex67 = 0;\n        long maxIndex68 = 0;\n        long\
    \ maxIndex69 = 0;\n        long maxIndex70 = 0;\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0o23qqzq.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long currentMax = arr.get(0);\n        long currentMaxIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n\
    \            if(current > max) {\n                max = current;\n           \
    \     maxIndex = i;\n            }\n            if(current == max) {\n       \
    \         currentMax = current;\n                currentMaxIndex = i;\n      \
    \      }\n        }\n        while(maxIndex != k) {\n            long temp = arr.get(maxIndex);\n\
    \            arr.remove(maxIndex);\n            arr.add(maxIndex, temp);\n   \
    \         max = temp;\n            maxIndex = maxIndex + 1;\n        }\n     \
    \   while(maxIndex != k) {\n            long temp = arr.get(maxIndex);\n     \
    \       arr.remove(maxIndex);\n            arr.add(maxIndex, temp);\n        \
    \    max = temp;\n            maxIndex = maxIndex + 1;\n        }\n        while(maxIndex\
    \ != k) {\n            long temp = arr.get(maxIndex);\n            arr.remove(maxIndex);\n\
    \            arr.add(maxIndex, temp);\n            max = temp;\n            maxIndex\
    \ = maxIndex + 1;\n        }\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long current = arr.get(i);\n            if(current > max) {\n   \
    \             max = current;\n                maxIndex = i;\n            }\n \
    \       }\n        for(int i = 0; i < arr.size(); i++) {\n            long current\
    \ = arr.get(i);\n            if(current == max) {\n                result.add(current);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2qmt64bb.java:42: error: no suitable method found for get(long)\n\
    \            long temp = arr.get(maxIndex);\n                           ^\n  \
    \  method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n/tmp/tmp2qmt64bb.java:44: error:\
    \ no suitable method found for add(long,long)\n            arr.add(maxIndex, temp);\n\
    \               ^\n    method List.add(int,Long) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method AbstractList.add(int,Long)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.add(int,Long) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n/tmp/tmp2qmt64bb.java:49:\
    \ error: no suitable method found for get(long)\n            long temp = arr.get(maxIndex);\n\
    \                           ^\n    method List.get(int) is not applicable\n  \
    \    (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n/tmp/tmp2qmt64bb.java:51:\
    \ error: no suitable method found for add(long,long)\n            arr.add(maxIndex,\
    \ temp);\n               ^\n    method List.add(int,Long) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ AbstractList.add(int,Long) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method ArrayList.add(int,Long) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n/tmp/tmp2qmt64bb.java:56: error: no suitable method found fo"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ydceo_9.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp3ydceo_9.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (result.size() > k) {\n            result.remove(k);\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqu1tcowy.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(k);\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) == max) {\n                maxIndex = i;\n         \
    \   }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(i\
    \ != maxIndex) {\n                result.add(arr.get(i));\n            }\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3hp6yuzn.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp3hp6yuzn.java:27: error: no suitable method found for get(long)\n\
    \        long max = arr.get(k);\n                      ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (max < arr.get(i))\
    \ {\n                max = arr.get(i);\n            }\n            if (result.size()\
    \ < k) {\n                result.add(max);\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd824numv.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (maxIndex - k\
    \ > 0) {\n            ArrayList<Long> newArr = new ArrayList<>();\n          \
    \  for (int i = maxIndex - k; i < maxIndex; i++) {\n                newArr.add(arr.get(i));\n\
    \            }\n            newArr.add(max);\n            result = maximum(newArr,\
    \ k);\n        } else {\n            result.add(max);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5s186kb3.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp5s186kb3.java:37: error: incompatible types: possible lossy\
    \ conversion from long to int\n            for (int i = maxIndex - k; i < maxIndex;\
    \ i++) {\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i =\
    \ 0; i < arr.size()-k; i++) {\n            result.add(arr.get(i));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpudywb0f2.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr2n_uu18.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpr2n_uu18.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        long currentMax = arr.get(0);\n        long currentMaxIndex = arr.get(0);\n\
    \        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > currentMax)\
    \ {\n                currentMax = arr.get(i);\n                currentMaxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                max = Math.max(max,\
    \ currentMax);\n                maxIndex = Math.max(maxIndex, currentMaxIndex);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                max = Math.max(max,\
    \ currentMax);\n                maxIndex = Math.max(maxIndex, currentMaxIndex);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                max = Math.max(max,\
    \ currentMax);\n                maxIndex = Math.max(maxIndex, currentMaxIndex);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                max = Math.max(max,\
    \ currentMax);\n                maxIndex = Math.max(maxIndex, currentMaxIndex);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                max = Math.max(max,\
    \ currentMax);\n                maxIndex = Math.max(maxIndex, currentMaxIndex);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                max = Math.max(max,\
    \ currentMax);\n                maxIndex = Math.max(maxIndex, currentMaxIndex);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                max = Math.max(max,\
    \ currentMax);\n                maxIndex = Math.max(maxIndex, currentMaxIndex);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \         if(arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                max = Math.max(max,\
    \ currentMax);\n                maxIndex = Math.max(maxIndex, currentMaxIndex);\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps0kjd9zo.java:102: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmps0kjd9zo.java:102: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmps0kjd9zo.java:102: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmps0kjd9zo.java:102: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmps0kjd9zo.java:102: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmps0kjd9zo.java:116: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (max < arr.get(i))\
    \ {\n                max = arr.get(i);\n            }\n            if (result.size()\
    \ < k) {\n                result.add(max);\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvhvrev7m.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = 0;\n        long currentMax\
    \ = maxValue;\n        long currentIndex = arr.size() - 1;\n        while(currentIndex\
    \ >= 0) {\n            currentMax = Math.max(currentMax, arr.get(currentIndex));\n\
    \            currentIndex--;\n            if(currentIndex >= 0 && currentMax >\
    \ arr.get(currentIndex)) {\n                currentMax = arr.get(currentIndex);\n\
    \                maxIndex = currentIndex;\n            }\n        }\n        result.add(maxValue);\n\
    \        result.add(maxIndex);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0kj9c3yy.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp0kj9c3yy.java:32: error: no suitable method found for get(long)\n\
    \            currentMax = Math.max(currentMax, arr.get(currentIndex));\n     \
    \                                            ^\n    method List.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method AbstractList.get(int) is not applicable\n   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i =\
    \ 0; i < arr.size()-k; i++) {\n            result.add(arr.get(i));\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkiv_ofxu.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        if (maxIndex + 1 < arr.size()) {\n            result.add(arr.get(maxIndex\
    \ + 1));\n        }\n        if (result.size() > k) {\n            result.remove(k);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp12ea6xbd.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp12ea6xbd.java:37: error: no suitable method found for get(long)\n\
    \            result.add(arr.get(maxIndex + 1));\n                          ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long temp = 0;\n        long i = 0;\n        while (i < arr.size()) {\n\
    \            max = Math.max(max, arr.get(i));\n            if (max >= k) {\n \
    \               result.add(max);\n                max -= k;\n            } else\
    \ {\n                result.add(arr.get(i));\n            }\n            i++;\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm71wj5lm.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpm71wj5lm.java:31: error: no suitable method found for get(long)\n\
    \            max = Math.max(max, arr.get(i));\n                              \
    \     ^\n    method List.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy c"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzgdfz1ps.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpzgdfz1ps.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentMax = arr.get(0);\n        long currentIndex = -1;\n        long\
    \ currentMaxIndex = 0;\n        boolean isMax = false;\n        for(int i = 1;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > currentMax) {\n        \
    \        currentMax = arr.get(i);\n                currentIndex = i;\n       \
    \         currentMaxIndex = i;\n                isMax = true;\n            }\n\
    \            if(arr.get(i) == currentMax && isMax) {\n                currentMaxIndex\
    \ = i;\n            }\n        }\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) == currentMax && isMax) {\n                result.add(currentMax);\n\
    \                result.add(currentMaxIndex);\n                result.add(currentIndex);\n\
    \                result.add(currentMaxIndex + 1);\n                isMax = false;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpon_ro3l6.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(arr.size()-1);\n\
    \        for(int i = 0; i < k; i++) {\n            long curr = arr.get(i);\n \
    \           if(curr > max) {\n                max = curr;\n            }\n   \
    \     }\n        result.add(max);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpif49o194.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long maxValue\
    \ = arr.get(arr.size() - 1);\n        long maxIndex = arr.size() - 1;\n      \
    \  long currentMax = arr.get(0);\n        long currentIndex = -1;\n        boolean\
    \ isMax = true;\n        for (int i = 1; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) > currentMax) {\n                currentMax = arr.get(i);\n    \
    \            currentIndex = i;\n            }\n            if (arr.get(i) == currentMax)\
    \ {\n                isMax = true;\n            }\n            if (arr.get(i)\
    \ < currentMax && isMax) {\n                result.add(currentMax);\n        \
    \        currentMax = arr.get(i);\n                currentIndex = i;\n       \
    \         isMax = false;\n            }\n        }\n        if (currentIndex <\
    \ arr.size() - 1) {\n            result.add(currentMax);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbxmsb_9f.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ k; i++) {\n            result.add(arr.get(maxIndex));\n            maxIndex++;\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzbbahqwi.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpzbbahqwi.java:36: error: no suitable method found for get(long)\n\
    \            result.add(arr.get(maxIndex));\n                          ^\n   \
    \ method List.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n    method AbstractList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion f"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = arr.get(0);\n\
    \        long maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) > max) {\n                max = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (maxIndex - k\
    \ >= 0) {\n            max = arr.get(maxIndex - k);\n        }\n        result.add(max);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnr5dzdf.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmppnr5dzdf.java:36: error: no suitable method found for get(long)\n\
    \            max = arr.get(maxIndex - k);\n                     ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from lon"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(max < arr.get(i)) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(maxIndex != i) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd817ft1z.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpd817ft1z.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp70i2o0do.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp70i2o0do.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n        long\
    \ maxIndex = 0;\n        int i = 0;\n        while (i < arr.size()) {\n      \
    \      if (arr.get(i) > max) {\n                max = arr.get(i);\n          \
    \      maxIndex = i;\n            }\n            i++;\n        }\n        if (maxIndex\
    \ < k) {\n            while (maxIndex < k) {\n                result.add(max);\n\
    \                maxIndex++;\n            }\n        } else {\n            while\
    \ (maxIndex >= k) {\n                result.add(max);\n                maxIndex--;\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7viadrgr.java:51)\n"
  exit_code: 1
  status: Exception
