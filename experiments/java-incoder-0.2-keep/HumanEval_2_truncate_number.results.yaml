name: HumanEval_2_truncate_number
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ - Math.floor(number);\n        float integerPart = Math.floor(number);\n   \
    \     return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptywrinuk.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decimalPart = number - Math.floor(number);\n\
    \                                   ^\n/tmp/tmptywrinuk.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float integerPart\
    \ = Math.floor(number);\n                                      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        int decimalPart\
    \ = (int) (truncatedNumber - integerPart);\n        return decimalPart;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_22u9vk6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = (float) Math.floor(truncatedNumber);\n\
    \        float decimalPart = (float) Math.floor(truncatedNumber - integerPart);\n\
    \        return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp24v377kx.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpohmj50cz.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(1, RoundingMode.HALF_UP);\n        return bd1.divide(bd2,\
    \ RoundingMode.HALF_UP).floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztzw0ubh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkv5c4m0v.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_962b81.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qtdjrms.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd_int = bd.divide(new BigDecimal(10));\n        BigDecimal\
    \ bd_dec = bd.subtract(bd_int);\n        return bd_dec.floatValue();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_bj1_um.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPartRemainder = 0;\n        float decimalPartRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainder = 0;\n        float\
    \ decimalPartRemainderRemainderRemainderRemainder = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemain\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb3c3injj.java:45: error: ';' expected\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemain\n\
    \                                                                            ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - fraction;\n        return truncatedNumber;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjlgl_f4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        float decimal = number - fraction;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4pbyz62.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60qn9ety.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp60qn9ety.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5cwdi4cz.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmp5cwdi4cz.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bi = bd.toBigInteger();\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE,\
    \ BigDecimal.ROUND_HALF_UP);\n        return bd1.floatValue();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7ubnov8.java:18: error: method divide in class BigInteger cannot\
    \ be applied to given types;\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE,\
    \ BigDecimal.ROUND_HALF_UP);\n                           ^\n  required: BigInteger\n\
    \  found:    BigDecimal,int\n  reason: actual and formal argument lists differ\
    \ in length\nNote: /tmp/tmpg7ubnov8.java uses or overrides a deprecated API.\n\
    Note: Recompile with -Xlint:deprecation for details.\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ - (int) number;\n        float integerPart = number - decimalPart;\n       \
    \ return integerPart;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnbuiqq3s.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPart_temp = 0;\n        float decimalPart_temp2 = 0;\n   \
    \     float decimalPart_temp3 = 0;\n        float decimalPart_temp4 = 0;\n   \
    \     float decimalPart_temp5 = 0;\n        float decimalPart_temp6 = 0;\n   \
    \     float decimalPart_temp7 = 0;\n        float decimalPart_temp8 = 0;\n   \
    \     float decimalPart_temp9 = 0;\n        float decimalPart_temp10 = 0;\n  \
    \      float decimalPart_temp11 = 0;\n        float decimalPart_temp12 = 0;\n\
    \        float decimalPart_temp13 = 0;\n        float decimalPart_temp14 = 0;\n\
    \        float decimalPart_temp15 = 0;\n        float decimalPart_temp16 = 0;\n\
    \        float decimalPart_temp17 = 0;\n        float decimalPart_temp18 = 0;\n\
    \        float decimalPart_temp19 = 0;\n        float decimalPart_temp20 = 0;\n\
    \        float decimalPart_temp21 = 0;\n        float decimalPart_temp22 = 0;\n\
    \        float decimalPart_temp23 = 0;\n        float decimalPart_temp24 = 0;\n\
    \        float decimalPart_temp25 = 0;\n        float decimalPart_temp26 = 0;\n\
    \        float decimalPart_temp27 = 0;\n        float decimalPart_temp28 = 0;\n\
    \        float decimalPart_temp29 = 0;\n        float decimalPart_temp30 = 0;\n\
    \        float decimalPart_temp31 = 0;\n        float decimalPart_temp32 = 0;\n\
    \        float decimalPart_temp33 = 0;\n        float decimalPart_temp34 = 0;\n\
    \        float decimalPart_temp35 = 0;\n        float decimalPart_temp36 = 0;\n\
    \        float decimalPart_temp37 = 0;\n        float decimalPart_temp38 = 0;\n\
    \        float decimalPart_temp39 = 0;\n        float decimalPart_temp40 = 0;\n\
    \        float decimalPart_temp41 = 0;\n        float decimalPart_temp42 = 0;\n\
    \        float decimalPart_temp43 = 0;\n        float decimalPart_temp44 = 0;\n\
    \        float decimalPart_temp45 = 0;\n        float decimalPart_temp46 = 0;\n\
    \        float decimalPart_temp47 = 0;\n        float decimalPart_temp48 = 0;\n\
    \        float decimalPart_temp49 = 0;\n        float decimalPart_temp50 = 0;\n\
    \        float decimalPart_temp51 = 0;\n        float decimalPart_temp52 = 0;\n\
    \        float decimalPart_temp53 = 0;\n        float decimalPart_temp54 = 0;\n\
    \        float decimalPart_temp55 = 0;\n        float decimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj4_pl3by.java:74: error: ';' expected\n        float decimal\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return number - Math.floor(number);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp45i003fk.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp45i003fk.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return number\
    \ - Math.floor(number);\n                      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber;\n\
    \        truncatedNumber = number - Math.floor(number);\n        return truncatedNumber;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnysyvfm6.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        truncatedNumber = number - Math.floor(number);\n\
    \                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bigDecimal =\
    \ new BigDecimal(number);\n        BigInteger bigInteger = bigDecimal.toBigInteger();\n\
    \        BigDecimal bigDecimal2 = bigDecimal.divide(bigInteger, 0, RoundingMode.HALF_UP);\n\
    \        return bigDecimal2.floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppdv5lm0k.java:18: error: no suitable method found for divide(BigInteger,int,RoundingMode)\n\
    \        BigDecimal bigDecimal2 = bigDecimal.divide(bigInteger, 0, RoundingMode.HALF_UP);\n\
    \                                           ^\n    method BigDecimal.divide(BigDecimal,int,int)\
    \ is not applicable\n      (argument mismatch; BigInteger cannot be converted\
    \ to BigDecimal)\n    method BigDecimal.divide(BigDecimal,int,RoundingMode) is\
    \ not applicable\n      (argument mismatch; BigInteger cannot be converted to\
    \ BigDecimal)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ > 0) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalPart++;\n\
    \        }\n        return decimalPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_1_mnbhi.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsgicsje.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber / 1;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vvyy7st.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber >= 1) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        truncatedNumber = truncatedNumber\
    \ % 1;\n        while (truncatedNumber >= 1) {\n            truncatedNumber =\
    \ truncatedNumber / 10;\n            decimalPart++;\n        }\n        return\
    \ decimalPart;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrf7b_rx.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyg5napjs.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx0j91lp5.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphnj_7t57.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqji7rng1.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ Math.floor(number);\n        float remainder = (float) number - truncated;\n\
    \        return remainder;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptnrfdiju.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd_int = bd.divide(BigDecimal.ONE, BigDecimal.ROUND_HALF_UP);\n\
    \        BigDecimal bd_dec = bd.subtract(bd_int);\n        return bd_dec.floatValue();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyab1x7o5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = number - truncatedNumber;\n        float\
    \ decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr7qmggm_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        int intPart = bd.intValueExact();\n        BigDecimal decimal = bd.subtract(new\
    \ BigDecimal(intPart));\n        return decimal.floatValue();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: Rounding necessary\n\
    \tat java.base/java.math.BigDecimal.commonNeedIncrement(BigDecimal.java:4684)\n\
    \tat java.base/java.math.BigDecimal.needIncrement(BigDecimal.java:4734)\n\tat\
    \ java.base/java.math.BigDecimal.divideAndRound(BigDecimal.java:4648)\n\tat java.base/java.math.BigDecimal.setScale(BigDecimal.java:2926)\n\
    \tat java.base/java.math.BigDecimal.longValueExact(BigDecimal.java:3623)\n\tat\
    \ java.base/java.math.BigDecimal.intValueExact(BigDecimal.java:3682)\n\tat Problem.truncateNumber(tmpv3x4ck0d.java:17)\n\
    \tat Problem.main(tmpv3x4ck0d.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bi = bd.toBigInteger();\n        BigInteger bi1 = bi.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi2 = bi1.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi3 = bi2.divide(BigInteger.valueOf(10));\n        BigInteger bi4 = bi3.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi5 = bi4.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi6 = bi5.divide(BigInteger.valueOf(10));\n        BigInteger bi7 = bi6.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi8 = bi7.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi9 = bi8.divide(BigInteger.valueOf(10));\n        BigInteger bi10 = bi9.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi11 = bi10.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi12 = bi11.divide(BigInteger.valueOf(10));\n        BigInteger bi13 = bi12.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi14 = bi13.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi15 = bi14.divide(BigInteger.valueOf(10));\n        BigInteger bi16 = bi15.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi17 = bi16.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi18 = bi17.divide(BigInteger.valueOf(10));\n        BigInteger bi19 = bi18.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi20 = bi19.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi21 = bi20.divide(BigInteger.valueOf(10));\n        BigInteger bi22 = bi21.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi23 = bi22.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi24 = bi23.divide(BigInteger.valueOf(10));\n        BigInteger bi25 = bi24.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi26 = bi25.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi27 = bi26.divide(BigInteger.valueOf(10));\n        BigInteger bi28 = bi27.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi29 = bi28.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi30\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp61fl8ffg.java:47: error: ';' expected\n        BigInteger bi30\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        truncatedNumber\
    \ -= integerPart;\n        float decimalPart = truncatedNumber;\n        return\
    \ decimalPart;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ != 0) {\n            truncatedNumber = truncatedNumber * 10;\n            decimalPart++;\n\
    \        }\n        return decimalPart / integerPart;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_h9rccdd.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal \n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsd764kwi.java:40: error: not a statement\n        BigDecimal \n\
    \        ^\n/tmp/tmpsd764kwi.java:40: error: ';' expected\n        BigDecimal\
    \ \n                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float remainder = 0;\n        while (truncatedNumber > 0) {\n         \
    \   integerPart += truncatedNumber % 10;\n            truncatedNumber = truncatedNumber\
    \ / 10;\n        }\n        while (truncatedNumber > 0) {\n            decimalPart\
    \ += truncatedNumber % 1;\n            truncatedNumber = truncatedNumber / 1;\n\
    \        }\n        remainder = truncatedNumber;\n        if (remainder > 0) {\n\
    \            decimalPart += 1;\n        }\n        return decimalPart;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp44yk4mik.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp066_f0uh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmponpen1eq.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart;\n        float decimalPart;\n        float\
    \ fractionalPart;\n        float fractionalPartRemainder;\n        float fractionalPartRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainder;\n        float fractionalPartRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpykp0d5up.java:28: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpykp0d5up.java:30: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpykp0d5up.java:32: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpykp0d5up.java:33: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpykp0d5up.java:34: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpykp0d5up.java:36: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpykp0d5up.java:37: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpykp0d5up.java:38: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpykp0d5up.java:40: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n9 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ % 1;\n        float integerPart = number - decimalPart;\n        return integerPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgh3wzutx.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number;\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzozzuaj5.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return Math.floor(number) + fraction;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8iq0o0w.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpn8iq0o0w.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return Math.floor(number)\
    \ + fraction;\n                                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp10zl8gvf.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd_int = bd.divide(BigDecimal.ONE, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd_frac = bd.subtract(bd_int);\n        return bd_frac.floatValue();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpumi1df8d.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = number - (int) number;\n        float decimalPart\
    \ = number - integerPart;\n        truncatedNumber = truncatedNumber - decimalPart;\n\
    \        return truncatedNumber;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvka6ni5t.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int intPart = (int) truncatedNumber;\n        float decimalPart\
    \ = (float) truncatedNumber - intPart;\n        return decimalPart;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        if (fraction < 0.5f) {\n            return number\
    \ - fraction;\n        } else {\n            return number - Math.floor(number);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppcqra4bv.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmppcqra4bv.java:20: error: incompatible\
    \ types: possible lossy conversion from double to float\n            return number\
    \ - Math.floor(number);\n                          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        int decimalPart = (int) (number - integerPart);\n        return\
    \ decimalPart;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1h8mruj.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptq34p0vt.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        int decimalPart\
    \ = (int) (truncatedNumber - integerPart);\n        return decimalPart;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07txwvmk.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float remainder = 0;\n        float temp = 0;\n        float temp2 = 0;\n\
    \        float temp3 = 0;\n        float temp4 = 0;\n        float temp5 = 0;\n\
    \        float temp6 = 0;\n        float temp7 = 0;\n        float temp8 = 0;\n\
    \        float temp9 = 0;\n        float temp10 = 0;\n        float temp11 = 0;\n\
    \        float temp12 = 0;\n        float temp13 = 0;\n        float temp14 =\
    \ 0;\n        float temp15 = 0;\n        float temp16 = 0;\n        float temp17\
    \ = 0;\n        float temp18 = 0;\n        float temp19 = 0;\n        float temp20\
    \ = 0;\n        float temp21 = 0;\n        float temp22 = 0;\n        float temp23\
    \ = 0;\n        float temp24 = 0;\n        float temp25 = 0;\n        float temp26\
    \ = 0;\n        float temp27 = 0;\n        float temp28 = 0;\n        float temp29\
    \ = 0;\n        float temp30 = 0;\n        float temp31 = 0;\n        float temp32\
    \ = 0;\n        float temp33 = 0;\n        float temp34 = 0;\n        float temp35\
    \ = 0;\n        float temp36 = 0;\n        float temp37 = 0;\n        float temp38\
    \ = 0;\n        float temp39 = 0;\n        float temp40 = 0;\n        float temp41\
    \ = 0;\n        float temp42 = 0;\n        float temp43 = 0;\n        float temp44\
    \ = 0;\n        float temp45 = 0;\n        float temp46 = 0;\n        float temp47\
    \ = 0;\n        float temp48 = 0;\n        float temp49 = 0;\n        float temp50\
    \ = 0;\n        float temp51 = 0;\n        float temp52 = 0;\n        float temp53\
    \ = 0;\n        float temp54 = 0;\n        float temp55 = 0;\n        float temp56\
    \ = 0;\n        float temp57 = 0;\n        float temp58 = 0;\n        float temp59\
    \ = 0;\n        float temp60 = 0;\n        float temp61 = 0;\n        float temp62\
    \ = 0;\n        float temp63 = 0;\n        float temp64 = 0;\n        float temp65\
    \ = 0;\n        float temp66 = 0;\n        float temp67 = 0;\n        float temp68\
    \ = 0;\n        float temp69 = 0;\n        float temp70 = 0;\n        float temp71\
    \ = 0;\n        float temp72 = 0;\n        float temp73 = 0;\n        float temp74\
    \ = 0;\n        float temp75 = 0;\n        float temp76 = 0;\n        float temp77\
    \ = 0;\n        float temp78 = 0;\n        float temp79 = 0;\n        float temp80\
    \ = 0;\n        float temp81 = 0;\n        float temp82 = 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxm_o2zke.java:103: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction * 10;\n        truncatedNumber += decimal;\n        return truncatedNumber;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrpg3r1x.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction * 100;\n        truncatedNumber = truncatedNumber + decimal;\n  \
    \      return truncatedNumber;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1psn6wq4.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal \n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpukkl171q.java:40: error: not a statement\n        BigDecimal \n\
    \        ^\n/tmp/tmpukkl171q.java:40: error: ';' expected\n        BigDecimal\
    \ \n                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3yux274n.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number;\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1jsscg4.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcx8hium6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphjqfl36t.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmphjqfl36t.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqqi2_4p.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number\
    \ % 1;\n        float decimalPart = number - intPart;\n        return intPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPart_temp = 0;\n        float decimalPart_temp2 = 0;\n   \
    \     float decimalPart_temp3 = 0;\n        float decimalPart_temp4 = 0;\n   \
    \     float decimalPart_temp5 = 0;\n        float decimalPart_temp6 = 0;\n   \
    \     float decimalPart_temp7 = 0;\n        float decimalPart_temp8 = 0;\n   \
    \     float decimalPart_temp9 = 0;\n        float decimalPart_temp10 = 0;\n  \
    \      float decimalPart_temp11 = 0;\n        float decimalPart_temp12 = 0;\n\
    \        float decimalPart_temp13 = 0;\n        float decimalPart_temp14 = 0;\n\
    \        float decimalPart_temp15 = 0;\n        float decimalPart_temp16 = 0;\n\
    \        float decimalPart_temp17 = 0;\n        float decimalPart_temp18 = 0;\n\
    \        float decimalPart_temp19 = 0;\n        float decimalPart_temp20 = 0;\n\
    \        float decimalPart_temp21 = 0;\n        float decimalPart_temp22 = 0;\n\
    \        float decimalPart_temp23 = 0;\n        float decimalPart_temp24 = 0;\n\
    \        float decimalPart_temp25 = 0;\n        float decimalPart_temp26 = 0;\n\
    \        float decimalPart_temp27 = 0;\n        float decimalPart_temp28 = 0;\n\
    \        float decimalPart_temp29 = 0;\n        float decimalPart_temp30 = 0;\n\
    \        float decimalPart_temp31 = 0;\n        float decimalPart_temp32 = 0;\n\
    \        float decimalPart_temp33 = 0;\n        float decimalPart_temp34 = 0;\n\
    \        float decimalPart_temp35 = 0;\n        float decimalPart_temp36 = 0;\n\
    \        float decimalPart_temp37 = 0;\n        float decimalPart_temp38 = 0;\n\
    \        float decimalPart_temp39 = 0;\n        float decimalPart_temp40 = 0;\n\
    \        float decimalPart_temp41 = 0;\n        float decimalPart_temp42 = 0;\n\
    \        float decimalPart_temp43 = 0;\n        float decimalPart_temp44 = 0;\n\
    \        float decimalPart_temp45 = 0;\n        float decimalPart_temp46 = 0;\n\
    \        float decimalPart_temp47 = 0;\n        float decimalPart_temp48 = 0;\n\
    \        float decimalPart_temp49 = 0;\n        float decimalPart_temp50 = 0;\n\
    \        float decimalPart_temp51 = 0;\n        float decimalPart_temp52 = 0;\n\
    \        float decimalPart_temp53 = 0;\n        float decimalPart_temp54 = 0;\n\
    \        float decimalPart_temp55 = 0;\n        float decimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpftvuqdkw.java:74: error: ';' expected\n        float decimal\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ 0;\n        float decimalPart = number % 1;\n        float integerPart = number\
    \ - decimalPart;\n        truncatedNumber = integerPart;\n        return truncatedNumber;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl95egqkv.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bda = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bdb = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bdc = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bdd1 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bdd2 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bdd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bdd4 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bdd5 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bdd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bdd7 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bdd8 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bdd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bddd1 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bddd2 =\
    \ bd.setScale(0, RoundingMode.H\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_s6ux47k.java:39: error: ')' expected\n        BigDecimal bddd2\
    \ = bd.setScale(0, RoundingMode.H\n                                          \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number;\n\
    \        float remainder = 0;\n        while (truncated != 0) {\n            int\
    \ digit = truncated % 10;\n            truncated = truncated / 10;\n         \
    \   remainder = remainder * 10 + digit;\n        }\n        return remainder;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_1341kqy.java:19: error: incompatible types: possible lossy conversion\
    \ from float to int\n            int digit = truncated % 10;\n               \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwlb4zg7u.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92i8d7wb.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPartRemainder = 0;\n        float decimalPartRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainder = 0;\n        float\
    \ decimalPartRemainderRemainderRemainderRemainder = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemain\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn5mj86ns.java:43: error: ';' expected\n        float decimalPartRemainderRemain\n\
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd64vx1ys.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd_int = bd.divide(BigDecimal.ONE, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd_dec = bd.subtract(bd_int);\n        return bd_dec.floatValue();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpam3js6wv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2yf9272t.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number;\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71ldm23_.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23_723dl.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp23_723dl.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkd9vsbij.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - fraction;\n        return truncatedNumber;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_g_974w.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        int decimalPart = (int) (number - integerPart);\n        return\
    \ decimalPart;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnodwat1f.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89ht5jvs.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber;\n\
    \        truncatedNumber = (float) Math.floor(number);\n        return truncatedNumber;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpry6edzrz.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfp58y6an.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ != 0) {\n            truncatedNumber = truncatedNumber * 10;\n            decimalPart++;\n\
    \        }\n        return decimalPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpep6btsnu.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        if (fraction < 0.0) {\n            fraction +=\
    \ 1.0;\n        }\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptp6tgto8.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd3u2xzwl.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpd3u2xzwl.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalMultiplier = 1;\n        float decimalMultiplier2 = 1;\n \
    \       float decimalMultiplier3 = 1;\n        float decimalMultiplier4 = 1;\n\
    \        float decimalMultiplier5 = 1;\n        float decimalMultiplier6 = 1;\n\
    \        float decimalMultiplier7 = 1;\n        float decimalMultiplier8 = 1;\n\
    \        float decimalMultiplier9 = 1;\n        float decimalMultiplier10 = 1;\n\
    \        float decimalMultiplier11 = 1;\n        float decimalMultiplier12 = 1;\n\
    \        float decimalMultiplier13 = 1;\n        float decimalMultiplier14 = 1;\n\
    \        float decimalMultiplier15 = 1;\n        float decimalMultiplier16 = 1;\n\
    \        float decimalMultiplier17 = 1;\n        float decimalMultiplier18 = 1;\n\
    \        float decimalMultiplier19 = 1;\n        float decimalMultiplier20 = 1;\n\
    \        float decimalMultiplier21 = 1;\n        float decimalMultiplier22 = 1;\n\
    \        float decimalMultiplier23 = 1;\n        float decimalMultiplier24 = 1;\n\
    \        float decimalMultiplier25 = 1;\n        float decimalMultiplier26 = 1;\n\
    \        float decimalMultiplier27 = 1;\n        float decimalMultiplier28 = 1;\n\
    \        float decimalMultiplier29 = 1;\n        float decimalMultiplier30 = 1;\n\
    \        float decimalMultiplier31 = 1;\n        float decimalMultiplier32 = 1;\n\
    \        float decimalMultiplier33 = 1;\n        float decimalMultiplier34 = 1;\n\
    \        float decimalMultiplier35 = 1;\n        float decimalMultiplier36 = 1;\n\
    \        float decimalMultiplier37 = 1;\n        float decimalMultiplier38 = 1;\n\
    \        float decimalMultiplier39 = 1;\n        float decimalMultiplier40 = 1;\n\
    \        float decimalMultiplier41 = 1;\n        float decimalMultiplier42 = 1;\n\
    \        float decimalMultiplier43 = 1;\n        float decimalMultiplier44 = 1;\n\
    \        float decimalMultiplier45 = 1;\n        float decimalMultiplier46 = 1;\n\
    \        float decimalMultiplier47 = 1;\n        float decimalMultiplier48 = 1;\n\
    \        float decimalMultiplier49 = 1;\n        float decimalMultiplier50 = 1;\n\
    \        float decimalMultiplier51 = 1;\n        float decimalMultiplier52 = 1;\n\
    \        float decimalMultiplier53 = 1;\n        float decimalMultiplier54 = 1;\n\
    \        float decimalMultiplier55 = 1;\n        float decimalMultiplier56 = 1;\n\
    \        float decimalMultiplier57 = 1;\n        float decimalMultiplier58 = 1;\n\
    \        float decimalMultiplier59 = 1;\n        float decimalMultiplier60 = 1;\n\
    \        float decimalMultiplier61 = 1;\n        float decimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0w186t5i.java:80: error: ';' expected\n        float decimal\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8h8e1n6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber >= 1) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalPart++;\n\
    \        }\n        return truncatedNumber;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_gtaqcl.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfkujts_y.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmpfkujts_y.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - Math.floor(truncatedNumber);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplo2s9qx7.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float integerPart = truncatedNumber - Math.floor(truncatedNumber);\n\
    \                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float temp = 0;\n        do {\n            temp = truncatedNumber;\n  \
    \          truncatedNumber = truncatedNumber - integerPart;\n            integerPart\
    \ = temp;\n            temp = truncatedNumber;\n            truncatedNumber =\
    \ truncatedNumber - decimalPart;\n            decimalPart = temp;\n        } while\
    \ (truncatedNumber != 0);\n        return decimalPart;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_n1ga9_n.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        return bd1.divide(bd2,\
    \ BigDecimal.ROUND_HALF_UP).floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qpikcsc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number;\n\
    \        float remainder;\n        do {\n            truncated = truncated * 10;\n\
    \            remainder = number % truncated;\n            number = truncated;\n\
    \        } while (remainder != 0);\n        return number;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - Math.floor(number);\n\
    \        return fraction;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphg0klg8s.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmphg0klg8s.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float decimal\
    \ = number - Math.floor(number);\n                               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn96sjn1i.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmpn96sjn1i.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8nfswoo8.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      int decimalCount = 0;\n        while (truncatedNumber >= 1) {\n       \
    \     truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n \
    \       }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncate\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk9fjqhr8.java:91: error: ';' expected\n            truncatedNumber\
    \ = truncate\n                                      ^\n/tmp/tmpk9fjqhr8.java:93:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ Math.floor(number);\n        float remainder = (float) number - truncated;\n\
    \        return truncated + remainder;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy7fe9z5m.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0thz9s39.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpayq4jr8q.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmpayq4jr8q.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ Math.floor(number);\n        float decimal = number - truncated;\n        return\
    \ truncated;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp391zg7np.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - fraction;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7_63xbbh.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - fraction;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptl_m12ty.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl34kbbc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fractionalPart = number - truncatedNumber;\n        int\
    \ integerPart = Math.round(fractionalPart);\n        truncatedNumber = integerPart\
    \ + fractionalPart;\n        return truncatedNumber;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6gksdy4_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02aug2tg.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - fraction;\n        return truncatedNumber;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn93z3s_k.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction / Math.pow(10, truncatedNumber - 1);\n        return decimal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwh5dqfpe.java:18: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decimal = fraction / Math.pow(10, truncatedNumber\
    \ - 1);\n                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbq8mm_pp.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7oyd025a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphl387cai.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction * 10;\n        truncatedNumber = truncatedNumber - decimal;\n   \
    \     return truncatedNumber;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplb85muhd.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number\
    \ - (int)number;\n        return truncated;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ % 1;\n        float integerPart = number - decimalPart;\n        return integerPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1unkgzg.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float fractionalPart = 0;\n        float fractionalRemainder = 0;\n   \
    \     float fractionalRemainder2 = 0;\n        float fractionalRemainder3 = 0;\n\
    \        float fractionalRemainder4 = 0;\n        float fractionalRemainder5 =\
    \ 0;\n        float fractionalRemainder6 = 0;\n        float fractionalRemainder7\
    \ = 0;\n        float fractionalRemainder8 = 0;\n        float fractionalRemainder9\
    \ = 0;\n        float fractionalRemainder10 = 0;\n        float fractionalRemainder11\
    \ = 0;\n        float fractionalRemainder12 = 0;\n        float fractionalRemainder13\
    \ = 0;\n        float fractionalRemainder14 = 0;\n        float fractionalRemainder15\
    \ = 0;\n        float fractionalRemainder16 = 0;\n        float fractionalRemainder17\
    \ = 0;\n        float fractionalRemainder18 = 0;\n        float fractionalRemainder19\
    \ = 0;\n        float fractionalRemainder20 = 0;\n        float fractionalRemainder21\
    \ = 0;\n        float fractionalRemainder22 = 0;\n        float fractionalRemainder23\
    \ = 0;\n        float fractionalRemainder24 = 0;\n        float fractionalRemainder25\
    \ = 0;\n        float fractionalRemainder26 = 0;\n        float fractionalRemainder27\
    \ = 0;\n        float fractionalRemainder28 = 0;\n        float fractionalRemainder29\
    \ = 0;\n        float fractionalRemainder30 = 0;\n        float fractionalRemainder31\
    \ = 0;\n        float fractionalRemainder32 = 0;\n        float fractionalRemainder33\
    \ = 0;\n        float fractionalRemainder34 = 0;\n        float fractionalRemainder35\
    \ = 0;\n        float fractionalRemainder36 = 0;\n        float fractionalRemainder37\
    \ = 0;\n        float fractionalRemainder38 = 0;\n        float fractionalRemainder39\
    \ = 0;\n        float fractionalRemainder40 = 0;\n        float fractionalRemainder41\
    \ = 0;\n        float fractionalRemainder42 = 0;\n        float fractionalRemainder43\
    \ = 0;\n        float fractionalRemainder44 = 0;\n        float fractionalRemainder45\
    \ = 0;\n        float fractionalRemainder46 = 0;\n        float fractionalRemainder47\
    \ = 0;\n        float fractionalRemainder48 = 0;\n        float fractionalRemainder49\
    \ = 0;\n        float fractionalRemainder50 = 0;\n        float fractionalRemainder51\
    \ = 0;\n        float fractionalRemainder52 = 0;\n        float fractionalRemainder53\
    \ = 0;\n        float fractionalRemainder54 = 0;\n        float fractionalRemain\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64r1pevj.java:74: error: ';' expected\n        float fractionalRemain\n\
    \                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = (float) truncatedNumber - integerPart;\n        return decimalPart;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber / Math.pow(10, Float.SIZE\
    \ - 1);\n        truncatedNumber = truncatedNumber % Math.pow(10, Float.SIZE -\
    \ 1);\n        return integerPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe68so13q.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float integerPart = truncatedNumber / Math.pow(10,\
    \ Float.SIZE - 1);\n                                            ^\n/tmp/tmpe68so13q.java:18:\
    \ error: incompatible types: possible lossy conversion from double to float\n\
    \        truncatedNumber = truncatedNumber % Math.pow(10, Float.SIZE - 1);\n \
    \                                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        int intPart = bd.intValueExact();\n        BigDecimal fraction = bd.subtract(BigDecimal.valueOf(intPart));\n\
    \        return fraction.floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: Rounding necessary\n\
    \tat java.base/java.math.BigDecimal.commonNeedIncrement(BigDecimal.java:4684)\n\
    \tat java.base/java.math.BigDecimal.needIncrement(BigDecimal.java:4734)\n\tat\
    \ java.base/java.math.BigDecimal.divideAndRound(BigDecimal.java:4648)\n\tat java.base/java.math.BigDecimal.setScale(BigDecimal.java:2926)\n\
    \tat java.base/java.math.BigDecimal.longValueExact(BigDecimal.java:3623)\n\tat\
    \ java.base/java.math.BigDecimal.intValueExact(BigDecimal.java:3682)\n\tat Problem.truncateNumber(tmp32qu29h4.java:17)\n\
    \tat Problem.main(tmp32qu29h4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction / 10;\n        truncatedNumber = truncatedNumber - decimal;\n   \
    \     return truncatedNumber;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7x0z51c.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ Math.floor(number);\n        float remainder = (float) number - truncated;\n\
    \        return truncated + remainder;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp854leoiy.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number\
    \ - (int) number;\n        return truncated;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_jnd23wt.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpma86o9cz.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(1, RoundingMode.HALF_UP);\n        return bd1.divide(bd2,\
    \ RoundingMode.HALF_UP).floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvbazuhw2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk540yqfj.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsi5hxuw5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7z36jep4.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ != 0) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalPart++;\n\
    \        }\n        return decimalPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc61z5p_a.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpazp2fm4p.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bi = bd.toBigInteger();\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE);\n\
    \        BigDecimal bd2 = bd1.divide(BigDecimal.ONE);\n        BigDecimal bd3\
    \ = bd2.divide(BigDecimal.ONE);\n        return bd3.floatValue();\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8c2ydabh.java:18: error: incompatible types: BigDecimal cannot\
    \ be converted to BigInteger\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE);\n\
    \                                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart;\n      \
    \  float decimalPart;\n        intPart = (float) Math.floor(number);\n       \
    \ decimalPart = number - intPart;\n        return decimalPart;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk70qfi6c.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmpk70qfi6c.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfdtd48fk.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      int decimalCount = 0;\n        while (truncatedNumber > 0) {\n        \
    \    truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n  \
    \      }\n        truncatedNumber = truncatedNumber * 10 - 1;\n        integerPart\
    \ = truncatedNumber;\n        decimalPart = truncatedNumber - integerPart;\n \
    \       return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_rt0l82.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = (float)\
    \ Math.floor(number);\n        float integerPart = (float) Math.floor(number *\
    \ 10 - decimalPart);\n        return integerPart;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9tyapf6.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - Math.floor(number);\n\
    \        return fraction;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnwv2ec61.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpnwv2ec61.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float decimal\
    \ = number - Math.floor(number);\n                               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = (float) Math.floor(truncatedNumber);\n\
    \        float decimalPart = (float) Math.ceil(truncatedNumber - integerPart);\n\
    \        return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2p00y7j5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPart_temp = 0;\n        float decimalPart_temp2 = 0;\n   \
    \     float decimalPart_temp3 = 0;\n        float decimalPart_temp4 = 0;\n   \
    \     float decimalPart_temp5 = 0;\n        float decimalPart_temp6 = 0;\n   \
    \     float decimalPart_temp7 = 0;\n        float decimalPart_temp8 = 0;\n   \
    \     float decimalPart_temp9 = 0;\n        float decimalPart_temp10 = 0;\n  \
    \      float decimalPart_temp11 = 0;\n        float decimalPart_temp12 = 0;\n\
    \        float decimalPart_temp13 = 0;\n        float decimalPart_temp14 = 0;\n\
    \        float decimalPart_temp15 = 0;\n        float decimalPart_temp16 = 0;\n\
    \        float decimalPart_temp17 = 0;\n        float decimalPart_temp18 = 0;\n\
    \        float decimalPart_temp19 = 0;\n        float decimalPart_temp20 = 0;\n\
    \        float decimalPart_temp21 = 0;\n        float decimalPart_temp22 = 0;\n\
    \        float decimalPart_temp23 = 0;\n        float decimalPart_temp24 = 0;\n\
    \        float decimalPart_temp25 = 0;\n        float decimalPart_temp26 = 0;\n\
    \        float decimalPart_temp27 = 0;\n        float decimalPart_temp28 = 0;\n\
    \        float decimalPart_temp29 = 0;\n        float decimalPart_temp30 = 0;\n\
    \        float decimalPart_temp31 = 0;\n        float decimalPart_temp32 = 0;\n\
    \        float decimalPart_temp33 = 0;\n        float decimalPart_temp34 = 0;\n\
    \        float decimalPart_temp35 = 0;\n        float decimalPart_temp36 = 0;\n\
    \        float decimalPart_temp37 = 0;\n        float decimalPart_temp38 = 0;\n\
    \        float decimalPart_temp39 = 0;\n        float decimalPart_temp40 = 0;\n\
    \        float decimalPart_temp41 = 0;\n        float decimalPart_temp42 = 0;\n\
    \        float decimalPart_temp43 = 0;\n        float decimalPart_temp44 = 0;\n\
    \        float decimalPart_temp45 = 0;\n        float decimalPart_temp46 = 0;\n\
    \        float decimalPart_temp47 = 0;\n        float decimalPart_temp48 = 0;\n\
    \        float decimalPart_temp49 = 0;\n        float decimalPart_temp50 = 0;\n\
    \        float decimalPart_temp51 = 0;\n        float decimalPart_temp52 = 0;\n\
    \        float decimalPart_temp53 = 0;\n        float decimalPart_temp54 = 0;\n\
    \        float decimalPart_temp55 = 0;\n        float decimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdwf9p5p2.java:74: error: ';' expected\n        float decimal\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - fraction;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmep40fbz.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bi = bd.toBigInteger();\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE,\
    \ BigDecimal.ROUND_HALF_UP);\n        return bd1.floatValue();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpihhcx3ki.java:18: error: method divide in class BigInteger cannot\
    \ be applied to given types;\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE,\
    \ BigDecimal.ROUND_HALF_UP);\n                           ^\n  required: BigInteger\n\
    \  found:    BigDecimal,int\n  reason: actual and formal argument lists differ\
    \ in length\nNote: /tmp/tmpihhcx3ki.java uses or overrides a deprecated API.\n\
    Note: Recompile with -Xlint:deprecation for details.\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number\
    \ - Math.floor(number);\n        float decimal = truncated - Math.floor(truncated);\n\
    \        return decimal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp967i58ns.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float truncated = number - Math.floor(number);\n\
    \                                 ^\n/tmp/tmp967i58ns.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float decimal\
    \ = truncated - Math.floor(truncated);\n                                  ^\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return number - Math.floor(number);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp36mqwj4w.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp36mqwj4w.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return number\
    \ - Math.floor(number);\n                      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9repm05s.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = (float) truncatedNumber - integerPart;\n        return decimalPart;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = (float)\
    \ Math.floor(number);\n        float integerPart = (float) Math.floor(number *\
    \ 10);\n        return decimalPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuk0tz5qy.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - Math.floor(truncatedNumber);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpegct53ah.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float integerPart = truncatedNumber - Math.floor(truncatedNumber);\n\
    \                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplmqzkdz7.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(1, RoundingMode.HALF_UP);\n        return bd1.divide(bd2,\
    \ RoundingMode.HALF_UP).floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z0hi6uo.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmmw5uzld.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmpmmw5uzld.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number\
    \ - (int) number;\n        return truncated;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp987z7z3e.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fractionalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - fractionalPart;\n        return truncatedNumber;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbifjmdw.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number;\n\
    \        float remainder = 0;\n        while (truncated == 0) {\n            truncated\
    \ = number - (number % 1);\n            number /= 1;\n        }\n        while\
    \ (truncated == 0) {\n            truncated = number - (number % 1);\n       \
    \     number /= 1;\n        }\n        return number - remainder;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaj3fvj9w.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwu46trql.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number;\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwjoleyu5.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = number - truncatedNumber;\n        float\
    \ decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_j294l1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_9plkxsv.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp_9plkxsv.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = (truncatedNumber - integerPart) * 1.0f;\n        return decimalPart;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnohvpm7x.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ - Math.floor(number);\n        return decimalPart;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpomby8w1j.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decimalPart = number - Math.floor(number);\n\
    \                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart;\n        float decimalPart;\n        float\
    \ remainder;\n        float quotient;\n        float quotientRemainder;\n    \
    \    float quotientRemainderRemainder;\n        float quotientRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainder;\n        float quotientRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemain\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmjei7xjc.java:42: error: ';' expected\n        float quotientRemain\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = (float)\
    \ Math.floor(number);\n        float decimalPart = (float) number - intPart;\n\
    \        return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
