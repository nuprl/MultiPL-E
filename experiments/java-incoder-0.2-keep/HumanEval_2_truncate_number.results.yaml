name: HumanEval_2_truncate_number
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ - Math.floor(number);\n        float integerPart = Math.floor(number);\n   \
    \     return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ac34jiu.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decimalPart = number - Math.floor(number);\n\
    \                                   ^\n/tmp/tmp4ac34jiu.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float integerPart\
    \ = Math.floor(number);\n                                      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        int decimalPart\
    \ = (int) (truncatedNumber - integerPart);\n        return decimalPart;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7r6z3x7p.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = (float) Math.floor(truncatedNumber);\n\
    \        float decimalPart = (float) Math.floor(truncatedNumber - integerPart);\n\
    \        return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8xe899r1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4iqr31vz.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(1, RoundingMode.HALF_UP);\n        return bd1.divide(bd2,\
    \ RoundingMode.HALF_UP).floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_a_t3btv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzlbb3v0k.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdh745dzm.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa0fvzn60.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd_int = bd.divide(new BigDecimal(10));\n        BigDecimal\
    \ bd_dec = bd.subtract(bd_int);\n        return bd_dec.floatValue();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj2jtwdq6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPartRemainder = 0;\n        float decimalPartRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainder = 0;\n        float\
    \ decimalPartRemainderRemainderRemainderRemainder = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemain\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0x0pqyma.java:45: error: ';' expected\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemain\n\
    \                                                                            ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - fraction;\n        return truncatedNumber;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_on91fl.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        float decimal = number - fraction;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplz2t8e5j.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt3c_c0lk.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpt3c_c0lk.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvy0g6ud6.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmpvy0g6ud6.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bi = bd.toBigInteger();\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE,\
    \ BigDecimal.ROUND_HALF_UP);\n        return bd1.floatValue();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa71ky77f.java:18: error: method divide in class BigInteger cannot\
    \ be applied to given types;\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE,\
    \ BigDecimal.ROUND_HALF_UP);\n                           ^\n  required: BigInteger\n\
    \  found: BigDecimal,int\n  reason: actual and formal argument lists differ in\
    \ length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ - (int) number;\n        float integerPart = number - decimalPart;\n       \
    \ return integerPart;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_pje70q.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPart_temp = 0;\n        float decimalPart_temp2 = 0;\n   \
    \     float decimalPart_temp3 = 0;\n        float decimalPart_temp4 = 0;\n   \
    \     float decimalPart_temp5 = 0;\n        float decimalPart_temp6 = 0;\n   \
    \     float decimalPart_temp7 = 0;\n        float decimalPart_temp8 = 0;\n   \
    \     float decimalPart_temp9 = 0;\n        float decimalPart_temp10 = 0;\n  \
    \      float decimalPart_temp11 = 0;\n        float decimalPart_temp12 = 0;\n\
    \        float decimalPart_temp13 = 0;\n        float decimalPart_temp14 = 0;\n\
    \        float decimalPart_temp15 = 0;\n        float decimalPart_temp16 = 0;\n\
    \        float decimalPart_temp17 = 0;\n        float decimalPart_temp18 = 0;\n\
    \        float decimalPart_temp19 = 0;\n        float decimalPart_temp20 = 0;\n\
    \        float decimalPart_temp21 = 0;\n        float decimalPart_temp22 = 0;\n\
    \        float decimalPart_temp23 = 0;\n        float decimalPart_temp24 = 0;\n\
    \        float decimalPart_temp25 = 0;\n        float decimalPart_temp26 = 0;\n\
    \        float decimalPart_temp27 = 0;\n        float decimalPart_temp28 = 0;\n\
    \        float decimalPart_temp29 = 0;\n        float decimalPart_temp30 = 0;\n\
    \        float decimalPart_temp31 = 0;\n        float decimalPart_temp32 = 0;\n\
    \        float decimalPart_temp33 = 0;\n        float decimalPart_temp34 = 0;\n\
    \        float decimalPart_temp35 = 0;\n        float decimalPart_temp36 = 0;\n\
    \        float decimalPart_temp37 = 0;\n        float decimalPart_temp38 = 0;\n\
    \        float decimalPart_temp39 = 0;\n        float decimalPart_temp40 = 0;\n\
    \        float decimalPart_temp41 = 0;\n        float decimalPart_temp42 = 0;\n\
    \        float decimalPart_temp43 = 0;\n        float decimalPart_temp44 = 0;\n\
    \        float decimalPart_temp45 = 0;\n        float decimalPart_temp46 = 0;\n\
    \        float decimalPart_temp47 = 0;\n        float decimalPart_temp48 = 0;\n\
    \        float decimalPart_temp49 = 0;\n        float decimalPart_temp50 = 0;\n\
    \        float decimalPart_temp51 = 0;\n        float decimalPart_temp52 = 0;\n\
    \        float decimalPart_temp53 = 0;\n        float decimalPart_temp54 = 0;\n\
    \        float decimalPart_temp55 = 0;\n        float decimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp39g1opt7.java:74: error: ';' expected\n        float decimal\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return number - Math.floor(number);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp105vtu5n.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp105vtu5n.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return number\
    \ - Math.floor(number);\n                      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber;\n\
    \        truncatedNumber = number - Math.floor(number);\n        return truncatedNumber;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6a_mu2mi.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        truncatedNumber = number - Math.floor(number);\n\
    \                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bigDecimal =\
    \ new BigDecimal(number);\n        BigInteger bigInteger = bigDecimal.toBigInteger();\n\
    \        BigDecimal bigDecimal2 = bigDecimal.divide(bigInteger, 0, RoundingMode.HALF_UP);\n\
    \        return bigDecimal2.floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw9b6mr2f.java:18: error: no suitable method found for divide(BigInteger,int,RoundingMode)\n\
    \        BigDecimal bigDecimal2 = bigDecimal.divide(bigInteger, 0, RoundingMode.HALF_UP);\n\
    \                                           ^\n    method BigDecimal.divide(BigDecimal,int,int)\
    \ is not applicable\n      (argument mismatch; BigInteger cannot be converted\
    \ to BigDecimal)\n    method BigDecimal.divide(BigDecimal,int,RoundingMode) is\
    \ not applicable\n      (argument mismatch; BigInteger cannot be converted to\
    \ BigDecimal)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ > 0) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalPart++;\n\
    \        }\n        return decimalPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwpzhu04j.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1xm2av31.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber / 1;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkquo08fd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber >= 1) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        truncatedNumber = truncatedNumber\
    \ % 1;\n        while (truncatedNumber >= 1) {\n            truncatedNumber =\
    \ truncatedNumber / 10;\n            decimalPart++;\n        }\n        return\
    \ decimalPart;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw4bjay2x.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7y0z4_r9.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfyvm2gqq.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt8634fw7.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi0ma_4cl.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ Math.floor(number);\n        float remainder = (float) number - truncated;\n\
    \        return remainder;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87sxdfac.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd_int = bd.divide(BigDecimal.ONE, BigDecimal.ROUND_HALF_UP);\n\
    \        BigDecimal bd_dec = bd.subtract(bd_int);\n        return bd_dec.floatValue();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdjvxj2st.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = number - truncatedNumber;\n        float\
    \ decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4mi4ii_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        int intPart = bd.intValueExact();\n        BigDecimal decimal = bd.subtract(new\
    \ BigDecimal(intPart));\n        return decimal.floatValue();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: Rounding necessary\n\
    \tat java.math.BigDecimal.commonNeedIncrement(BigDecimal.java:4148)\n\tat java.math.BigDecimal.needIncrement(BigDecimal.java:4204)\n\
    \tat java.math.BigDecimal.divideAndRound(BigDecimal.java:4112)\n\tat java.math.BigDecimal.setScale(BigDecimal.java:2452)\n\
    \tat java.math.BigDecimal.longValueExact(BigDecimal.java:3090)\n\tat java.math.BigDecimal.intValueExact(BigDecimal.java:3147)\n\
    \tat Problem.truncateNumber(tmp4xh7gx9e.java:17)\n\tat Problem.main(tmp4xh7gx9e.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bi = bd.toBigInteger();\n        BigInteger bi1 = bi.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi2 = bi1.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi3 = bi2.divide(BigInteger.valueOf(10));\n        BigInteger bi4 = bi3.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi5 = bi4.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi6 = bi5.divide(BigInteger.valueOf(10));\n        BigInteger bi7 = bi6.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi8 = bi7.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi9 = bi8.divide(BigInteger.valueOf(10));\n        BigInteger bi10 = bi9.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi11 = bi10.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi12 = bi11.divide(BigInteger.valueOf(10));\n        BigInteger bi13 = bi12.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi14 = bi13.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi15 = bi14.divide(BigInteger.valueOf(10));\n        BigInteger bi16 = bi15.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi17 = bi16.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi18 = bi17.divide(BigInteger.valueOf(10));\n        BigInteger bi19 = bi18.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi20 = bi19.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi21 = bi20.divide(BigInteger.valueOf(10));\n        BigInteger bi22 = bi21.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi23 = bi22.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi24 = bi23.divide(BigInteger.valueOf(10));\n        BigInteger bi25 = bi24.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi26 = bi25.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi27 = bi26.divide(BigInteger.valueOf(10));\n        BigInteger bi28 = bi27.divide(BigInteger.valueOf(10));\n\
    \        BigInteger bi29 = bi28.divide(BigInteger.valueOf(10));\n        BigInteger\
    \ bi30\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp16bfqwe6.java:47: error: ';' expected\n        BigInteger bi30\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        truncatedNumber\
    \ -= integerPart;\n        float decimalPart = truncatedNumber;\n        return\
    \ decimalPart;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ != 0) {\n            truncatedNumber = truncatedNumber * 10;\n            decimalPart++;\n\
    \        }\n        return decimalPart / integerPart;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdv62ppas.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal \n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ngzcpk6.java:40: error: not a statement\n        BigDecimal \n\
    \        ^\n/tmp/tmp9ngzcpk6.java:40: error: ';' expected\n        BigDecimal\
    \ \n                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float remainder = 0;\n        while (truncatedNumber > 0) {\n         \
    \   integerPart += truncatedNumber % 10;\n            truncatedNumber = truncatedNumber\
    \ / 10;\n        }\n        while (truncatedNumber > 0) {\n            decimalPart\
    \ += truncatedNumber % 1;\n            truncatedNumber = truncatedNumber / 1;\n\
    \        }\n        remainder = truncatedNumber;\n        if (remainder > 0) {\n\
    \            decimalPart += 1;\n        }\n        return decimalPart;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6boa8j7y.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi6iakpza.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6mseo181.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart;\n        float decimalPart;\n        float\
    \ fractionalPart;\n        float fractionalPartRemainder;\n        float fractionalPartRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainder;\n        float fractionalPartRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy1j04aw4.java:28: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpy1j04aw4.java:30: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpy1j04aw4.java:32: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpy1j04aw4.java:33: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpy1j04aw4.java:34: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpy1j04aw4.java:36: error: variable fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined in method truncateNumber(float)\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \              ^\n/tmp/tmpy1j04aw4.java:37: error: variable fractionalPartRemainderRemainderRemain"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ % 1;\n        float integerPart = number - decimalPart;\n        return integerPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2s3_h5w.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number;\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_v66kl.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return Math.floor(number) + fraction;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa2_vtqhx.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpa2_vtqhx.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return Math.floor(number)\
    \ + fraction;\n                                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyz5vp_q8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd_int = bd.divide(BigDecimal.ONE, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd_frac = bd.subtract(bd_int);\n        return bd_frac.floatValue();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0d6o4xty.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = number - (int) number;\n        float decimalPart\
    \ = number - integerPart;\n        truncatedNumber = truncatedNumber - decimalPart;\n\
    \        return truncatedNumber;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprk8i5son.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int intPart = (int) truncatedNumber;\n        float decimalPart\
    \ = (float) truncatedNumber - intPart;\n        return decimalPart;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        if (fraction < 0.5f) {\n            return number\
    \ - fraction;\n        } else {\n            return number - Math.floor(number);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7d66b2lk.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp7d66b2lk.java:20: error: incompatible\
    \ types: possible lossy conversion from double to float\n            return number\
    \ - Math.floor(number);\n                          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        int decimalPart = (int) (number - integerPart);\n        return\
    \ decimalPart;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsjwxgtwq.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsg4yqaj.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        int decimalPart\
    \ = (int) (truncatedNumber - integerPart);\n        return decimalPart;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0xk4nlv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float remainder = 0;\n        float temp = 0;\n        float temp2 = 0;\n\
    \        float temp3 = 0;\n        float temp4 = 0;\n        float temp5 = 0;\n\
    \        float temp6 = 0;\n        float temp7 = 0;\n        float temp8 = 0;\n\
    \        float temp9 = 0;\n        float temp10 = 0;\n        float temp11 = 0;\n\
    \        float temp12 = 0;\n        float temp13 = 0;\n        float temp14 =\
    \ 0;\n        float temp15 = 0;\n        float temp16 = 0;\n        float temp17\
    \ = 0;\n        float temp18 = 0;\n        float temp19 = 0;\n        float temp20\
    \ = 0;\n        float temp21 = 0;\n        float temp22 = 0;\n        float temp23\
    \ = 0;\n        float temp24 = 0;\n        float temp25 = 0;\n        float temp26\
    \ = 0;\n        float temp27 = 0;\n        float temp28 = 0;\n        float temp29\
    \ = 0;\n        float temp30 = 0;\n        float temp31 = 0;\n        float temp32\
    \ = 0;\n        float temp33 = 0;\n        float temp34 = 0;\n        float temp35\
    \ = 0;\n        float temp36 = 0;\n        float temp37 = 0;\n        float temp38\
    \ = 0;\n        float temp39 = 0;\n        float temp40 = 0;\n        float temp41\
    \ = 0;\n        float temp42 = 0;\n        float temp43 = 0;\n        float temp44\
    \ = 0;\n        float temp45 = 0;\n        float temp46 = 0;\n        float temp47\
    \ = 0;\n        float temp48 = 0;\n        float temp49 = 0;\n        float temp50\
    \ = 0;\n        float temp51 = 0;\n        float temp52 = 0;\n        float temp53\
    \ = 0;\n        float temp54 = 0;\n        float temp55 = 0;\n        float temp56\
    \ = 0;\n        float temp57 = 0;\n        float temp58 = 0;\n        float temp59\
    \ = 0;\n        float temp60 = 0;\n        float temp61 = 0;\n        float temp62\
    \ = 0;\n        float temp63 = 0;\n        float temp64 = 0;\n        float temp65\
    \ = 0;\n        float temp66 = 0;\n        float temp67 = 0;\n        float temp68\
    \ = 0;\n        float temp69 = 0;\n        float temp70 = 0;\n        float temp71\
    \ = 0;\n        float temp72 = 0;\n        float temp73 = 0;\n        float temp74\
    \ = 0;\n        float temp75 = 0;\n        float temp76 = 0;\n        float temp77\
    \ = 0;\n        float temp78 = 0;\n        float temp79 = 0;\n        float temp80\
    \ = 0;\n        float temp81 = 0;\n        float temp82 = 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaf4eqfws.java:103: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction * 10;\n        truncatedNumber += decimal;\n        return truncatedNumber;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcetrpa0o.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction * 100;\n        truncatedNumber = truncatedNumber + decimal;\n  \
    \      return truncatedNumber;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89z67scs.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd9 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd9 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal \n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe1iqjtpq.java:40: error: not a statement\n        BigDecimal \n\
    \        ^\n/tmp/tmpe1iqjtpq.java:40: error: ';' expected\n        BigDecimal\
    \ \n                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3izs3elb.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number;\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnossi891.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmple4nzjyd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp69xpgxae.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp69xpgxae.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk95692lw.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number\
    \ % 1;\n        float decimalPart = number - intPart;\n        return intPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPart_temp = 0;\n        float decimalPart_temp2 = 0;\n   \
    \     float decimalPart_temp3 = 0;\n        float decimalPart_temp4 = 0;\n   \
    \     float decimalPart_temp5 = 0;\n        float decimalPart_temp6 = 0;\n   \
    \     float decimalPart_temp7 = 0;\n        float decimalPart_temp8 = 0;\n   \
    \     float decimalPart_temp9 = 0;\n        float decimalPart_temp10 = 0;\n  \
    \      float decimalPart_temp11 = 0;\n        float decimalPart_temp12 = 0;\n\
    \        float decimalPart_temp13 = 0;\n        float decimalPart_temp14 = 0;\n\
    \        float decimalPart_temp15 = 0;\n        float decimalPart_temp16 = 0;\n\
    \        float decimalPart_temp17 = 0;\n        float decimalPart_temp18 = 0;\n\
    \        float decimalPart_temp19 = 0;\n        float decimalPart_temp20 = 0;\n\
    \        float decimalPart_temp21 = 0;\n        float decimalPart_temp22 = 0;\n\
    \        float decimalPart_temp23 = 0;\n        float decimalPart_temp24 = 0;\n\
    \        float decimalPart_temp25 = 0;\n        float decimalPart_temp26 = 0;\n\
    \        float decimalPart_temp27 = 0;\n        float decimalPart_temp28 = 0;\n\
    \        float decimalPart_temp29 = 0;\n        float decimalPart_temp30 = 0;\n\
    \        float decimalPart_temp31 = 0;\n        float decimalPart_temp32 = 0;\n\
    \        float decimalPart_temp33 = 0;\n        float decimalPart_temp34 = 0;\n\
    \        float decimalPart_temp35 = 0;\n        float decimalPart_temp36 = 0;\n\
    \        float decimalPart_temp37 = 0;\n        float decimalPart_temp38 = 0;\n\
    \        float decimalPart_temp39 = 0;\n        float decimalPart_temp40 = 0;\n\
    \        float decimalPart_temp41 = 0;\n        float decimalPart_temp42 = 0;\n\
    \        float decimalPart_temp43 = 0;\n        float decimalPart_temp44 = 0;\n\
    \        float decimalPart_temp45 = 0;\n        float decimalPart_temp46 = 0;\n\
    \        float decimalPart_temp47 = 0;\n        float decimalPart_temp48 = 0;\n\
    \        float decimalPart_temp49 = 0;\n        float decimalPart_temp50 = 0;\n\
    \        float decimalPart_temp51 = 0;\n        float decimalPart_temp52 = 0;\n\
    \        float decimalPart_temp53 = 0;\n        float decimalPart_temp54 = 0;\n\
    \        float decimalPart_temp55 = 0;\n        float decimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpho9gso_o.java:74: error: ';' expected\n        float decimal\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ 0;\n        float decimalPart = number % 1;\n        float integerPart = number\
    \ - decimalPart;\n        truncatedNumber = integerPart;\n        return truncatedNumber;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx9senqd1.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bda = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bdb = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bdc = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bdd1 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bdd2 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bdd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bdd4 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bdd5 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bdd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bdd7 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bdd8 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bdd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bddd1 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bddd2 =\
    \ bd.setScale(0, RoundingMode.H\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr8jetkvh.java:39: error: ')' expected\n        BigDecimal bddd2\
    \ = bd.setScale(0, RoundingMode.H\n                                          \
    \              ^\n/tmp/tmpr8jetkvh.java:41: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpr8jetkvh.java:41:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpr8jetkvh.java:41: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpr8jetkvh.java:41:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpr8jetkvh.java:41: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpr8jetkvh.java:47: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number;\n\
    \        float remainder = 0;\n        while (truncated != 0) {\n            int\
    \ digit = truncated % 10;\n            truncated = truncated / 10;\n         \
    \   remainder = remainder * 10 + digit;\n        }\n        return remainder;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7a7dd5y.java:19: error: incompatible types: possible lossy conversion\
    \ from float to int\n            int digit = truncated % 10;\n               \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2b3gezq4.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8xzexz_f.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPartRemainder = 0;\n        float decimalPartRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainder = 0;\n        float\
    \ decimalPartRemainderRemainderRemainderRemainder = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = 0;\n        float decimalPartRemainderRemain\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6kdu980b.java:43: error: ';' expected\n        float decimalPartRemainderRemain\n\
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdjqgvfbm.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd_int = bd.divide(BigDecimal.ONE, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd_dec = bd.subtract(bd_int);\n        return bd_dec.floatValue();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp65b6395j.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0yogt4mn.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number;\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptonkmeu0.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbl002z1l.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpbl002z1l.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2dgckia2.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - fraction;\n        return truncatedNumber;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi3glovnp.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        int decimalPart = (int) (number - integerPart);\n        return\
    \ decimalPart;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp34ia98zv.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmiknv5bj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber;\n\
    \        truncatedNumber = (float) Math.floor(number);\n        return truncatedNumber;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1l1j0zv.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpozdoy2xf.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ != 0) {\n            truncatedNumber = truncatedNumber * 10;\n            decimalPart++;\n\
    \        }\n        return decimalPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp94jxb50z.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        if (fraction < 0.0) {\n            fraction +=\
    \ 1.0;\n        }\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7ki7yn4.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplohk3k35.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmplohk3k35.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalMultiplier = 1;\n        float decimalMultiplier2 = 1;\n \
    \       float decimalMultiplier3 = 1;\n        float decimalMultiplier4 = 1;\n\
    \        float decimalMultiplier5 = 1;\n        float decimalMultiplier6 = 1;\n\
    \        float decimalMultiplier7 = 1;\n        float decimalMultiplier8 = 1;\n\
    \        float decimalMultiplier9 = 1;\n        float decimalMultiplier10 = 1;\n\
    \        float decimalMultiplier11 = 1;\n        float decimalMultiplier12 = 1;\n\
    \        float decimalMultiplier13 = 1;\n        float decimalMultiplier14 = 1;\n\
    \        float decimalMultiplier15 = 1;\n        float decimalMultiplier16 = 1;\n\
    \        float decimalMultiplier17 = 1;\n        float decimalMultiplier18 = 1;\n\
    \        float decimalMultiplier19 = 1;\n        float decimalMultiplier20 = 1;\n\
    \        float decimalMultiplier21 = 1;\n        float decimalMultiplier22 = 1;\n\
    \        float decimalMultiplier23 = 1;\n        float decimalMultiplier24 = 1;\n\
    \        float decimalMultiplier25 = 1;\n        float decimalMultiplier26 = 1;\n\
    \        float decimalMultiplier27 = 1;\n        float decimalMultiplier28 = 1;\n\
    \        float decimalMultiplier29 = 1;\n        float decimalMultiplier30 = 1;\n\
    \        float decimalMultiplier31 = 1;\n        float decimalMultiplier32 = 1;\n\
    \        float decimalMultiplier33 = 1;\n        float decimalMultiplier34 = 1;\n\
    \        float decimalMultiplier35 = 1;\n        float decimalMultiplier36 = 1;\n\
    \        float decimalMultiplier37 = 1;\n        float decimalMultiplier38 = 1;\n\
    \        float decimalMultiplier39 = 1;\n        float decimalMultiplier40 = 1;\n\
    \        float decimalMultiplier41 = 1;\n        float decimalMultiplier42 = 1;\n\
    \        float decimalMultiplier43 = 1;\n        float decimalMultiplier44 = 1;\n\
    \        float decimalMultiplier45 = 1;\n        float decimalMultiplier46 = 1;\n\
    \        float decimalMultiplier47 = 1;\n        float decimalMultiplier48 = 1;\n\
    \        float decimalMultiplier49 = 1;\n        float decimalMultiplier50 = 1;\n\
    \        float decimalMultiplier51 = 1;\n        float decimalMultiplier52 = 1;\n\
    \        float decimalMultiplier53 = 1;\n        float decimalMultiplier54 = 1;\n\
    \        float decimalMultiplier55 = 1;\n        float decimalMultiplier56 = 1;\n\
    \        float decimalMultiplier57 = 1;\n        float decimalMultiplier58 = 1;\n\
    \        float decimalMultiplier59 = 1;\n        float decimalMultiplier60 = 1;\n\
    \        float decimalMultiplier61 = 1;\n        float decimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpthp1tqoi.java:80: error: ';' expected\n        float decimal\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxwox1pr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber >= 1) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalPart++;\n\
    \        }\n        return truncatedNumber;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1zz_bt6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdibsr2vx.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmpdibsr2vx.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - Math.floor(truncatedNumber);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvfsriwd.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float integerPart = truncatedNumber - Math.floor(truncatedNumber);\n\
    \                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float temp = 0;\n        do {\n            temp = truncatedNumber;\n  \
    \          truncatedNumber = truncatedNumber - integerPart;\n            integerPart\
    \ = temp;\n            temp = truncatedNumber;\n            truncatedNumber =\
    \ truncatedNumber - decimalPart;\n            decimalPart = temp;\n        } while\
    \ (truncatedNumber != 0);\n        return decimalPart;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0qsm234.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        return bd1.divide(bd2,\
    \ BigDecimal.ROUND_HALF_UP).floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfunr2eur.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number;\n\
    \        float remainder;\n        do {\n            truncated = truncated * 10;\n\
    \            remainder = number % truncated;\n            number = truncated;\n\
    \        } while (remainder != 0);\n        return number;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - Math.floor(number);\n\
    \        return fraction;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmji_ed5d.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpmji_ed5d.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float decimal\
    \ = number - Math.floor(number);\n                               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptq_q7wyf.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmptq_q7wyf.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7tf6txki.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      int decimalCount = 0;\n        while (truncatedNumber >= 1) {\n       \
    \     truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n \
    \       }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n\
    \        }\n        truncatedNumber = truncatedNumber + 1;\n        while (truncatedNumber\
    \ >= 1) {\n            truncatedNumber = truncate\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcskz_usx.java:91: error: ';' expected\n            truncatedNumber\
    \ = truncate\n                                      ^\n/tmp/tmpcskz_usx.java:93:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpcskz_usx.java:93: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpcskz_usx.java:93:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpcskz_usx.java:93: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpcskz_usx.java:93:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpcskz_usx.java:99: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ Math.floor(number);\n        float remainder = (float) number - truncated;\n\
    \        return truncated + remainder;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt37j3gq0.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz87jqpyp.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmm0r6ny4.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmpmm0r6ny4.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ Math.floor(number);\n        float decimal = number - truncated;\n        return\
    \ truncated;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbo2n45zt.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - fraction;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpok9l13ga.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - fraction;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaoqzdp3f.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0y0mv73.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fractionalPart = number - truncatedNumber;\n        int\
    \ integerPart = Math.round(fractionalPart);\n        truncatedNumber = integerPart\
    \ + fractionalPart;\n        return truncatedNumber;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg_h_hur0.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxu9b2h51.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - fraction;\n        return truncatedNumber;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuv7l_jvn.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction / Math.pow(10, truncatedNumber - 1);\n        return decimal;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp05r6p8t4.java:18: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decimal = fraction / Math.pow(10, truncatedNumber\
    \ - 1);\n                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdrfw2kon.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvw1i0qbf.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpejoiwn6s.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction * 10;\n        truncatedNumber = truncatedNumber - decimal;\n   \
    \     return truncatedNumber;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9jfi1ju.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number\
    \ - (int)number;\n        return truncated;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ % 1;\n        float integerPart = number - decimalPart;\n        return integerPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqx4jq_l.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float fractionalPart = 0;\n        float fractionalRemainder = 0;\n   \
    \     float fractionalRemainder2 = 0;\n        float fractionalRemainder3 = 0;\n\
    \        float fractionalRemainder4 = 0;\n        float fractionalRemainder5 =\
    \ 0;\n        float fractionalRemainder6 = 0;\n        float fractionalRemainder7\
    \ = 0;\n        float fractionalRemainder8 = 0;\n        float fractionalRemainder9\
    \ = 0;\n        float fractionalRemainder10 = 0;\n        float fractionalRemainder11\
    \ = 0;\n        float fractionalRemainder12 = 0;\n        float fractionalRemainder13\
    \ = 0;\n        float fractionalRemainder14 = 0;\n        float fractionalRemainder15\
    \ = 0;\n        float fractionalRemainder16 = 0;\n        float fractionalRemainder17\
    \ = 0;\n        float fractionalRemainder18 = 0;\n        float fractionalRemainder19\
    \ = 0;\n        float fractionalRemainder20 = 0;\n        float fractionalRemainder21\
    \ = 0;\n        float fractionalRemainder22 = 0;\n        float fractionalRemainder23\
    \ = 0;\n        float fractionalRemainder24 = 0;\n        float fractionalRemainder25\
    \ = 0;\n        float fractionalRemainder26 = 0;\n        float fractionalRemainder27\
    \ = 0;\n        float fractionalRemainder28 = 0;\n        float fractionalRemainder29\
    \ = 0;\n        float fractionalRemainder30 = 0;\n        float fractionalRemainder31\
    \ = 0;\n        float fractionalRemainder32 = 0;\n        float fractionalRemainder33\
    \ = 0;\n        float fractionalRemainder34 = 0;\n        float fractionalRemainder35\
    \ = 0;\n        float fractionalRemainder36 = 0;\n        float fractionalRemainder37\
    \ = 0;\n        float fractionalRemainder38 = 0;\n        float fractionalRemainder39\
    \ = 0;\n        float fractionalRemainder40 = 0;\n        float fractionalRemainder41\
    \ = 0;\n        float fractionalRemainder42 = 0;\n        float fractionalRemainder43\
    \ = 0;\n        float fractionalRemainder44 = 0;\n        float fractionalRemainder45\
    \ = 0;\n        float fractionalRemainder46 = 0;\n        float fractionalRemainder47\
    \ = 0;\n        float fractionalRemainder48 = 0;\n        float fractionalRemainder49\
    \ = 0;\n        float fractionalRemainder50 = 0;\n        float fractionalRemainder51\
    \ = 0;\n        float fractionalRemainder52 = 0;\n        float fractionalRemainder53\
    \ = 0;\n        float fractionalRemainder54 = 0;\n        float fractionalRemain\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm1b8ytfc.java:74: error: ';' expected\n        float fractionalRemain\n\
    \                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = (float) truncatedNumber - integerPart;\n        return decimalPart;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber / Math.pow(10, Float.SIZE\
    \ - 1);\n        truncatedNumber = truncatedNumber % Math.pow(10, Float.SIZE -\
    \ 1);\n        return integerPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpembr67j2.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float integerPart = truncatedNumber / Math.pow(10,\
    \ Float.SIZE - 1);\n                                            ^\n/tmp/tmpembr67j2.java:18:\
    \ error: incompatible types: possible lossy conversion from double to float\n\
    \        truncatedNumber = truncatedNumber % Math.pow(10, Float.SIZE - 1);\n \
    \                                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        int intPart = bd.intValueExact();\n        BigDecimal fraction = bd.subtract(BigDecimal.valueOf(intPart));\n\
    \        return fraction.floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: Rounding necessary\n\
    \tat java.math.BigDecimal.commonNeedIncrement(BigDecimal.java:4148)\n\tat java.math.BigDecimal.needIncrement(BigDecimal.java:4204)\n\
    \tat java.math.BigDecimal.divideAndRound(BigDecimal.java:4112)\n\tat java.math.BigDecimal.setScale(BigDecimal.java:2452)\n\
    \tat java.math.BigDecimal.longValueExact(BigDecimal.java:3090)\n\tat java.math.BigDecimal.intValueExact(BigDecimal.java:3147)\n\
    \tat Problem.truncateNumber(tmp4_k44xaz.java:17)\n\tat Problem.main(tmp4_k44xaz.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fraction = number - truncatedNumber;\n        float decimal\
    \ = fraction / 10;\n        truncatedNumber = truncatedNumber - decimal;\n   \
    \     return truncatedNumber;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_lusimbl.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ Math.floor(number);\n        float remainder = (float) number - truncated;\n\
    \        return truncated + remainder;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppqy2exse.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number\
    \ - (int) number;\n        return truncated;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8a6nhyy1.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9rhog1r4.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(1, RoundingMode.HALF_UP);\n        return bd1.divide(bd2,\
    \ RoundingMode.HALF_UP).floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpimjz9y8i.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnh770_hh.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - decimalPart;\n        return truncatedNumber;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1rd5v9p6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4co1se1c.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      while (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber\
    \ / 10;\n            integerPart++;\n        }\n        while (truncatedNumber\
    \ != 0) {\n            truncatedNumber = truncatedNumber / 10;\n            decimalPart++;\n\
    \        }\n        return decimalPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjn1vpne2.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb9rpbux5.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bi = bd.toBigInteger();\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE);\n\
    \        BigDecimal bd2 = bd1.divide(BigDecimal.ONE);\n        BigDecimal bd3\
    \ = bd2.divide(BigDecimal.ONE);\n        return bd3.floatValue();\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptg0d4fn9.java:18: error: incompatible types: BigDecimal cannot\
    \ be converted to BigInteger\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE);\n\
    \                                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart;\n      \
    \  float decimalPart;\n        intPart = (float) Math.floor(number);\n       \
    \ decimalPart = number - intPart;\n        return decimalPart;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8tyx6psa.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmp8tyx6psa.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float decimalPart = number - truncatedNumber;\n        float\
    \ integerPart = truncatedNumber - decimalPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqmdu5t_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      int decimalCount = 0;\n        while (truncatedNumber > 0) {\n        \
    \    truncatedNumber = truncatedNumber / 10;\n            decimalCount++;\n  \
    \      }\n        truncatedNumber = truncatedNumber * 10 - 1;\n        integerPart\
    \ = truncatedNumber;\n        decimalPart = truncatedNumber - integerPart;\n \
    \       return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_bb86f76.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = (float)\
    \ Math.floor(number);\n        float integerPart = (float) Math.floor(number *\
    \ 10 - decimalPart);\n        return integerPart;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdbuy981b.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - Math.floor(number);\n\
    \        return fraction;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk5xaga3w.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpk5xaga3w.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float decimal\
    \ = number - Math.floor(number);\n                               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = (float) Math.floor(truncatedNumber);\n\
    \        float decimalPart = (float) Math.ceil(truncatedNumber - integerPart);\n\
    \        return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfi7lstik.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = 0;\n        float decimalPart = 0;\n  \
    \      float decimalPart_temp = 0;\n        float decimalPart_temp2 = 0;\n   \
    \     float decimalPart_temp3 = 0;\n        float decimalPart_temp4 = 0;\n   \
    \     float decimalPart_temp5 = 0;\n        float decimalPart_temp6 = 0;\n   \
    \     float decimalPart_temp7 = 0;\n        float decimalPart_temp8 = 0;\n   \
    \     float decimalPart_temp9 = 0;\n        float decimalPart_temp10 = 0;\n  \
    \      float decimalPart_temp11 = 0;\n        float decimalPart_temp12 = 0;\n\
    \        float decimalPart_temp13 = 0;\n        float decimalPart_temp14 = 0;\n\
    \        float decimalPart_temp15 = 0;\n        float decimalPart_temp16 = 0;\n\
    \        float decimalPart_temp17 = 0;\n        float decimalPart_temp18 = 0;\n\
    \        float decimalPart_temp19 = 0;\n        float decimalPart_temp20 = 0;\n\
    \        float decimalPart_temp21 = 0;\n        float decimalPart_temp22 = 0;\n\
    \        float decimalPart_temp23 = 0;\n        float decimalPart_temp24 = 0;\n\
    \        float decimalPart_temp25 = 0;\n        float decimalPart_temp26 = 0;\n\
    \        float decimalPart_temp27 = 0;\n        float decimalPart_temp28 = 0;\n\
    \        float decimalPart_temp29 = 0;\n        float decimalPart_temp30 = 0;\n\
    \        float decimalPart_temp31 = 0;\n        float decimalPart_temp32 = 0;\n\
    \        float decimalPart_temp33 = 0;\n        float decimalPart_temp34 = 0;\n\
    \        float decimalPart_temp35 = 0;\n        float decimalPart_temp36 = 0;\n\
    \        float decimalPart_temp37 = 0;\n        float decimalPart_temp38 = 0;\n\
    \        float decimalPart_temp39 = 0;\n        float decimalPart_temp40 = 0;\n\
    \        float decimalPart_temp41 = 0;\n        float decimalPart_temp42 = 0;\n\
    \        float decimalPart_temp43 = 0;\n        float decimalPart_temp44 = 0;\n\
    \        float decimalPart_temp45 = 0;\n        float decimalPart_temp46 = 0;\n\
    \        float decimalPart_temp47 = 0;\n        float decimalPart_temp48 = 0;\n\
    \        float decimalPart_temp49 = 0;\n        float decimalPart_temp50 = 0;\n\
    \        float decimalPart_temp51 = 0;\n        float decimalPart_temp52 = 0;\n\
    \        float decimalPart_temp53 = 0;\n        float decimalPart_temp54 = 0;\n\
    \        float decimalPart_temp55 = 0;\n        float decimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp92w31sgj.java:74: error: ';' expected\n        float decimal\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = number - fraction;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp788c2ykc.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bi = bd.toBigInteger();\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE,\
    \ BigDecimal.ROUND_HALF_UP);\n        return bd1.floatValue();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm8ewpg1n.java:18: error: method divide in class BigInteger cannot\
    \ be applied to given types;\n        BigDecimal bd1 = bi.divide(BigDecimal.ONE,\
    \ BigDecimal.ROUND_HALF_UP);\n                           ^\n  required: BigInteger\n\
    \  found: BigDecimal,int\n  reason: actual and formal argument lists differ in\
    \ length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number\
    \ - Math.floor(number);\n        float decimal = truncated - Math.floor(truncated);\n\
    \        return decimal;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppfmj3a3y.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float truncated = number - Math.floor(number);\n\
    \                                 ^\n/tmp/tmppfmj3a3y.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float decimal\
    \ = truncated - Math.floor(truncated);\n                                  ^\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return number - Math.floor(number);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxnmglzsg.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpxnmglzsg.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return number\
    \ - Math.floor(number);\n                      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8dvee41d.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = (float) truncatedNumber - integerPart;\n        return decimalPart;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = (float)\
    \ Math.floor(number);\n        float integerPart = (float) Math.floor(number *\
    \ 10);\n        return decimalPart;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp66q1leb5.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - Math.floor(truncatedNumber);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzlmulzkv.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float integerPart = truncatedNumber - Math.floor(truncatedNumber);\n\
    \                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * 100;\n        return\
    \ decimal;\n\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd8sxfb_7.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(1, RoundingMode.HALF_UP);\n        return bd1.divide(bd2,\
    \ RoundingMode.HALF_UP).floatValue();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpndnjky5_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal bd1 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd2 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd3 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd4 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd5 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd6 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd7 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd8 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd9 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd10 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd11 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecimal bd12 = bd.setScale(0, RoundingMode.HALF_DOWN);\n\
    \        BigDecimal bd13 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal\
    \ bd14 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal bd15 = bd.setScale(0,\
    \ RoundingMode.HALF_DOWN);\n        BigDecimal bd16 = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        BigDecimal bd17 = bd.setScale(0, RoundingMode.HALF_EVEN);\n        BigDecimal\
    \ bd18 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal bd19 = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        BigDecimal bd20 = bd.setScale(0, RoundingMode.HALF_EVEN);\n\
    \        BigDecimal bd21 = bd.setScale(0, RoundingMode.HALF_DOWN);\n        BigDecimal\
    \ bd22 = bd.setScale(0, RoundingMode.HALF_UP);\n        BigDecimal bd23 = bd.setScale(0,\
    \ RoundingMode.HALF_EVEN);\n        BigDecim\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8cdfy30i.java:40: error: not a statement\n        BigDecim\n  \
    \      ^\n/tmp/tmp8cdfy30i.java:40: error: ';' expected\n        BigDecim\n  \
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number\
    \ - (int) number;\n        return truncated;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ou1mgoq.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float fractionalPart = number - truncatedNumber;\n        truncatedNumber\
    \ = truncatedNumber - fractionalPart;\n        return truncatedNumber;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_0txr2l.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = number;\n\
    \        float remainder = 0;\n        while (truncated == 0) {\n            truncated\
    \ = number - (number % 1);\n            number /= 1;\n        }\n        while\
    \ (truncated == 0) {\n            truncated = number - (number % 1);\n       \
    \     number /= 1;\n        }\n        return number - remainder;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwlps0tkw.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = truncatedNumber - (truncatedNumber % 1);\n\
    \        float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzzze676k.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = number;\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdrxzgou.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        return fraction;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart = number - truncatedNumber;\n        float\
    \ decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qjs5lom.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        float decimal = fraction * Math.pow(10, Float.SIZE\
    \ - Float.numberOfTrailingZeros(fraction));\n        return decimal;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5yqxn1zh.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmp5yqxn1zh.java:17: error: cannot find\
    \ symbol\n        float decimal = fraction * Math.pow(10, Float.SIZE - Float.numberOfTrailingZeros(fraction));\n\
    \                                                                  ^\n  symbol:\
    \   method numberOfTrailingZeros(float)\n  location: class Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = (truncatedNumber - integerPart) * 1.0f;\n        return decimalPart;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return fraction;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_a1yq_64.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ - Math.floor(number);\n        return decimalPart;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdevspage.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decimalPart = number - Math.floor(number);\n\
    \                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        float integerPart;\n        float decimalPart;\n        float\
    \ remainder;\n        float quotient;\n        float quotientRemainder;\n    \
    \    float quotientRemainderRemainder;\n        float quotientRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainder;\n        float quotientRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\
    \        float quotientRemain\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxgtd2hky.java:42: error: ';' expected\n        float quotientRemain\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = (float)\
    \ Math.floor(number);\n        float decimalPart = (float) number - intPart;\n\
    \        return decimalPart;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number;\n        int integerPart = (int) truncatedNumber;\n        float decimalPart\
    \ = truncatedNumber - integerPart;\n        return decimalPart;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
