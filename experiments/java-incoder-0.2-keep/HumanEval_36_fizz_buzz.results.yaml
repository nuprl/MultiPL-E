name: HumanEval_36_fizz_buzz
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfkosjcf.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph17qkg9z.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkcdk6gwx.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjppry6eg.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi98wn83h.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long remainder2;\n        long remainder3;\n        long\
    \ remainder4;\n        long remainder5;\n        long remainder6;\n        long\
    \ remainder7;\n        long remainder8;\n        long remainder9;\n        long\
    \ remainder10;\n        long remainder11;\n        long remainder12;\n       \
    \ long remainder13;\n        long remainder14;\n        long remainder15;\n  \
    \      long remainder16;\n        long remainder17;\n        long remainder18;\n\
    \        long remainder19;\n        long remainder20;\n        long remainder21;\n\
    \        long remainder22;\n        long remainder23;\n        long remainder24;\n\
    \        long remainder25;\n        long remainder26;\n        long remainder27;\n\
    \        long remainder28;\n        long remainder29;\n        long remainder30;\n\
    \        long remainder31;\n        long remainder32;\n        long remainder33;\n\
    \        long remainder34;\n        long remainder35;\n        long remainder36;\n\
    \        long remainder37;\n        long remainder38;\n        long remainder39;\n\
    \        long remainder40;\n        long remainder41;\n        long remainder42;\n\
    \        long remainder43;\n        long remainder44;\n        long remainder45;\n\
    \        long remainder46;\n        long remainder47;\n        long remainder48;\n\
    \        long remainder49;\n        long remainder50;\n        long remainder51;\n\
    \        long remainder52;\n        long remainder53;\n        long remainder54;\n\
    \        long remainder55;\n        long remainder56;\n        long remainder57;\n\
    \        long remainder58;\n        long remainder59;\n        long remainder60;\n\
    \        long remainder61;\n        long remainder62;\n        long remainder63;\n\
    \        long remainder64;\n        long remainder65;\n        long remainder66;\n\
    \        long remainder67;\n        long remainder68;\n        long remainder69;\n\
    \        long remainder70;\n        long remainder71;\n        long remainder72;\n\
    \        long remainder73;\n        long remainder74;\n        long remainder75;\n\
    \        long remain\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp34s09yp3.java:93: error: ';' expected\n        long remain\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long i;\n        long j;\n        long k;\n        long\
    \ l;\n        long m;\n        long n;\n        long o;\n        long p;\n   \
    \     long q;\n        long r;\n        long s;\n        long t;\n        long\
    \ u;\n        long v;\n        long w;\n        long x;\n        long y;\n   \
    \     long z;\n        long A;\n        long B;\n        long C;\n        long\
    \ D;\n        long E;\n        long F;\n        long G;\n        long H;\n   \
    \     long I;\n        long J;\n        long K;\n        long L;\n        long\
    \ M;\n        long N;\n        long O;\n        long P;\n        long Q;\n   \
    \     long R;\n        long S;\n        long T;\n        long U;\n        long\
    \ V;\n        long W;\n        long X;\n        long Y;\n        long Z;\n   \
    \     long A;\n        long B;\n        long C;\n        long D;\n        long\
    \ E;\n        long F;\n        long G;\n        long H;\n        long I;\n   \
    \     long J;\n        long K;\n        long L;\n        long M;\n        long\
    \ N;\n        long O;\n        long P;\n        long Q;\n        long R;\n   \
    \     long S;\n        long T;\n        long U;\n        long V;\n        long\
    \ W;\n        long X;\n        long Y;\n        long Z;\n        long A;\n   \
    \     long B;\n        long C;\n        long D;\n        long E;\n        long\
    \ F;\n        long G;\n        long H;\n        long I;\n        long J;\n   \
    \     long K;\n        long L;\n        long M;\n        long N;\n        long\
    \ O;\n        long P;\n        long Q;\n        long R;\n        long S;\n   \
    \     long T;\n        long U;\n        long V;\n        long W;\n        long\
    \ X;\n        long Y;\n        long Z;\n        long A;\n        long B;\n   \
    \     long C;\n        long D;\n        long E;\n        long F;\n        long\
    \ G;\n        long H;\n        long I;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2sqsv8dt.java:24: error: variable n is already defined in method\
    \ fizzBuzz(long)\n        long n;\n             ^\n/tmp/tmp2sqsv8dt.java:63: error:\
    \ variable A is already defined in method fizzBuzz(long)\n        long A;\n  \
    \           ^\n/tmp/tmp2sqsv8dt.java:64: error: variable B is already defined\
    \ in method fizzBuzz(long)\n        long B;\n             ^\n/tmp/tmp2sqsv8dt.java:65:\
    \ error: variable C is already defined in method fizzBuzz(long)\n        long\
    \ C;\n             ^\n/tmp/tmp2sqsv8dt.java:66: error: variable D is already defined\
    \ in method fizzBuzz(long)\n        long D;\n             ^\n/tmp/tmp2sqsv8dt.java:67:\
    \ error: variable E is already defined in method fizzBuzz(long)\n        long\
    \ E;\n             ^\n/tmp/tmp2sqsv8dt.java:68: error: variable F is already defined\
    \ in method fizzBuzz(long)\n        long F;\n             ^\n/tmp/tmp2sqsv8dt.java:69:\
    \ error: variable G is already defined in method fizzBuzz(long)\n        long\
    \ G;\n             ^\n/tmp/tmp2sqsv8dt.java:70: error: variable H is already defined\
    \ in method fizzBuzz(long)\n        long H;\n             ^\n/tmp/tmp2sqsv8dt.java:71:\
    \ error: variable I is already defined in method fizzBuzz(long)\n        long\
    \ I;\n             ^\n/tmp/tmp2sqsv8dt.java:72: error: variable J is already defined\
    \ in method fizzBuzz(long)\n        long J;\n             ^\n/tmp/tmp2sqsv8dt.java:73:\
    \ error: variable K is already defined in method fizzBuzz(long)\n        long\
    \ K;\n             ^\n/tmp/tmp2sqsv8dt.java:74: error: variable L is already defined\
    \ in method fizzBuzz(long)\n        long L;\n             ^\n/tmp/tmp2sqsv8dt.java:75:\
    \ error: variable M is already defined in method fizzBuzz(long)\n        long\
    \ M;\n             ^\n/tmp/tmp2sqsv8dt.java:76: error: variable N is already defined\
    \ in method fizzBuzz(long)\n        long N;\n             ^\n/tmp/tmp2sqsv8dt.java:77:\
    \ error: variable O is already defined in method fizzBuzz(long)\n        long\
    \ O;\n             ^\n/tmp/tmp2sqsv8dt.java:78: error: variable P is already defined\
    \ in method fizzBuzz(long)\n        long P;\n             ^\n/tmp/tmp2sqsv8dt.java:79:\
    \ error: variable Q is already defined in method fizzBuzz(long)\n        long\
    \ Q;\n             ^\n/tmp/tmp2sqsv8dt.java:80: error: variable R is already defined\
    \ in method fizzBuzz(long)\n        long R;\n             ^\n/tmp/tmp2sqsv8dt.java:81:\
    \ error: variable S is already defined in method fizzBuzz(long)\n        long\
    \ S;\n             ^\n/tmp/tmp2sqsv8dt.java:82: error: variable T is already defined\
    \ in method fizzBuzz(long)\n        long T;\n             ^\n/tmp/tmp2sqsv8dt.java:83:\
    \ error: variable U is already defined in method fizzBuzz(long)\n        long\
    \ U;\n             ^\n/tmp/tmp2sqsv8dt.java:84: error: variable V is already defined\
    \ in method fizzBuzz(long)\n        long V;\n             ^\n/tmp/tmp2sqsv8dt.java:85:\
    \ error: variable W is already defined in method fizzBuzz(long)\n        long\
    \ W;\n             ^\n/tmp/tmp2sqsv8dt.java:86: error: variable X is already defined\
    \ in method fizzBuzz(long)\n        long X;\n             ^\n/tmp/tmp2sqsv8dt.java:87:\
    \ error: variable Y is already defined in method fizzBuzz(long)\n        long\
    \ Y;\n             ^\n/tmp/tmp2sqsv8dt.java:88: error: variable Z is already defined\
    \ in method fizzBuzz(long)\n        long Z;\n             ^\n/tmp/tmp2sqsv8dt.java:89:\
    \ error: variable A is already defined in method fizzBuzz(long)\n        long\
    \ A;\n             ^\n/tmp/tmp2sqsv8dt.java:90: error: variable B is already defined\
    \ in method fizzBuzz(long)\n        long B;\n             ^\n/tmp/tmp2sqsv8dt.java:91:\
    \ error: variable C is already defined in method fizzBuzz(long)\n        long\
    \ C;\n             ^\n/tmp/tmp2sqsv8dt.java:92: error: variable D is already defined\
    \ in method fizzBuzz(long)\n        long D;\n             ^\n/tmp/tmp2sqsv8dt.java:93:\
    \ error: variable E is already defined in method fizzBuzz(long)\n        long\
    \ E;\n             ^\n/tmp/tmp2sqsv8dt.java:94: error: variable F is already defined\
    \ in method fizzBuzz(long)\n        long F;\n             ^\n/tmp/tmp2sqsv8dt.java:95:\
    \ error: variable G is already defined in method fizzBuzz(long)\n        long\
    \ G;\n             ^\n/tmp/tmp2sqsv8dt.java:96: error: variable H is already defined\
    \ in method fizzBuzz(long)\n        long H;\n             ^\n/tmp/tmp2sqsv8dt.java:97:\
    \ error: variable I is already defined in method fizzBuzz(long)\n        long\
    \ I;\n             ^\n/tmp/tmp2sqsv8dt.java:98: error: variable J is already defined\
    \ in method fizzBuzz(long)\n        long J;\n             ^\n/tmp/tmp2sqsv8dt.java:99:\
    \ error: variable K is already defined in method fizzBuzz(long)\n        long\
    \ K;\n             ^\n/tmp/tmp2sqsv8dt.java:100: error: variable L is already\
    \ defined in method fizzBuzz(long)\n        long L;\n             ^\n/tmp/tmp2sqsv8dt.java:101:\
    \ error: variable M is already defined in method fizzBuzz(long)\n        long\
    \ M;\n             ^\n/tmp/tmp2sqsv8dt.java:102: error: variable N is already\
    \ defined in method fizzBuzz(long)\n        long N;\n             ^\n/tmp/tmp2sqsv8dt.java:103:\
    \ error: variable O is already defined in method fizzBuzz(long)\n        long\
    \ O;\n             ^\n/tmp/tmp2sqsv8dt.java:104: error: variable P is already\
    \ defined in method fizzBuzz(long)\n        long P;\n             ^\n/tmp/tmp2sqsv8dt.java:105:\
    \ error: variable Q is already defined in method fizzBuzz(long)\n        long\
    \ Q;\n             ^\n/tmp/tmp2sqsv8dt.java:106: error: variable R is already\
    \ defined in method fizzBuzz(long)\n        long R;\n             ^\n/tmp/tmp2sqsv8dt.java:107:\
    \ error: variable S is already defined in method fizzBuzz(long)\n        long\
    \ S;\n             ^\n/tmp/tmp2sqsv8dt.java:108: error: variable T is already\
    \ defined in method fizzBuzz(long)\n        long T;\n             ^\n/tmp/tmp2sqsv8dt.java:109:\
    \ error: variable U is already defined in method fizzBuzz(long)\n        long\
    \ U;\n             ^\n/tmp/tmp2sqsv8dt.java:110: error: variable V is already\
    \ defined in method fizzBuzz(long)\n        long V;\n             ^\n/tmp/tmp2sqsv8dt.java:111:\
    \ error: variable W is already defined in method fizzBuzz(long)\n        long\
    \ W;\n             ^\n/tmp/tmp2sqsv8dt.java:112: error: variable X is already\
    \ defined in method fizzBuzz(long)\n        long X;\n             ^\n/tmp/tmp2sqsv8dt.java:113:\
    \ error: variable Y is already defined in method fizzBuzz(long)\n        long\
    \ Y;\n             ^\n/tmp/tmp2sqsv8dt.java:114: error: variable Z is already\
    \ defined in method fizzBuzz(long)\n        long Z;\n             ^\n/tmp/tmp2sqsv8dt.java:115:\
    \ error: variable A is already defined in method fizzBuzz(long)\n        long\
    \ A;\n             ^\n/tmp/tmp2sqsv8dt.java:116: error: variable B is already\
    \ defined in method fizzBuzz(long)\n        long B;\n             ^\n/tmp/tmp2sqsv8dt.java:117:\
    \ error: variable C is already defined in method fizzBuzz(long)\n        long\
    \ C;\n             ^\n/tmp/tmp2sqsv8dt.java:118: error: variable D is already\
    \ defined in method fizzBuzz(long)\n        long D;\n             ^\n/tmp/tmp2sqsv8dt.java:119:\
    \ error: variable E is already defined in method fizzBuzz(long)\n        long\
    \ E;\n             ^\n/tmp/tmp2sqsv8dt.java:120: error: variable F is already\
    \ defined in method fizzBuzz(long)\n        long F;\n             ^\n/tmp/tmp2sqsv8dt.java:121:\
    \ error: variable G is already defined in method fizzBuzz(long)\n        long\
    \ G;\n             ^\n/tmp/tmp2sqsv8dt.java:122: error: variable H is already\
    \ defined in method fizzBuzz(long)\n        long H;\n             ^\n/tmp/tmp2sqsv8dt.java:123:\
    \ error: variable I is already defined in method fizzBuzz(long)\n        long\
    \ I;\n             ^\n62 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long remainder2;\n        long remainder3;\n        long\
    \ remainder4;\n        long remainder5;\n        long remainder6;\n        long\
    \ remainder7;\n        long remainder8;\n        long remainder9;\n        long\
    \ remainder10;\n        long remainder11;\n        long remainder12;\n       \
    \ long remainder13;\n        long remainder14;\n        long remainder15;\n  \
    \      long remainder16;\n        long remainder17;\n        long remainder18;\n\
    \        long remainder19;\n        long remainder20;\n        long remainder21;\n\
    \        long remainder22;\n        long remainder23;\n        long remainder24;\n\
    \        long remainder25;\n        long remainder26;\n        long remainder27;\n\
    \        long remainder28;\n        long remainder29;\n        long remainder30;\n\
    \        long remainder31;\n        long remainder32;\n        long remainder33;\n\
    \        long remainder34;\n        long remainder35;\n        long remainder36;\n\
    \        long remainder37;\n        long remainder38;\n        long remainder39;\n\
    \        long remainder40;\n        long remainder41;\n        long remainder42;\n\
    \        long remainder43;\n        long remainder44;\n        long remainder45;\n\
    \        long remainder46;\n        long remainder47;\n        long remainder48;\n\
    \        long remainder49;\n        long remainder50;\n        long remainder51;\n\
    \        long remainder52;\n        long remainder53;\n        long remainder54;\n\
    \        long remainder55;\n        long remainder56;\n        long remainder57;\n\
    \        long remainder58;\n        long remainder59;\n        long remainder60;\n\
    \        long remainder61;\n        long remainder62;\n        long remainder63;\n\
    \        long remainder64;\n        long remainder65;\n        long remainder66;\n\
    \        long remainder67;\n        long remainder68;\n        long remainder69;\n\
    \        long remainder70;\n        long remainder71;\n        long remainder72;\n\
    \        long remainder73;\n        long remainder74;\n        long remainder75;\n\
    \        long remain\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdy7wpqh3.java:93: error: ';' expected\n        long remain\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe7zf6jh7.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0) {\n            long digit = remainder\
    \ % 10;\n            if (digit == 7 || digit == 11 || digit == 13) {\n       \
    \         count++;\n            }\n            remainder = remainder / 10;\n \
    \       }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpig8qpvg7.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92ar2l19.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvoxv_y2.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 11 || n >= 13) {\n            count = fizzBuzzHelper(n, 11, 13);\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq99t7ni3.java:19: error: cannot find symbol\n            count\
    \ = fizzBuzzHelper(n, 11, 13);\n                    ^\n  symbol:   method fizzBuzzHelper(long,int,int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        do {\n            if (remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n                count++;\n            }\n            remainder\
    \ = remainder / 10;\n        } while (remainder != 0);\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4dazklu7.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n < 10) {\n            count++;\n        }\n        if (n < 100) {\n      \
    \      count += fizzBuzz(n / 10);\n        }\n        if (n < 1000) {\n      \
    \      count += fizzBuzz(n / 100);\n        }\n        if (n < 10000) {\n    \
    \        count += fizzBuzz(n / 1000);\n        }\n        if (n < 100000) {\n\
    \            count += fizzBuzz(n / 10000);\n        }\n        if (n < 1000000)\
    \ {\n            count += fizzBuzz(n / 100000);\n        }\n        if (n < 10000000)\
    \ {\n            count += fizzBuzz(n / 1000000);\n        }\n        if (n < 100000000)\
    \ {\n            count += fizzBuzz(n / 10000000);\n        }\n        if (n <\
    \ 1000000000) {\n            count += fizzBuzz(n / 100000000);\n        }\n  \
    \      if (n < 10000000000) {\n            count += fizzBuzz(n / 1000000000);\n\
    \        }\n        if (n < 100000000000) {\n            count += fizzBuzz(n /\
    \ 10000000000);\n        }\n        if (n < 1000000000000) {\n            count\
    \ += fizzBuzz(n / 100000000000);\n        }\n        if (n < 10000000000000) {\n\
    \            count += fizzBuzz(n / 1000000000000);\n        }\n        if (n <\
    \ 100000000000000) {\n            count += fizzBuzz(n / 10000000000000);\n   \
    \     }\n        if (n < 1000000000000000) {\n            count += fizzBuzz(n\
    \ / 100000000000000);\n        }\n        if (n < 10000000000000000) {\n     \
    \       count += fizzBuzz(n / 1000000000000000);\n        }\n        if (n < 100000000000000000)\
    \ {\n            count += fizzBuzz(n / 10000000000000000);\n        }\n      \
    \  if (n < 100000000000000000) {\n            count += fizzBuzz(n / 100000000000000000);\n\
    \        }\n        if (n < 1000000000000000000) {\n            count += fizzBuzz(n\
    \ / 100000000000000000);\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgfir3xm2.java:45: error: integer number too large\n        if (n\
    \ < 10000000000) {\n                ^\n/tmp/tmpgfir3xm2.java:48: error: integer\
    \ number too large\n        if (n < 100000000000) {\n                ^\n/tmp/tmpgfir3xm2.java:49:\
    \ error: integer number too large\n            count += fizzBuzz(n / 10000000000);\n\
    \                                  ^\n/tmp/tmpgfir3xm2.java:51: error: integer\
    \ number too large\n        if (n < 1000000000000) {\n                ^\n/tmp/tmpgfir3xm2.java:52:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000);\n\
    \                                  ^\n/tmp/tmpgfir3xm2.java:54: error: integer\
    \ number too large\n        if (n < 10000000000000) {\n                ^\n/tmp/tmpgfir3xm2.java:55:\
    \ error: integer number too large\n            count += fizzBuzz(n / 1000000000000);\n\
    \                                  ^\n/tmp/tmpgfir3xm2.java:57: error: integer\
    \ number too large\n        if (n < 100000000000000) {\n                ^\n/tmp/tmpgfir3xm2.java:58:\
    \ error: integer number too large\n            count += fizzBuzz(n / 10000000000000);\n\
    \                                  ^\n/tmp/tmpgfir3xm2.java:60: error: integer\
    \ number too large\n        if (n < 1000000000000000) {\n                ^\n/tmp/tmpgfir3xm2.java:61:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000000);\n\
    \                                  ^\n/tmp/tmpgfir3xm2.java:63: error: integer\
    \ number too large\n        if (n < 10000000000000000) {\n                ^\n\
    /tmp/tmpgfir3xm2.java:64: error: integer number too large\n            count +=\
    \ fizzBuzz(n / 1000000000000000);\n                                  ^\n/tmp/tmpgfir3xm2.java:66:\
    \ error: integer number too large\n        if (n < 100000000000000000) {\n   \
    \             ^\n/tmp/tmpgfir3xm2.java:67: error: integer number too large\n \
    \           count += fizzBuzz(n / 10000000000000000);\n                      \
    \            ^\n/tmp/tmpgfir3xm2.java:69: error: integer number too large\n  \
    \      if (n < 100000000000000000) {\n                ^\n/tmp/tmpgfir3xm2.java:70:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000000000);\n\
    \                                  ^\n/tmp/tmpgfir3xm2.java:72: error: integer\
    \ number too large\n        if (n < 1000000000000000000) {\n                ^\n\
    /tmp/tmpgfir3xm2.java:73: error: integer number too large\n            count +=\
    \ fizzBuzz(n / 100000000000000000);\n                                  ^\n19 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 11;\n            if (remainder\
    \ == 7) {\n                count++;\n            }\n            n = n / 11;\n\
    \        } while (remainder != 7);\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhuyeuop.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 7)\n             \
    \   count++;\n        }\n        for (long i = n; i > 0; i /= 13) {\n        \
    \    if (i % 13 == 7)\n                count++;\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne6_h5j6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6v_dtrg9.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = 11L;\n        long mod;\n        while (n > 0) {\n            mod = n\
    \ % div;\n            if (mod == 7) {\n                count++;\n            }\n\
    \            div = div * 10L;\n            n = n / div;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv02pza73.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder != 0) {\n            long digit = remainder\
    \ % 10;\n            if (digit == 7) {\n                count++;\n           \
    \ }\n            remainder = remainder / 10;\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_9yxdw6q.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph33v0c6d.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long counter = 0;\n        long temp;\n        long temp2;\n\
    \        long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n        long temp85;\n        long temp86;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpusv2igsw.java:107: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 0) count += 1;\n \
    \           if (i % 13 == 0) count += 1;\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3wtpn10.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = 0;\n        long remainder2 = 0;\n        long remainder3 = 0;\n\
    \        long remainder4 = 0;\n        long remainder5 = 0;\n        long remainder6\
    \ = 0;\n        long remainder7 = 0;\n        long remainder8 = 0;\n        long\
    \ remainder9 = 0;\n        long remainder10 = 0;\n        long remainder11 = 0;\n\
    \        long remainder12 = 0;\n        long remainder13 = 0;\n        long remainder14\
    \ = 0;\n        long remainder15 = 0;\n        long remainder16 = 0;\n       \
    \ long remainder17 = 0;\n        long remainder18 = 0;\n        long remainder19\
    \ = 0;\n        long remainder20 = 0;\n        long remainder21 = 0;\n       \
    \ long remainder22 = 0;\n        long remainder23 = 0;\n        long remainder24\
    \ = 0;\n        long remainder25 = 0;\n        long remainder26 = 0;\n       \
    \ long remainder27 = 0;\n        long remainder28 = 0;\n        long remainder29\
    \ = 0;\n        long remainder30 = 0;\n        long remainder31 = 0;\n       \
    \ long remainder32 = 0;\n        long remainder33 = 0;\n        long remainder34\
    \ = 0;\n        long remainder35 = 0;\n        long remainder36 = 0;\n       \
    \ long remainder37 = 0;\n        long remainder38 = 0;\n        long remainder39\
    \ = 0;\n        long remainder40 = 0;\n        long remainder41 = 0;\n       \
    \ long remainder42 = 0;\n        long remainder43 = 0;\n        long remainder44\
    \ = 0;\n        long remainder45 = 0;\n        long remainder46 = 0;\n       \
    \ long remainder47 = 0;\n        long remainder48 = 0;\n        long remainder49\
    \ = 0;\n        long remainder50 = 0;\n        long remainder51 = 0;\n       \
    \ long remainder52 = 0;\n        long remainder53 = 0;\n        long remainder54\
    \ = 0;\n        long remainder55 = 0;\n        long remainder56 = 0;\n       \
    \ long remainder57 = 0;\n        long remainder58 = 0;\n        long remainder59\
    \ = 0;\n        long remainder60 = 0;\n        long remainder61 = 0;\n       \
    \ long remainder62 = 0;\n        long remainder63 = 0;\n        long remainder64\
    \ = 0;\n        long remainder65 = 0;\n        long remainder66 = 0;\n       \
    \ long remainder67 = 0;\n        long remainder68 = 0;\n        long remainder69\
    \ = 0;\n        long remainder70 = 0;\n        long remainder71 = 0;\n       \
    \ long remainder72 = 0;\n        long remainder73 = 0;\n        long \n    }\n\
    \    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxyojzpbe.java:91: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpxyojzpbe.java:91: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplbga01ky.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 0) count += 1;\n \
    \           if (i % 13 == 0) count += 1;\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpebia9b2h.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count = fizzBuzzHelper(n, 100, 11, 13);\n\
    \        } else if (n >= 1000 && n <= 9999) {\n            count = fizzBuzzHelper(n,\
    \ 1000, 11, 13);\n        } else if (n >= 10000 && n <= 99999) {\n           \
    \ count = fizzBuzzHelper(n, 10000, 11, 13);\n        } else if (n >= 100000 &&\
    \ n <= 999999) {\n            count = fizzBuzzHelper(n, 100000, 11, 13);\n   \
    \     } else if (n >= 1000000 && n <= 999999) {\n            count = fizzBuzzHelper(n,\
    \ 1000000, 11, 13);\n        } else if (n >= 10000000 && n <= 9999999) {\n   \
    \         count = fizzBuzzHelper(n, 10000000, 11, 13);\n        } else if (n >=\
    \ 100000000 && n <= 99999999) {\n            count = fizzBuzzHelper(n, 100000000,\
    \ 11, 13);\n        } else if (n >= 1000000000 && n <= 999999999) {\n        \
    \    count = fizzBuzzHelper(n, 1000000000, 11, 13);\n        } else if (n >= 10000000000\
    \ && n <= 99999999999) {\n            count = fizzBuzzHelper(n, 10000000000, 11,\
    \ 13);\n        } else if (n >= 100000000000 && n <= 999999999999) {\n       \
    \     count = fizzBuzzHelper(n, 100000000000, 11, 13);\n        } else if (n >=\
    \ 1000000000000 && n <= 999999999) {\n            count = fizzBuzzHelper(n, 1000000000000,\
    \ 11, 13);\n        } else if (n >= 10000000000000 && n <= 999999999999) {\n \
    \           count = fizzBuzzHelper(n, 10000000000000, 11, 13);\n        } else\
    \ if (n >= 100000000000000 && n <= 999999999999) {\n            count = fizzBuzzHelper(n,\
    \ 100000000000000, 11, 13);\n        } else if (n >= 1000000000000000 && n <=\
    \ 999999999999) {\n            count = fizzBuzzHelper(n, 1000000000000000, 11,\
    \ 13);\n        } else if (n >= 10000000000000000 && n <= 999999999999) {\n  \
    \          count = fizzBuzzHelper(n, 10000000000000000, 11, 13);\n        } else\
    \ if (n >= 100000000000000000 && n <= 999999999999) {\n            count = fizzBuzzHelper(n,\
    \ 100000000000000000, 11, 13);\n        } else if (n >= 1000000000000000000 &&\
    \ n <= 999999999999) {\n            count = fizzBuzzHelper(n, 1000000000000000000,\
    \ 11, 13);\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpebz0xetr.java:34: error: integer number too large\n        } else\
    \ if (n >= 10000000000 && n <= 99999999999) {\n                        ^\n/tmp/tmpebz0xetr.java:34:\
    \ error: integer number too large\n        } else if (n >= 10000000000 && n <=\
    \ 99999999999) {\n                                            ^\n/tmp/tmpebz0xetr.java:35:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 10000000000,\
    \ 11, 13);\n                                      ^\n/tmp/tmpebz0xetr.java:36:\
    \ error: integer number too large\n        } else if (n >= 100000000000 && n <=\
    \ 999999999999) {\n                        ^\n/tmp/tmpebz0xetr.java:36: error:\
    \ integer number too large\n        } else if (n >= 100000000000 && n <= 999999999999)\
    \ {\n                                             ^\n/tmp/tmpebz0xetr.java:37:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 100000000000,\
    \ 11, 13);\n                                      ^\n/tmp/tmpebz0xetr.java:38:\
    \ error: integer number too large\n        } else if (n >= 1000000000000 && n\
    \ <= 999999999) {\n                        ^\n/tmp/tmpebz0xetr.java:39: error:\
    \ integer number too large\n            count = fizzBuzzHelper(n, 1000000000000,\
    \ 11, 13);\n                                      ^\n/tmp/tmpebz0xetr.java:40:\
    \ error: integer number too large\n        } else if (n >= 10000000000000 && n\
    \ <= 999999999999) {\n                        ^\n/tmp/tmpebz0xetr.java:40: error:\
    \ integer number too large\n        } else if (n >= 10000000000000 && n <= 999999999999)\
    \ {\n                                               ^\n/tmp/tmpebz0xetr.java:41:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 10000000000000,\
    \ 11, 13);\n                                      ^\n/tmp/tmpebz0xetr.java:42:\
    \ error: integer number too large\n        } else if (n >= 100000000000000 &&\
    \ n <= 999999999999) {\n                        ^\n/tmp/tmpebz0xetr.java:42: error:\
    \ integer number too large\n        } else if (n >= 100000000000000 && n <= 999999999999)\
    \ {\n                                                ^\n/tmp/tmpebz0xetr.java:43:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 100000000000000,\
    \ 11, 13);\n                                      ^\n/tmp/tmpebz0xetr.java:44:\
    \ error: integer number too large\n        } else if (n >= 1000000000000000 &&\
    \ n <= 999999999999) {\n                        ^\n/tmp/tmpebz0xetr.java:44: error:\
    \ integer number too large\n        } else if (n >= 1000000000000000 && n <= 999999999999)\
    \ {\n                                                 ^\n/tmp/tmpebz0xetr.java:45:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 1000000000000000,\
    \ 11, 13);\n                                      ^\n/tmp/tmpebz0xetr.java:46:\
    \ error: integer number too large\n        } else if (n >= 10000000000000000 &&\
    \ n <= 999999999999) {\n                        ^\n/tmp/tmpebz0xetr.java:46: error:\
    \ integer number too large\n        } else if (n >= 10000000000000000 && n <=\
    \ 999999999999) {\n                                                  ^\n/tmp/tmpebz0xetr.java:47:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 10000000000000000,\
    \ 11, 13);\n                                      ^\n/tmp/tmpebz0xetr.java:48:\
    \ error: integer number too large\n        } else if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n                        ^\n/tmp/tmpebz0xetr.java:48:\
    \ error: integer number too large\n        } else if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n                                                  \
    \ ^\n/tmp/tmpebz0xetr.java:49: error: integer number too large\n            count\
    \ = fizzBuzzHelper(n, 100000000000000000, 11, 13);\n                         \
    \             ^\n/tmp/tmpebz0xetr.java:50: error: integer number too large\n \
    \       } else if (n >= 1000000000000000000 && n <= 999999999999) {\n        \
    \                ^\n/tmp/tmpebz0xetr.java:50: error: integer number too large\n\
    \        } else if (n >= 1000000000000000000 && n <= 999999999999) {\n       \
    \                                             ^\n/tmp/tmpebz0xetr.java:51: error:\
    \ integer number too large\n            count = fizzBuzzHelper(n, 1000000000000000000,\
    \ 11, 13);\n                                      ^\n26 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 10;\n            if (remainder\
    \ == 7 || remainder == 11 || remainder == 13) {\n                count++;\n  \
    \          }\n            n = n / 10;\n        } while (n != 0);\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpimq_xfqe.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long dividend = n;\n        do {\n            remainder\
    \ = dividend % 11;\n            if (remainder == 7) {\n                count++;\n\
    \            }\n            dividend = dividend / 11;\n        } while (dividend\
    \ > 0);\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkvmo1_rq.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        remainder = n % 7;\n        if (remainder == 0) {\n          \
    \  count = count + 1;\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr30ffwdv.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (mod != 0 || div != 0)\
    \ {\n            count++;\n        }\n        div = n / 13;\n        mod = n %\
    \ 13;\n        if (mod != 0 || div != 0) {\n            count++;\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn08mowph.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long quotient;\n        long remainder2;\n        long quotient2;\n\
    \        long remainder3;\n        long quotient3;\n        long remainder4;\n\
    \        long quotient4;\n        long remainder5;\n        long quotient5;\n\
    \        long remainder6;\n        long quotient6;\n        long remainder7;\n\
    \        long quotient7;\n        long remainder8;\n        long quotient8;\n\
    \        long remainder9;\n        long quotient9;\n        long remainder10;\n\
    \        long quotient10;\n        long remainder11;\n        long quotient11;\n\
    \        long remainder12;\n        long quotient12;\n        long remainder13;\n\
    \        long quotient13;\n        long remainder14;\n        long quotient14;\n\
    \        long remainder15;\n        long quotient15;\n        long remainder16;\n\
    \        long quotient16;\n        long remainder17;\n        long quotient17;\n\
    \        long remainder18;\n        long quotient18;\n        long remainder19;\n\
    \        long quotient19;\n        long remainder20;\n        long quotient20;\n\
    \        long remainder21;\n        long quotient21;\n        long remainder22;\n\
    \        long quotient22;\n        long remainder23;\n        long quotient23;\n\
    \        long remainder24;\n        long quotient24;\n        long remainder25;\n\
    \        long quotient25;\n        long remainder26;\n        long quotient26;\n\
    \        long remainder27;\n        long quotient27;\n        long remainder28;\n\
    \        long quotient28;\n        long remainder29;\n        long quotient29;\n\
    \        long remainder30;\n        long quotient30;\n        long remainder31;\n\
    \        long quotient31;\n        long remainder32;\n        long quotient32;\n\
    \        long remainder33;\n        long quotient33;\n        long remainder34;\n\
    \        long quotient34;\n        long remainder35;\n        long quotient35;\n\
    \        long remainder36;\n        long quotient36;\n        long remainder37;\n\
    \        long quotient37;\n        long remainder38;\n        long quotient38;\n\
    \        long remainder39;\n        long quotient39;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpow9g0sck.java:97: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count += fizzBuzz(n / 100);\n        \
    \    count += fizzBuzz(n % 100);\n        } else if (n >= 1000 && n <= 9999) {\n\
    \            count += fizzBuzz(n / 1000);\n            count += fizzBuzz(n % 1000);\n\
    \        } else if (n >= 10000 && n <= 99999) {\n            count += fizzBuzz(n\
    \ / 10000);\n            count += fizzBuzz(n % 10000);\n        } else if (n >=\
    \ 100000 && n <= 999999) {\n            count += fizzBuzz(n / 100000);\n     \
    \       count += fizzBuzz(n % 100000);\n        } else if (n >= 1000000 && n <=\
    \ 999999999) {\n            count += fizzBuzz(n / 1000000);\n            count\
    \ += fizzBuzz(n % 1000000);\n        } else if (n >= 10000000 && n <= 99999999999)\
    \ {\n            count += fizzBuzz(n / 10000000);\n            count += fizzBuzz(n\
    \ % 10000000);\n        } else if (n >= 1000000000 && n <= 999999999999) {\n \
    \           count += fizzBuzz(n / 1000000000);\n            count += fizzBuzz(n\
    \ % 1000000000);\n        } else if (n >= 1000000000000 && n <= 999999999999999)\
    \ {\n            count += fizzBuzz(n / 1000000000000);\n            count += fizzBuzz(n\
    \ % 1000000000000);\n        } else if (n >= 1000000000000000 && n <= 999999999999999999)\
    \ {\n            count += fizzBuzz(n / 1000000000000000);\n            count +=\
    \ fizzBuzz(n % 1000000000000000);\n        } else if (n >= 1000000000000000000\
    \ && n <= 999999999999999999999) {\n            count += fizzBuzz(n / 1000000000000000000);\n\
    \            count += fizzBuzz(n % 1000000000000000000);\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfmf2b0ep.java:33: error: integer number too large\n        } else\
    \ if (n >= 10000000 && n <= 99999999999) {\n                                 \
    \        ^\n/tmp/tmpfmf2b0ep.java:36: error: integer number too large\n      \
    \  } else if (n >= 1000000000 && n <= 999999999999) {\n                      \
    \                     ^\n/tmp/tmpfmf2b0ep.java:39: error: integer number too large\n\
    \        } else if (n >= 1000000000000 && n <= 999999999999999) {\n          \
    \              ^\n/tmp/tmpfmf2b0ep.java:39: error: integer number too large\n\
    \        } else if (n >= 1000000000000 && n <= 999999999999999) {\n          \
    \                                    ^\n/tmp/tmpfmf2b0ep.java:40: error: integer\
    \ number too large\n            count += fizzBuzz(n / 1000000000000);\n      \
    \                            ^\n/tmp/tmpfmf2b0ep.java:41: error: integer number\
    \ too large\n            count += fizzBuzz(n % 1000000000000);\n             \
    \                     ^\n/tmp/tmpfmf2b0ep.java:42: error: integer number too large\n\
    \        } else if (n >= 1000000000000000 && n <= 999999999999999999) {\n    \
    \                    ^\n/tmp/tmpfmf2b0ep.java:42: error: integer number too large\n\
    \        } else if (n >= 1000000000000000 && n <= 999999999999999999) {\n    \
    \                                             ^\n/tmp/tmpfmf2b0ep.java:43: error:\
    \ integer number too large\n            count += fizzBuzz(n / 1000000000000000);\n\
    \                                  ^\n/tmp/tmpfmf2b0ep.java:44: error: integer\
    \ number too large\n            count += fizzBuzz(n % 1000000000000000);\n   \
    \                               ^\n/tmp/tmpfmf2b0ep.java:45: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000000 && n <= 999999999999999999999)\
    \ {\n                        ^\n/tmp/tmpfmf2b0ep.java:45: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000000 && n <= 999999999999999999999)\
    \ {\n                                                    ^\n/tmp/tmpfmf2b0ep.java:46:\
    \ error: integer number too large\n            count += fizzBuzz(n / 1000000000000000000);\n\
    \                                  ^\n/tmp/tmpfmf2b0ep.java:47: error: integer\
    \ number too large\n            count += fizzBuzz(n % 1000000000000000000);\n\
    \                                  ^\n14 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprq9zvp5k.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplo5x84ke.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = \n    }\n    public static void main(String[] args) {\n \
    \   assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n \
    \   assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxh9rkavz.java:109: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp0730jyg.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zbfhfxf.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3qhb2ee.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder >= 11 || remainder >= 13) {\n     \
    \       if (remainder >= 11) {\n                remainder -= 11;\n           \
    \     count++;\n            }\n            if (remainder >= 13) {\n          \
    \      remainder -= 13;\n                count++;\n            }\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppvzt6o9y.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 10;\n            if (remainder\
    \ == 7 || remainder == 11 || remainder == 13) {\n                count++;\n  \
    \          }\n            n = n / 10;\n        } while (n != 0);\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi34wwffr.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n < 10) {\n            count++;\n        }\n        if (n < 100) {\n      \
    \      count += fizzBuzz(n / 10);\n        }\n        if (n < 1000) {\n      \
    \      count += fizzBuzz(n / 100);\n        }\n        if (n < 10000) {\n    \
    \        count += fizzBuzz(n / 1000);\n        }\n        if (n < 100000) {\n\
    \            count += fizzBuzz(n / 10000);\n        }\n        if (n < 1000000)\
    \ {\n            count += fizzBuzz(n / 100000);\n        }\n        if (n < 10000000)\
    \ {\n            count += fizzBuzz(n / 1000000);\n        }\n        if (n < 100000000)\
    \ {\n            count += fizzBuzz(n / 10000000);\n        }\n        if (n <\
    \ 1000000000) {\n            count += fizzBuzz(n / 100000000);\n        }\n  \
    \      if (n < 10000000000) {\n            count += fizzBuzz(n / 1000000000);\n\
    \        }\n        if (n < 100000000000) {\n            count += fizzBuzz(n /\
    \ 10000000000);\n        }\n        if (n < 1000000000000) {\n            count\
    \ += fizzBuzz(n / 100000000000);\n        }\n        if (n < 10000000000000) {\n\
    \            count += fizzBuzz(n / 1000000000000);\n        }\n        if (n <\
    \ 100000000000000) {\n            count += fizzBuzz(n / 10000000000000);\n   \
    \     }\n        if (n < 1000000000000000) {\n            count += fizzBuzz(n\
    \ / 100000000000000);\n        }\n        if (n < 10000000000000000) {\n     \
    \       count += fizzBuzz(n / 1000000000000000);\n        }\n        if (n < 100000000000000000)\
    \ {\n            count += fizzBuzz(n / 10000000000000000);\n        }\n      \
    \  if (n < 100000000000000000) {\n            count += fizzBuzz(n / 100000000000000000);\n\
    \        }\n        if (n < 1000000000000000000) {\n            count += fizzBuzz(n\
    \ / 100000000000000000);\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfqymbb7q.java:45: error: integer number too large\n        if (n\
    \ < 10000000000) {\n                ^\n/tmp/tmpfqymbb7q.java:48: error: integer\
    \ number too large\n        if (n < 100000000000) {\n                ^\n/tmp/tmpfqymbb7q.java:49:\
    \ error: integer number too large\n            count += fizzBuzz(n / 10000000000);\n\
    \                                  ^\n/tmp/tmpfqymbb7q.java:51: error: integer\
    \ number too large\n        if (n < 1000000000000) {\n                ^\n/tmp/tmpfqymbb7q.java:52:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000);\n\
    \                                  ^\n/tmp/tmpfqymbb7q.java:54: error: integer\
    \ number too large\n        if (n < 10000000000000) {\n                ^\n/tmp/tmpfqymbb7q.java:55:\
    \ error: integer number too large\n            count += fizzBuzz(n / 1000000000000);\n\
    \                                  ^\n/tmp/tmpfqymbb7q.java:57: error: integer\
    \ number too large\n        if (n < 100000000000000) {\n                ^\n/tmp/tmpfqymbb7q.java:58:\
    \ error: integer number too large\n            count += fizzBuzz(n / 10000000000000);\n\
    \                                  ^\n/tmp/tmpfqymbb7q.java:60: error: integer\
    \ number too large\n        if (n < 1000000000000000) {\n                ^\n/tmp/tmpfqymbb7q.java:61:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000000);\n\
    \                                  ^\n/tmp/tmpfqymbb7q.java:63: error: integer\
    \ number too large\n        if (n < 10000000000000000) {\n                ^\n\
    /tmp/tmpfqymbb7q.java:64: error: integer number too large\n            count +=\
    \ fizzBuzz(n / 1000000000000000);\n                                  ^\n/tmp/tmpfqymbb7q.java:66:\
    \ error: integer number too large\n        if (n < 100000000000000000) {\n   \
    \             ^\n/tmp/tmpfqymbb7q.java:67: error: integer number too large\n \
    \           count += fizzBuzz(n / 10000000000000000);\n                      \
    \            ^\n/tmp/tmpfqymbb7q.java:69: error: integer number too large\n  \
    \      if (n < 100000000000000000) {\n                ^\n/tmp/tmpfqymbb7q.java:70:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000000000);\n\
    \                                  ^\n/tmp/tmpfqymbb7q.java:72: error: integer\
    \ number too large\n        if (n < 1000000000000000000) {\n                ^\n\
    /tmp/tmpfqymbb7q.java:73: error: integer number too large\n            count +=\
    \ fizzBuzz(n / 100000000000000000);\n                                  ^\n19 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6zhlh35p.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkctj6nh.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder != 0) {\n            long digit = remainder\
    \ % 10;\n            if (digit == 7 && remainder % 11 == 0 || digit == 7 && remainder\
    \ % 13 == 0) {\n                count++;\n            }\n            remainder\
    \ = remainder / 10;\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmporevhnnx.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxajm1vht.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (mod != 0 || div != 0)\
    \ {\n            count++;\n        }\n        div = n / 13;\n        mod = n %\
    \ 13;\n        if (mod != 0 || div != 0) {\n            count++;\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpveslk_3t.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmnxfcc0i.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count = fizzBuzzHelper(n, 0);\n      \
    \  } else if (n >= 1000 && n <= 9999) {\n            count = fizzBuzzHelper(n,\
    \ 1);\n        } else if (n >= 10000 && n <= 99999) {\n            count = fizzBuzzHelper(n,\
    \ 2);\n        } else if (n >= 100000 && n <= 999999) {\n            count = fizzBuzzHelper(n,\
    \ 3);\n        } else if (n >= 1000000 && n <= 9999999) {\n            count =\
    \ fizzBuzzHelper(n, 4);\n        } else if (n >= 10000000 && n <= 99999999) {\n\
    \            count = fizzBuzzHelper(n, 5);\n        } else if (n >= 100000000\
    \ && n <= 999999999) {\n            count = fizzBuzzHelper(n, 6);\n        } else\
    \ if (n >= 1000000000 && n <= 99999999999) {\n            count = fizzBuzzHelper(n,\
    \ 7);\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64ddlnnp.java:32: error: integer number too large\n        } else\
    \ if (n >= 1000000000 && n <= 99999999999) {\n                               \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n  \
    \              count++;\n            }\n        }\n        if (n >= 1000 && n\
    \ <= 9999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n                count++;\n\
    \            }\n        }\n        if (n >= 10000 && n <= 99999) {\n         \
    \   if (n % 11 == 0 || n % 13 == 0) {\n                count++;\n            }\n\
    \        }\n        if (n >= 100000 && n <= 999999) {\n            if (n % 11\
    \ == 0 || n % 13 == 0) {\n                count++;\n            }\n        }\n\
    \        if (n >= 1000000 && n <= 9999999) {\n            if (n % 11 == 0 || n\
    \ % 13 == 0) {\n                count++;\n            }\n        }\n        if\
    \ (n >= 10000000 && n <= 99999999) {\n            if (n % 11 == 0 || n % 13 ==\
    \ 0) {\n                count++;\n            }\n        }\n        if (n >= 100000000\
    \ && n <= 999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n      \
    \          count++;\n            }\n        }\n        if (n >= 1000000000 &&\
    \ n <= 99999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n       \
    \         count++;\n            }\n        }\n        if (n >= 10000000000 &&\
    \ n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n      \
    \          count++;\n            }\n        }\n        if (n >= 100000000000 &&\
    \ n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n      \
    \          count++;\n            }\n        }\n        if (n >= 1000000000000\
    \ && n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n   \
    \             count++;\n            }\n        }\n        if (n >= 10000000000000\
    \ && n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n   \
    \             count++;\n            }\n        }\n        if (n >= 100000000000000\
    \ && n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n   \
    \             count++;\n            }\n        }\n        if (n >= 1000000000000000\
    \ && n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n   \
    \             count++;\n            }\n        }\n        if (n >= 10000000000000000\
    \ && n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n   \
    \             count++;\n            }\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n   \
    \             count++;\n            }\n        }\n        if (n >= 1000000000000000000\
    \ && n <= 999999999999) {\n            if (n % 11 == 0 || n % 13 == 0) {\n   \
    \             count++;\n            }\n        }\n        if (n >= 10000000000000000000\
    \ && \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gnefr_1.java:53: error: integer number too large\n        if (n\
    \ >= 1000000000 && n <= 99999999999) {\n                                    ^\n\
    /tmp/tmp4gnefr_1.java:58: error: integer number too large\n        if (n >= 10000000000\
    \ && n <= 999999999999) {\n                 ^\n/tmp/tmp4gnefr_1.java:58: error:\
    \ integer number too large\n        if (n >= 10000000000 && n <= 999999999999)\
    \ {\n                                     ^\n/tmp/tmp4gnefr_1.java:63: error:\
    \ integer number too large\n        if (n >= 100000000000 && n <= 999999999999)\
    \ {\n                 ^\n/tmp/tmp4gnefr_1.java:63: error: integer number too large\n\
    \        if (n >= 100000000000 && n <= 999999999999) {\n                     \
    \                 ^\n/tmp/tmp4gnefr_1.java:68: error: integer number too large\n\
    \        if (n >= 1000000000000 && n <= 999999999999) {\n                 ^\n\
    /tmp/tmp4gnefr_1.java:68: error: integer number too large\n        if (n >= 1000000000000\
    \ && n <= 999999999999) {\n                                       ^\n/tmp/tmp4gnefr_1.java:73:\
    \ error: integer number too large\n        if (n >= 10000000000000 && n <= 999999999999)\
    \ {\n                 ^\n/tmp/tmp4gnefr_1.java:73: error: integer number too large\n\
    \        if (n >= 10000000000000 && n <= 999999999999) {\n                   \
    \                     ^\n/tmp/tmp4gnefr_1.java:78: error: integer number too large\n\
    \        if (n >= 100000000000000 && n <= 999999999999) {\n                 ^\n\
    /tmp/tmp4gnefr_1.java:78: error: integer number too large\n        if (n >= 100000000000000\
    \ && n <= 999999999999) {\n                                         ^\n/tmp/tmp4gnefr_1.java:83:\
    \ error: integer number too large\n        if (n >= 1000000000000000 && n <= 999999999999)\
    \ {\n                 ^\n/tmp/tmp4gnefr_1.java:83: error: integer number too large\n\
    \        if (n >= 1000000000000000 && n <= 999999999999) {\n                 \
    \                         ^\n/tmp/tmp4gnefr_1.java:88: error: integer number too\
    \ large\n        if (n >= 10000000000000000 && n <= 999999999999) {\n        \
    \         ^\n/tmp/tmp4gnefr_1.java:88: error: integer number too large\n     \
    \   if (n >= 10000000000000000 && n <= 999999999999) {\n                     \
    \                      ^\n/tmp/tmp4gnefr_1.java:93: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmp4gnefr_1.java:93: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmp4gnefr_1.java:98: error: integer number too\
    \ large\n        if (n >= 1000000000000000000 && n <= 999999999999) {\n      \
    \           ^\n/tmp/tmp4gnefr_1.java:98: error: integer number too large\n   \
    \     if (n >= 1000000000000000000 && n <= 999999999999) {\n                 \
    \                            ^\n/tmp/tmp4gnefr_1.java:103: error: integer number\
    \ too large\n        if (n >= 10000000000000000000 && \n                 ^\n/tmp/tmp4gnefr_1.java:104:\
    \ error: illegal start of expression\n    }\n    ^\n21 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpghmtejt3.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 10;\n            if (remainder\
    \ == 7 || remainder == 11 || remainder == 13) {\n                count++;\n  \
    \          }\n            n /= 10;\n        } while (n != 0);\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptndkercn.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7omeoeth.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n < 10) {\n            count++;\n        }\n        if (n < 100) {\n      \
    \      count += fizzBuzz(n / 10);\n        }\n        if (n < 1000) {\n      \
    \      count += fizzBuzz(n / 100);\n        }\n        if (n < 10000) {\n    \
    \        count += fizzBuzz(n / 1000);\n        }\n        if (n < 100000) {\n\
    \            count += fizzBuzz(n / 10000);\n        }\n        if (n < 1000000)\
    \ {\n            count += fizzBuzz(n / 100000);\n        }\n        if (n < 10000000)\
    \ {\n            count += fizzBuzz(n / 1000000);\n        }\n        if (n < 100000000)\
    \ {\n            count += fizzBuzz(n / 10000000);\n        }\n        if (n <\
    \ 1000000000) {\n            count += fizzBuzz(n / 100000000);\n        }\n  \
    \      if (n < 10000000000) {\n            count += fizzBuzz(n / 1000000000);\n\
    \        }\n        if (n < 100000000000) {\n            count += fizzBuzz(n /\
    \ 10000000000);\n        }\n        if (n < 1000000000000) {\n            count\
    \ += fizzBuzz(n / 100000000000);\n        }\n        if (n < 10000000000000) {\n\
    \            count += fizzBuzz(n / 1000000000000);\n        }\n        if (n <\
    \ 100000000000000) {\n            count += fizzBuzz(n / 10000000000000);\n   \
    \     }\n        if (n < 1000000000000000) {\n            count += fizzBuzz(n\
    \ / 100000000000000);\n        }\n        if (n < 10000000000000000) {\n     \
    \       count += fizzBuzz(n / 1000000000000000);\n        }\n        if (n < 100000000000000000)\
    \ {\n            count += fizzBuzz(n / 10000000000000000);\n        }\n      \
    \  if (n < 100000000000000000) {\n            count += fizzBuzz(n / 100000000000000000);\n\
    \        }\n        if (n < 1000000000000000000) {\n            count += fizzBuzz(n\
    \ / 100000000000000000);\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4h11b4qr.java:45: error: integer number too large\n        if (n\
    \ < 10000000000) {\n                ^\n/tmp/tmp4h11b4qr.java:48: error: integer\
    \ number too large\n        if (n < 100000000000) {\n                ^\n/tmp/tmp4h11b4qr.java:49:\
    \ error: integer number too large\n            count += fizzBuzz(n / 10000000000);\n\
    \                                  ^\n/tmp/tmp4h11b4qr.java:51: error: integer\
    \ number too large\n        if (n < 1000000000000) {\n                ^\n/tmp/tmp4h11b4qr.java:52:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000);\n\
    \                                  ^\n/tmp/tmp4h11b4qr.java:54: error: integer\
    \ number too large\n        if (n < 10000000000000) {\n                ^\n/tmp/tmp4h11b4qr.java:55:\
    \ error: integer number too large\n            count += fizzBuzz(n / 1000000000000);\n\
    \                                  ^\n/tmp/tmp4h11b4qr.java:57: error: integer\
    \ number too large\n        if (n < 100000000000000) {\n                ^\n/tmp/tmp4h11b4qr.java:58:\
    \ error: integer number too large\n            count += fizzBuzz(n / 10000000000000);\n\
    \                                  ^\n/tmp/tmp4h11b4qr.java:60: error: integer\
    \ number too large\n        if (n < 1000000000000000) {\n                ^\n/tmp/tmp4h11b4qr.java:61:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000000);\n\
    \                                  ^\n/tmp/tmp4h11b4qr.java:63: error: integer\
    \ number too large\n        if (n < 10000000000000000) {\n                ^\n\
    /tmp/tmp4h11b4qr.java:64: error: integer number too large\n            count +=\
    \ fizzBuzz(n / 1000000000000000);\n                                  ^\n/tmp/tmp4h11b4qr.java:66:\
    \ error: integer number too large\n        if (n < 100000000000000000) {\n   \
    \             ^\n/tmp/tmp4h11b4qr.java:67: error: integer number too large\n \
    \           count += fizzBuzz(n / 10000000000000000);\n                      \
    \            ^\n/tmp/tmp4h11b4qr.java:69: error: integer number too large\n  \
    \      if (n < 100000000000000000) {\n                ^\n/tmp/tmp4h11b4qr.java:70:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000000000);\n\
    \                                  ^\n/tmp/tmp4h11b4qr.java:72: error: integer\
    \ number too large\n        if (n < 1000000000000000000) {\n                ^\n\
    /tmp/tmp4h11b4qr.java:73: error: integer number too large\n            count +=\
    \ fizzBuzz(n / 100000000000000000);\n                                  ^\n19 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_ldlk2d.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi2x639ii.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count = fizzBuzzHelper(n, 11, 13);\n \
    \       } else if (n >= 1000 && n <= 9999) {\n            count = fizzBuzzHelper(n,\
    \ 11, 13);\n        } else if (n >= 10000 && n <= 99999) {\n            count\
    \ = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 100000 && n <= 999999)\
    \ {\n            count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000\
    \ && n <= 9999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n       \
    \ } else if (n >= 10000000 && n <= 99999999) {\n            count = fizzBuzzHelper(n,\
    \ 11, 13);\n        } else if (n >= 100000000 && n <= 999999999) {\n         \
    \   count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000000 &&\
    \ n <= 99999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n      \
    \  } else if (n >= 10000000000 && n <= 999999999999) {\n            count = fizzBuzzHelper(n,\
    \ 11, 13);\n        } else if (n >= 100000000000 && n <= 999999999999) {\n   \
    \         count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000000000\
    \ && n <= 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n  \
    \      } else if (n >= 10000000000000 && n <= 999999999999) {\n            count\
    \ = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 100000000000000 && n <=\
    \ 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n        } else\
    \ if (n >= 1000000000000000 && n <= 999999999999) {\n            count = fizzBuzzHelper(n,\
    \ 11, 13);\n        } else if (n >= 10000000000000000 && n <= 999999999999) {\n\
    \            count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n  \
    \      } else if (n >= 1000000000000000001 && n <= 999999999999) {\n         \
    \   count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000000000000002\
    \ && n <= 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n  \
    \      } else if (n >= 1000000000000000003 && n <= 999999999999) {\n         \
    \   count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000000000000004\
    \ && n <= 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n  \
    \      } else if (n >= 1000000000000000005 && n <= 999999999999) {\n         \
    \   count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 100000000000000000\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpln9kb2nd.java:32: error: integer number too large\n        } else\
    \ if (n >= 1000000000 && n <= 99999999999) {\n                               \
    \            ^\n/tmp/tmpln9kb2nd.java:34: error: integer number too large\n  \
    \      } else if (n >= 10000000000 && n <= 999999999999) {\n                 \
    \       ^\n/tmp/tmpln9kb2nd.java:34: error: integer number too large\n       \
    \ } else if (n >= 10000000000 && n <= 999999999999) {\n                      \
    \                      ^\n/tmp/tmpln9kb2nd.java:36: error: integer number too\
    \ large\n        } else if (n >= 100000000000 && n <= 999999999999) {\n      \
    \                  ^\n/tmp/tmpln9kb2nd.java:36: error: integer number too large\n\
    \        } else if (n >= 100000000000 && n <= 999999999999) {\n              \
    \                               ^\n/tmp/tmpln9kb2nd.java:38: error: integer number\
    \ too large\n        } else if (n >= 1000000000000 && n <= 999999999999) {\n \
    \                       ^\n/tmp/tmpln9kb2nd.java:38: error: integer number too\
    \ large\n        } else if (n >= 1000000000000 && n <= 999999999999) {\n     \
    \                                         ^\n/tmp/tmpln9kb2nd.java:40: error:\
    \ integer number too large\n        } else if (n >= 10000000000000 && n <= 999999999999)\
    \ {\n                        ^\n/tmp/tmpln9kb2nd.java:40: error: integer number\
    \ too large\n        } else if (n >= 10000000000000 && n <= 999999999999) {\n\
    \                                               ^\n/tmp/tmpln9kb2nd.java:42: error:\
    \ integer number too large\n        } else if (n >= 100000000000000 && n <= 999999999999)\
    \ {\n                        ^\n/tmp/tmpln9kb2nd.java:42: error: integer number\
    \ too large\n        } else if (n >= 100000000000000 && n <= 999999999999) {\n\
    \                                                ^\n/tmp/tmpln9kb2nd.java:44:\
    \ error: integer number too large\n        } else if (n >= 1000000000000000 &&\
    \ n <= 999999999999) {\n                        ^\n/tmp/tmpln9kb2nd.java:44: error:\
    \ integer number too large\n        } else if (n >= 1000000000000000 && n <= 999999999999)\
    \ {\n                                                 ^\n/tmp/tmpln9kb2nd.java:46:\
    \ error: integer number too large\n        } else if (n >= 10000000000000000 &&\
    \ n <= 999999999999) {\n                        ^\n/tmp/tmpln9kb2nd.java:46: error:\
    \ integer number too large\n        } else if (n >= 10000000000000000 && n <=\
    \ 999999999999) {\n                                                  ^\n/tmp/tmpln9kb2nd.java:48:\
    \ error: integer number too large\n        } else if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n                        ^\n/tmp/tmpln9kb2nd.java:48:\
    \ error: integer number too large\n        } else if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n                                                  \
    \ ^\n/tmp/tmpln9kb2nd.java:50: error: integer number too large\n        } else\
    \ if (n >= 1000000000000000001 && n <= 999999999999) {\n                     \
    \   ^\n/tmp/tmpln9kb2nd.java:50: error: integer number too large\n        } else\
    \ if (n >= 1000000000000000001 && n <= 999999999999) {\n                     \
    \                               ^\n/tmp/tmpln9kb2nd.java:52: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000002 && n <= 999999999999)\
    \ {\n                        ^\n/tmp/tmpln9kb2nd.java:52: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000002 && n <= 999999999999)\
    \ {\n                                                    ^\n/tmp/tmpln9kb2nd.java:54:\
    \ error: integer number too large\n        } else if (n >= 1000000000000000003\
    \ && n <= 999999999999) {\n                        ^\n/tmp/tmpln9kb2nd.java:54:\
    \ error: integer number too large\n        } else if (n >= 1000000000000000003\
    \ && n <= 999999999999) {\n                                                  \
    \  ^\n/tmp/tmpln9kb2nd.java:56: error: integer number too large\n        } else\
    \ if (n >= 1000000000000000004 && n <= 999999999999) {\n                     \
    \   ^\n/tmp/tmpln9kb2nd.java:56: error: integer number too large\n        } else\
    \ if (n >= 1000000000000000004 && n <= 999999999999) {\n                     \
    \                               ^\n/tmp/tmpln9kb2nd.java:58: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000005 && n <= 999999999999)\
    \ {\n                        ^\n/tmp/tmpln9kb2nd.java:58: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000005 && n <= 999999999999)\
    \ {\n                                                    ^\n/tmp/tmpln9kb2nd.java:60:\
    \ error: integer number too large\n        } else if (n >= 100000000000000000\n\
    \                        ^\n/tmp/tmpln9kb2nd.java:60: error: ')' expected\n  \
    \      } else if (n >= 100000000000000000\n                                  \
    \        ^\n/tmp/tmpln9kb2nd.java:61: error: illegal start of statement\n    }\n\
    \    ^\n30 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcues2m3k.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8honjia8.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long remainder2;\n        long remainder3;\n        long\
    \ remainder4;\n        long remainder5;\n        long remainder6;\n        long\
    \ remainder7;\n        long remainder8;\n        long remainder9;\n        long\
    \ remainder10;\n        long remainder11;\n        long remainder12;\n       \
    \ long remainder13;\n        long remainder14;\n        long remainder15;\n  \
    \      long remainder16;\n        long remainder17;\n        long remainder18;\n\
    \        long remainder19;\n        long remainder20;\n        long remainder21;\n\
    \        long remainder22;\n        long remainder23;\n        long remainder24;\n\
    \        long remainder25;\n        long remainder26;\n        long remainder27;\n\
    \        long remainder28;\n        long remainder29;\n        long remainder30;\n\
    \        long remainder31;\n        long remainder32;\n        long remainder33;\n\
    \        long remainder34;\n        long remainder35;\n        long remainder36;\n\
    \        long remainder37;\n        long remainder38;\n        long remainder39;\n\
    \        long remainder40;\n        long remainder41;\n        long remainder42;\n\
    \        long remainder43;\n        long remainder44;\n        long remainder45;\n\
    \        long remainder46;\n        long remainder47;\n        long remainder48;\n\
    \        long remainder49;\n        long remainder50;\n        long remainder51;\n\
    \        long remainder52;\n        long remainder53;\n        long remainder54;\n\
    \        long remainder55;\n        long remainder56;\n        long remainder57;\n\
    \        long remainder58;\n        long remainder59;\n        long remainder60;\n\
    \        long remainder61;\n        long remainder62;\n        long remainder63;\n\
    \        long remainder64;\n        long remainder65;\n        long remainder66;\n\
    \        long remainder67;\n        long remainder68;\n        long remainder69;\n\
    \        long remainder70;\n        long remainder71;\n        long remainder72;\n\
    \        long remainder73;\n        long remainder74;\n        long remainder75;\n\
    \        long remain\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpumx9i77d.java:93: error: ';' expected\n        long remain\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvgj7feqi.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder != 0) {\n            long digit = remainder\
    \ % 10;\n            if (digit == 7 || digit == 11 || digit == 13) {\n       \
    \         count++;\n            }\n            remainder = remainder / 10;\n \
    \       }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_iv4i_k.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n < 10) {\n            count++;\n        }\n        if (n % 11 == 0 || n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n < 100) {\n      \
    \      count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n      \
    \      count++;\n        }\n        if (n < 1000) {\n            count++;\n  \
    \      }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n  \
    \      }\n        if (n < 10000) {\n            count++;\n        }\n        if\
    \ (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if\
    \ (n < 100000) {\n            count++;\n        }\n        if (n % 11 == 0 ||\
    \ n % 13 == 0) {\n            count++;\n        }\n        if (n < 1000000) {\n\
    \            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n\
    \            count++;\n        }\n        if (n < 10000000) {\n            count++;\n\
    \        }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n\
    \        }\n        if (n < 100000000) {\n            count++;\n        }\n  \
    \      if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n  \
    \      if (n < 1000000000) {\n            count++;\n        }\n        if (n %\
    \ 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n <\
    \ 10000000000) {\n            count++;\n        }\n        if (n % 11 == 0 ||\
    \ n % 13 == 0) {\n            count++;\n        }\n        if (n < 100000000000)\
    \ {\n            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0)\
    \ {\n            count++;\n        }\n        if (n < 1000000000000) {\n     \
    \       count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n     \
    \       count++;\n        }\n        if (n < 10000000000000) {\n            count++;\n\
    \        }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n\
    \        }\n        if (n < 100000000000000) {\n            count++;\n       \
    \ }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n       \
    \ }\n        if (n < 1000000000000000) {\n            count++;\n        }\n  \
    \      if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n  \
    \      if (n < 10000000000000000) {\n            count++;\n        }\n       \
    \ if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n       \
    \ if (n < 100000000000000000) {\n            count++;\n        }\n        if (n\
    \ % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n\
    \ < 1000000000000000000) {\n            count++;\n        }\n        if (n % 11\
    \ == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n < 10000000000000000000)\
    \ {\n            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0)\
    \ {\n            count\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprb5szpdn.java:72: error: integer number too large\n        if (n\
    \ < 10000000000) {\n                ^\n/tmp/tmprb5szpdn.java:78: error: integer\
    \ number too large\n        if (n < 100000000000) {\n                ^\n/tmp/tmprb5szpdn.java:84:\
    \ error: integer number too large\n        if (n < 1000000000000) {\n        \
    \        ^\n/tmp/tmprb5szpdn.java:90: error: integer number too large\n      \
    \  if (n < 10000000000000) {\n                ^\n/tmp/tmprb5szpdn.java:96: error:\
    \ integer number too large\n        if (n < 100000000000000) {\n             \
    \   ^\n/tmp/tmprb5szpdn.java:102: error: integer number too large\n        if\
    \ (n < 1000000000000000) {\n                ^\n/tmp/tmprb5szpdn.java:108: error:\
    \ integer number too large\n        if (n < 10000000000000000) {\n           \
    \     ^\n/tmp/tmprb5szpdn.java:114: error: integer number too large\n        if\
    \ (n < 100000000000000000) {\n                ^\n/tmp/tmprb5szpdn.java:120: error:\
    \ integer number too large\n        if (n < 1000000000000000000) {\n         \
    \       ^\n/tmp/tmprb5szpdn.java:126: error: integer number too large\n      \
    \  if (n < 10000000000000000000) {\n                ^\n/tmp/tmprb5szpdn.java:130:\
    \ error: not a statement\n            count\n            ^\n/tmp/tmprb5szpdn.java:130:\
    \ error: ';' expected\n            count\n                 ^\n/tmp/tmprb5szpdn.java:132:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n13 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count = fizzBuzzHelper(n % 100, 11);\n\
    \            count += fizzBuzzHelper(n % 10, 13);\n        } else if (n >= 1000\
    \ && n <= 9999) {\n            count = fizzBuzzHelper(n % 1000, 11);\n       \
    \     count += fizzBuzzHelper(n % 100, 13);\n            count += fizzBuzzHelper(n\
    \ % 10, 13);\n        } else if (n >= 10000 && n <= 99999) {\n            count\
    \ = fizzBuzzHelper(n % 10000, 11);\n            count += fizzBuzzHelper(n % 1000,\
    \ 13);\n            count += fizzBuzzHelper(n % 100, 13);\n            count +=\
    \ fizzBuzzHelper(n % 10, 13);\n            count += fizzBuzzHelper(n % 1, 13);\n\
    \        } else if (n >= 100000 && n <= 999999) {\n            count = fizzBuzzHelper(n\
    \ % 100000, 11);\n            count += fizzBuzzHelper(n % 10000, 13);\n      \
    \      count += fizzBuzzHelper(n % 1000, 13);\n            count += fizzBuzzHelper(n\
    \ % 100, 13);\n            count += fizzBuzzHelper(n % 10, 13);\n            count\
    \ += fizzBuzzHelper(n % 1, 13);\n            count += fizzBuzzHelper(n % 10, 13);\n\
    \            count += fizzBuzzHelper(n % 1, 13);\n        } else if (n >= 1000000\
    \ && n <= 999999999) {\n            count = fizzBuzzHelper(n % 1000000, 11);\n\
    \            count += fizzBuzzHelper(n % 100000, 13);\n            count += fizzBuzzHelper(n\
    \ % 10000, 13);\n            count += fizzBuzzHelper(n % 1000, 13);\n        \
    \    count += fizzBuzzHelper(n % 100, 13);\n            count += fizzBuzzHelper(n\
    \ % 10, 13);\n            count += fizzBuzzHelper(n % 1, 13);\n            count\
    \ += fizzBuzzHelper(n % 10, 13);\n            count += fizzBuzzHelper(n % 1, 13);\n\
    \            count += fizzBuzzHelper(n % 10, 13);\n            count += fizzBuzzHelper(n\
    \ % 1, 13);\n            count += fizzBuzzHelper(n % 10, 13);\n            count\
    \ += fizzBuzzHelper(n % 1, 13);\n            count += fizzBuzzHelper(n % 10, 13);\n\
    \            count += fizzBuzzHelper(n % 1, 13);\n            count += fizzBuzzHelper(n\
    \ % 10, 13);\n            count += fizzBuzzHelper(n % 1, 13);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplfsubinl.java:60: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp95_c_zt_.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n\
    \        if (n >= 100 && n % 11 != 0 || n % 13 != 0) {\n            count++;\n\
    \        }\n        if (n >= 100 && n % 11 == 0 && n % 13 == 0) {\n          \
    \  count++;\n        }\n        if (n >= 100 && n % 11 != 0 && n % 13 != 0) {\n\
    \            count++;\n        }\n        if (n >= 100 && n % 11 == 0 && n % 13\
    \ != 0) {\n            count++;\n        }\n        if (n >= 100 && n % 11 !=\
    \ 0 && n % 13 == 0) {\n            count++;\n        }\n        if (n >= 100 &&\
    \ n % 11 != 0 && n % 13 != 0) {\n            count++;\n        }\n        if (n\
    \ >= 100 && n % 11 == 0 && n % 13 == 0) {\n            count++;\n        }\n \
    \       if (n >= 100 && n % 11 != 0 && n % 13 != 0) {\n            count++;\n\
    \        }\n        if (n >= 100 && n % 11 == 0 && n % 13 != 0) {\n          \
    \  count++;\n        }\n        if (n >= 100 && n % 11 != 0 && n % 13 == 0) {\n\
    \            count++;\n        }\n        if (n >= 100 && n % 11 != 0 && n % 13\
    \ != 0) {\n            count++;\n        }\n        if (n >= 100 && n % 11 ==\
    \ 0 && n % 13 == 0) {\n            count++;\n        }\n        if (n >= 100 &&\
    \ n % 11 != 0 && n % 13 != 0) {\n            count++;\n        }\n        if (n\
    \ >= 100 && n % 11 == 0 && n % 13 != 0) {\n            count++;\n        }\n \
    \       if (n >= 100 && n % 11 != 0 && n % 13 == 0) {\n            count++;\n\
    \        }\n        if (n >= 100 && n % 11 != 0 && n % 13 != 0) {\n          \
    \  count++;\n        }\n        if (n >= 100 && n % 11 == 0 && n % 13 == 0) {\n\
    \            count++;\n        }\n        if (n >= 100 && n % 11 != 0 && n % 13\
    \ != 0) {\n            count++;\n        }\n        if (n >= 100 && n % 11 ==\
    \ 0 && n % 13 != 0) {\n            count++;\n        }\n        if (n >= 100 &&\
    \ n % 11 != 0 && n % 13 == 0) {\n            count++;\n        }\n        if (n\
    \ >= 100 && n % 11 != 0 && n % 13 != 0) {\n            count++;\n        }\n \
    \       if (n >= 100 && n % 11 == 0 && n % 13 == 0) {\n            count++;\n\
    \        }\n        if (n >= 100 && n % 11 != 0 && n % 13 != 0) {\n          \
    \  count++;\n        }\n        if (n >= 100 && n % 11 == 0 && n % 13 != 0) {\n\
    \            count++;\n        }\n        if (n >= 100 && n % 11 != 0 && n % 13\
    \ == 0) {\n            count++;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vtupfew.java:96: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpquj5s060.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long dividend = n;\n        long divisor = 11;\n       \
    \ long divisor13 = 13;\n        do {\n            remainder = dividend % divisor;\n\
    \            if (remainder == divisor) {\n                count++;\n         \
    \   }\n            dividend = dividend / divisor;\n            divisor = divisor13;\n\
    \        } while (dividend > 0);\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoxpzp_58.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdf028858.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__4euj40.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9yxv8m_a.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        do {\n            long remainder1 = remainder % 11;\n\
    \            long remainder2 = remainder % 13;\n            if (remainder1 ==\
    \ 7 && remainder2 == 7) {\n                count++;\n            }\n         \
    \   remainder = remainder / 13;\n        } while (remainder != 0);\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxaclq8ij.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyvdxaz5.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n <= 0) {\n            return 0;\n        }\n        if (n % 11 == 0 || n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n / 11 > 0 && n / 13\
    \ > 0) {\n            count++;\n        }\n        if (n / 11 > 0 && n / 13 ==\
    \ 0) {\n            count++;\n        }\n        if (n / 11 == 0 && n / 13 > 0)\
    \ {\n            count++;\n        }\n        if (n / 11 == 0 && n / 13 == 0)\
    \ {\n            count++;\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3jgmrdj.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (div == 0 || mod == 0)\
    \ {\n            count++;\n        }\n        div = n / 13;\n        mod = n %\
    \ 13;\n        if (div == 0 || mod == 0) {\n            count++;\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphc1ifhu0.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7vqzjdba.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count += fizzBuzz(n / 100);\n        \
    \    count += fizzBuzz(n % 100);\n        } else if (n >= 1000 && n <= 9999) {\n\
    \            count += fizzBuzz(n / 1000);\n            count += fizzBuzz(n % 1000);\n\
    \        } else if (n >= 10000 && n <= 99999) {\n            count += fizzBuzz(n\
    \ / 10000);\n            count += fizzBuzz(n % 10000);\n        } else if (n >=\
    \ 100000 && n <= 999999) {\n            count += fizzBuzz(n / 100000);\n     \
    \       count += fizzBuzz(n % 100000);\n        } else if (n >= 1000000 && n <=\
    \ 999999999) {\n            count += fizzBuzz(n / 1000000);\n            count\
    \ += fizzBuzz(n % 1000000);\n        } else if (n >= 10000000 && n <= 99999999999)\
    \ {\n            count += fizzBuzz(n / 10000000);\n            count += fizzBuzz(n\
    \ % 10000000);\n        } else if (n >= 1000000000 && n <= 999999999999) {\n \
    \           count += fizzBuzz(n / 1000000000);\n            count += fizzBuzz(n\
    \ % 1000000000);\n        } else if (n >= 1000000000000 && n <= 999999999999999)\
    \ {\n            count += fizzBuzz(n / 1000000000000);\n            count += fizzBuzz(n\
    \ % 1000000000000);\n        } else if (n >= 1000000000000000 && n <= 999999999999999999)\
    \ {\n            count += fizzBuzz(n / 1000000000000000);\n            count +=\
    \ fizzBuzz(n % 1000000000000000);\n        } else if (n >= 1000000000000000000\
    \ && n <= 999999999999999999999) {\n            count += fizzBuzz(n / 1000000000000000000);\n\
    \            count += fizzBuzz(n % 1000000000000000000);\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsx0r86l7.java:33: error: integer number too large\n        } else\
    \ if (n >= 10000000 && n <= 99999999999) {\n                                 \
    \        ^\n/tmp/tmpsx0r86l7.java:36: error: integer number too large\n      \
    \  } else if (n >= 1000000000 && n <= 999999999999) {\n                      \
    \                     ^\n/tmp/tmpsx0r86l7.java:39: error: integer number too large\n\
    \        } else if (n >= 1000000000000 && n <= 999999999999999) {\n          \
    \              ^\n/tmp/tmpsx0r86l7.java:39: error: integer number too large\n\
    \        } else if (n >= 1000000000000 && n <= 999999999999999) {\n          \
    \                                    ^\n/tmp/tmpsx0r86l7.java:40: error: integer\
    \ number too large\n            count += fizzBuzz(n / 1000000000000);\n      \
    \                            ^\n/tmp/tmpsx0r86l7.java:41: error: integer number\
    \ too large\n            count += fizzBuzz(n % 1000000000000);\n             \
    \                     ^\n/tmp/tmpsx0r86l7.java:42: error: integer number too large\n\
    \        } else if (n >= 1000000000000000 && n <= 999999999999999999) {\n    \
    \                    ^\n/tmp/tmpsx0r86l7.java:42: error: integer number too large\n\
    \        } else if (n >= 1000000000000000 && n <= 999999999999999999) {\n    \
    \                                             ^\n/tmp/tmpsx0r86l7.java:43: error:\
    \ integer number too large\n            count += fizzBuzz(n / 1000000000000000);\n\
    \                                  ^\n/tmp/tmpsx0r86l7.java:44: error: integer\
    \ number too large\n            count += fizzBuzz(n % 1000000000000000);\n   \
    \                               ^\n/tmp/tmpsx0r86l7.java:45: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000000 && n <= 999999999999999999999)\
    \ {\n                        ^\n/tmp/tmpsx0r86l7.java:45: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000000 && n <= 999999999999999999999)\
    \ {\n                                                    ^\n/tmp/tmpsx0r86l7.java:46:\
    \ error: integer number too large\n            count += fizzBuzz(n / 1000000000000000000);\n\
    \                                  ^\n/tmp/tmpsx0r86l7.java:47: error: integer\
    \ number too large\n            count += fizzBuzz(n % 1000000000000000000);\n\
    \                                  ^\n14 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_h9h8jck.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0 && remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n            count++;\n            remainder = remainder / 10;\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp523czg0t.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder % 11 == 0 || remainder % 13 == 0) {\n\
    \            count++;\n            remainder = remainder / 11;\n        }\n  \
    \      return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p8l677c.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vc_8k4s.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count += 1;\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3lg6zou9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 0) count += 1;\n \
    \           if (i % 13 == 0) count += 1;\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn7v5e0_.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo6dro8bl.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpazunpoia.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ num = (long) Math.pow(10, n);\n        long num2 = (long) Math.pow(10, n - 1);\n\
    \        long num3 = (long) Math.pow(10, n - 2);\n        long num4 = (long) Math.pow(10,\
    \ n - 3);\n        long num5 = (long) Math.pow(10, n - 4);\n        long num6\
    \ = (long) Math.pow(10, n - 5);\n        long num7 = (long) Math.pow(10, n - 6);\n\
    \        long num8 = (long) Math.pow(10, n - 7);\n        long num9 = (long) Math.pow(10,\
    \ n - 8);\n        long num10 = (long) Math.pow(10, n - 9);\n        long num11\
    \ = (long) Math.pow(10, n - 10);\n        long num12 = (long) Math.pow(10, n -\
    \ 11);\n        long num13 = (long) Math.pow(10, n - 12);\n        long num14\
    \ = (long) Math.pow(10, n - 13);\n        long num15 = (long) Math.pow(10, n -\
    \ 14);\n        long num16 = (long) Math.pow(10, n - 15);\n        long num17\
    \ = (long) Math.pow(10, n - 16);\n        long num18 = (long) Math.pow(10, n -\
    \ 17);\n        long num19 = (long) Math.pow(10, n - 18);\n        long num20\
    \ = (long) Math.pow(10, n - 19);\n        long num21 = (long) Math.pow(10, n -\
    \ 20);\n        long num22 = (long) Math.pow(10, n - 21);\n        long num23\
    \ = (long) Math.pow(10, n - 22);\n        long num24 = (long) Math.pow(10, n -\
    \ 23);\n        long num25 = (long) Math.pow(10, n - 24);\n        long num26\
    \ = (long) Math.pow(10, n - 25);\n        long num27 = (long) Math.pow(10, n -\
    \ 26);\n        long num28 = (long) Math.pow(10, n - 27);\n        long num29\
    \ = (long) Math.pow(10, n - 28);\n        long num30 = (long) Math.pow(10, n -\
    \ 29);\n        long num31 = (long) Math.pow(10, n - 30);\n        long num32\
    \ = (long) Math.pow(10, n - 31);\n        long num33 = (long) Math.pow(10, n -\
    \ 32);\n        long num34 = (long) Math.pow(10, n - 33);\n        long num35\
    \ = (long) Math.pow(10, n - 34);\n        long num36 = (long) Math.pow(10, n -\
    \ 35);\n        long num37 = (long) Math.pow(10, n - 36);\n        long num38\
    \ = (long) Math.pow(10, n - 37);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp907p9hye.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 11;\n            if (remainder\
    \ == 0 || remainder == 7) {\n                count++;\n            }\n       \
    \     n = n / 11;\n        } while (n > 0);\n        return count;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm5pogh4.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq9edx497.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21fuyss6.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count += fizzBuzz(n / 100);\n        \
    \    count += fizzBuzz(n % 100);\n        } else if (n >= 1000 && n <= 9999) {\n\
    \            count += fizzBuzz(n / 1000);\n            count += fizzBuzz(n % 1000);\n\
    \        } else if (n >= 10000 && n <= 99999) {\n            count += fizzBuzz(n\
    \ / 10000);\n            count += fizzBuzz(n % 10000);\n        } else if (n >=\
    \ 100000 && n <= 999999) {\n            count += fizzBuzz(n / 100000);\n     \
    \       count += fizzBuzz(n % 100000);\n        } else if (n >= 1000000 && n <=\
    \ 999999999) {\n            count += fizzBuzz(n / 1000000);\n            count\
    \ += fizzBuzz(n % 1000000);\n        } else if (n >= 10000000 && n <= 99999999999)\
    \ {\n            count += fizzBuzz(n / 10000000);\n            count += fizzBuzz(n\
    \ % 10000000);\n        } else if (n >= 1000000000 && n <= 999999999999) {\n \
    \           count += fizzBuzz(n / 1000000000);\n            count += fizzBuzz(n\
    \ % 1000000000);\n        } else if (n >= 1000000000000 && n <= 999999999999999)\
    \ {\n            count += fizzBuzz(n / 1000000000000);\n            count += fizzBuzz(n\
    \ % 1000000000000);\n        } else if (n >= 100000000000000 && n <= 999999999999999999)\
    \ {\n            count += fizzBuzz(n / 100000000000000);\n            count +=\
    \ fizzBuzz(n % 100000000000000);\n        } else if (n >= 100000000000000000 &&\
    \ n <= 999999999999999999999) {\n            count += fizzBuzz(n / 100000000000000000);\n\
    \            count += fizzBuzz(n % 100000000000000000);\n        } else if (n\
    \ >= 1000000000000000000 && n <= 999999999999999999999) {\n            count +=\
    \ fizzBuzz(n / 1000000000000000000);\n            count += fizzBuzz(n % 1000000000000000000);\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfjj9u216.java:33: error: integer number too large\n        } else\
    \ if (n >= 10000000 && n <= 99999999999) {\n                                 \
    \        ^\n/tmp/tmpfjj9u216.java:36: error: integer number too large\n      \
    \  } else if (n >= 1000000000 && n <= 999999999999) {\n                      \
    \                     ^\n/tmp/tmpfjj9u216.java:39: error: integer number too large\n\
    \        } else if (n >= 1000000000000 && n <= 999999999999999) {\n          \
    \              ^\n/tmp/tmpfjj9u216.java:39: error: integer number too large\n\
    \        } else if (n >= 1000000000000 && n <= 999999999999999) {\n          \
    \                                    ^\n/tmp/tmpfjj9u216.java:40: error: integer\
    \ number too large\n            count += fizzBuzz(n / 1000000000000);\n      \
    \                            ^\n/tmp/tmpfjj9u216.java:41: error: integer number\
    \ too large\n            count += fizzBuzz(n % 1000000000000);\n             \
    \                     ^\n/tmp/tmpfjj9u216.java:42: error: integer number too large\n\
    \        } else if (n >= 100000000000000 && n <= 999999999999999999) {\n     \
    \                   ^\n/tmp/tmpfjj9u216.java:42: error: integer number too large\n\
    \        } else if (n >= 100000000000000 && n <= 999999999999999999) {\n     \
    \                                           ^\n/tmp/tmpfjj9u216.java:43: error:\
    \ integer number too large\n            count += fizzBuzz(n / 100000000000000);\n\
    \                                  ^\n/tmp/tmpfjj9u216.java:44: error: integer\
    \ number too large\n            count += fizzBuzz(n % 100000000000000);\n    \
    \                              ^\n/tmp/tmpfjj9u216.java:45: error: integer number\
    \ too large\n        } else if (n >= 100000000000000000 && n <= 999999999999999999999)\
    \ {\n                        ^\n/tmp/tmpfjj9u216.java:45: error: integer number\
    \ too large\n        } else if (n >= 100000000000000000 && n <= 999999999999999999999)\
    \ {\n                                                   ^\n/tmp/tmpfjj9u216.java:46:\
    \ error: integer number too large\n            count += fizzBuzz(n / 100000000000000000);\n\
    \                                  ^\n/tmp/tmpfjj9u216.java:47: error: integer\
    \ number too large\n            count += fizzBuzz(n % 100000000000000000);\n \
    \                                 ^\n/tmp/tmpfjj9u216.java:48: error: integer\
    \ number too large\n        } else if (n >= 1000000000000000000 && n <= 999999999999999999999)\
    \ {\n                        ^\n/tmp/tmpfjj9u216.java:48: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000000 && n <= 999999999999999999999)\
    \ {\n                                                    ^\n/tmp/tmpfjj9u216.java:49:\
    \ error: integer number too large\n            count += fizzBuzz(n / 1000000000000000000);\n\
    \                                  ^\n/tmp/tmpfjj9u216.java:50: error: integer\
    \ number too large\n            count += fizzBuzz(n % 1000000000000000000);\n\
    \                                  ^\n18 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdrbew83j.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (div == 0 || mod == 0)\
    \ {\n            count++;\n        }\n        if (div == 0 || mod == 1) {\n  \
    \          count++;\n        }\n        if (div == 0 || mod == 2) {\n        \
    \    count++;\n        }\n        if (div == 0 || mod == 3) {\n            count++;\n\
    \        }\n        if (div == 0 || mod == 4) {\n            count++;\n      \
    \  }\n        if (div == 0 || mod == 5) {\n            count++;\n        }\n \
    \       if (div == 0 || mod == 6) {\n            count++;\n        }\n       \
    \ if (div == 0 || mod == 7) {\n            count++;\n        }\n        if (div\
    \ == 0 || mod == 8) {\n            count++;\n        }\n        if (div == 0 ||\
    \ mod == 9) {\n            count++;\n        }\n        if (div == 0 || mod ==\
    \ 10) {\n            count++;\n        }\n        if (div == 0 || mod == 11) {\n\
    \            count++;\n        }\n        if (div == 0 || mod == 12) {\n     \
    \       count++;\n        }\n        if (div == 0 || mod == 13) {\n          \
    \  count++;\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1qlshm8.java:66)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (mod != 0 || div != 0)\
    \ {\n            count++;\n        }\n        div = n / 13;\n        mod = n %\
    \ 13;\n        if (mod != 0 || div != 0) {\n            count++;\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmpg70dmk.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplswdksxp.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy16vfg_6.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixtftpkm.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder % 11 == 0 || remainder % 13 == 0) {\n\
    \            count++;\n            remainder = remainder / 10;\n        }\n  \
    \      return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprrvwr22v.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0 && remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n            count++;\n            remainder = remainder / 10;\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgiyx6n0c.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = \n    }\n    public static void main(String[] args) {\n \
    \   assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n \
    \   assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuwz6voj2.java:109: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmperxn5bj6.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcc1ftk10.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long remainder2;\n        long remainder3;\n        long\
    \ remainder4;\n        long remainder5;\n        long remainder6;\n        long\
    \ remainder7;\n        long remainder8;\n        long remainder9;\n        long\
    \ remainder10;\n        long remainder11;\n        long remainder12;\n       \
    \ long remainder13;\n        long remainder14;\n        long remainder15;\n  \
    \      long remainder16;\n        long remainder17;\n        long remainder18;\n\
    \        long remainder19;\n        long remainder20;\n        long remainder21;\n\
    \        long remainder22;\n        long remainder23;\n        long remainder24;\n\
    \        long remainder25;\n        long remainder26;\n        long remainder27;\n\
    \        long remainder28;\n        long remainder29;\n        long remainder30;\n\
    \        long remainder31;\n        long remainder32;\n        long remainder33;\n\
    \        long remainder34;\n        long remainder35;\n        long remainder36;\n\
    \        long remainder37;\n        long remainder38;\n        long remainder39;\n\
    \        long remainder40;\n        long remainder41;\n        long remainder42;\n\
    \        long remainder43;\n        long remainder44;\n        long remainder45;\n\
    \        long remainder46;\n        long remainder47;\n        long remainder48;\n\
    \        long remainder49;\n        long remainder50;\n        long remainder51;\n\
    \        long remainder52;\n        long remainder53;\n        long remainder54;\n\
    \        long remainder55;\n        long remainder56;\n        long remainder57;\n\
    \        long remainder58;\n        long remainder59;\n        long remainder60;\n\
    \        long remainder61;\n        long remainder62;\n        long remainder63;\n\
    \        long remainder64;\n        long remainder65;\n        long remainder66;\n\
    \        long remainder67;\n        long remainder68;\n        long remainder69;\n\
    \        long remainder70;\n        long remainder71;\n        long remainder72;\n\
    \        long remainder73;\n        long remainder74;\n        long remainder75;\n\
    \        long remain\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp85mywx11.java:93: error: ';' expected\n        long remain\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9pa_adz.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoljiu7y2.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ divisor = 11L;\n        if (n % divisor == 0) {\n            count += 1;\n \
    \           divisor = 13L;\n        }\n        if (n % divisor == 0) {\n     \
    \       count += 1;\n            divisor = 11L;\n        }\n        if (n % divisor\
    \ == 0) {\n            count += 1;\n            divisor = 13L;\n        }\n  \
    \      if (n % divisor == 0) {\n            count += 1;\n            divisor =\
    \ 11L;\n        }\n        if (n % divisor == 0) {\n            count += 1;\n\
    \            divisor = 13L;\n        }\n        if (n % divisor == 0) {\n    \
    \        count += 1;\n            divisor = 11L;\n        }\n        if (n % divisor\
    \ == 0) {\n            count += 1;\n            divisor = 13L;\n        }\n  \
    \      if (n % divisor == 0) {\n            count += 1;\n            divisor =\
    \ 11L;\n        }\n        if (n % divisor == 0) {\n            count += 1;\n\
    \            divisor = 13L;\n        }\n        if (n % divisor == 0) {\n    \
    \        count += 1;\n            divisor = 11L;\n        }\n        if (n % divisor\
    \ == 0) {\n            count += 1;\n            divisor = 13L;\n        }\n  \
    \      if (n % divisor == 0) {\n            count += 1;\n            divisor =\
    \ 11L;\n        }\n        if (n % divisor == 0) {\n            count += 1;\n\
    \            divisor = 13L;\n        }\n        if (n % divisor == 0) {\n    \
    \        count += 1;\n            divisor = 11L;\n        }\n        if (n % divisor\
    \ == 0) {\n            count += 1;\n            divisor = 13L;\n        }\n  \
    \      if (n % divisor == 0) {\n            count += 1;\n            divisor =\
    \ 11L;\n        }\n        if (n % divisor == 0) {\n            count += 1;\n\
    \            divisor = 13L;\n        }\n        if (n % divisor == 0) {\n    \
    \        count += 1;\n            divisor = 11L;\n        }\n        if (n % divisor\
    \ == 0) {\n            count += 1;\n            divisor = 13L;\n        }\n  \
    \      if (n % divisor == 0) {\n            count += 1;\n            divisor =\
    \ 11L;\n        }\n        if (n % divisor == 0) {\n            count += 1;\n\
    \            divisor = 13L;\n        }\n        if (n % divisor == 0) {\n    \
    \        count += 1;\n            divisor = 11L;\n        }\n        if (n % divisor\
    \ == 0) {\n            count += 1;\n            divisor = 13L;\n        }\n  \
    \      if (n % divisor == 0) {\n            count += 1;\n            divisor =\
    \ 11L\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprt16i19h.java:113: error: ';' expected\n            divisor = 11L\n\
    \                         ^\n/tmp/tmprt16i19h.java:115: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (div == 0 || mod == 0)\
    \ {\n            count++;\n        }\n        div = n / 13;\n        mod = n %\
    \ 13;\n        if (div == 0 || mod == 0) {\n            count++;\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp81cthgtq.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (mod != 0) {\n       \
    \     count += 1;\n        }\n        div = n / 13;\n        mod = n % 13;\n \
    \       if (mod != 0) {\n            count += 1;\n        }\n        if (div !=\
    \ 0) {\n            count += 1;\n        }\n        return count;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw543jv7e.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9_s4hq1.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj150ecov.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ljnknoq.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfog66sie.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8d16ehp.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwkxzmgx7.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppf42wmt9.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 0) count += 1;\n \
    \           if (i % 13 == 0) count += 1;\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw2z1uwn4.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 11;\n            if (remainder\
    \ == 7) {\n                count++;\n            }\n            n /= 11;\n   \
    \     } while (remainder != 7);\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        remainder = n % 7;\n        if (remainder == 0) {\n          \
    \  count = count + 1;\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ittah7d.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8aipfmgf.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 11 || n >= 13) {\n            count++;\n        }\n        if (n % 11\
    \ == 0) {\n            count++;\n        }\n        if (n % 13 == 0) {\n     \
    \       count++;\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuz_3jdb0.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 11 || n >= 13) {\n            count = fizzBuzzHelper(n, 11, 13);\n   \
    \     }\n        if (n >= 100) {\n            count = fizzBuzzHelper(n, 100, 11);\n\
    \        }\n        if (n >= 1000) {\n            count = fizzBuzzHelper(n, 1000,\
    \ 13);\n        }\n        if (n >= 10000) {\n            count = fizzBuzzHelper(n,\
    \ 10000, 11);\n        }\n        if (n >= 100000) {\n            count = fizzBuzzHelper(n,\
    \ 100000, 13);\n        }\n        if (n >= 1000000) {\n            count = fizzBuzzHelper(n,\
    \ 1000000, 11);\n        }\n        if (n >= 10000000) {\n            count =\
    \ fizzBuzzHelper(n, 10000000, 13);\n        }\n        if (n >= 100000000) {\n\
    \            count = fizzBuzzHelper(n, 100000000, 11);\n        }\n        if\
    \ (n >= 1000000000) {\n            count = fizzBuzzHelper(n, 1000000000, 13);\n\
    \        }\n        if (n >= 10000000000) {\n            count = fizzBuzzHelper(n,\
    \ 10000000000, 11);\n        }\n        if (n >= 100000000000) {\n           \
    \ count = fizzBuzzHelper(n, 100000000000, 13);\n        }\n        if (n >= 1000000000000)\
    \ {\n            count = fizzBuzzHelper(n, 1000000000000, 11);\n        }\n  \
    \      if (n >= 10000000000000) {\n            count = fizzBuzzHelper(n, 10000000000000,\
    \ 13);\n        }\n        if (n >= 100000000000000) {\n            count = fizzBuzzHelper(n,\
    \ 100000000000000, 11);\n        }\n        if (n >= 1000000000000000) {\n   \
    \         count = fizzBuzzHelper(n, 1000000000000000, 13);\n        }\n      \
    \  if (n >= 10000000000000000) {\n            count = fizzBuzzHelper(n, 10000000000000000,\
    \ 11);\n        }\n        if (n >= 100000000000000000) {\n            count =\
    \ fizzBuzzHelper(n, 100000000000000000, 13);\n        }\n        if (n >= 1000000000000000000)\
    \ {\n            count = fizzBuzzHelper(n, 1000000000000000000, 11);\n       \
    \ }\n        if (n >= 10000000000000000000) {\n            count = fizzBuzzHelper(n,\
    \ 10000000000000000000, 13);\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2x7hiokz.java:45: error: integer number too large\n        if (n\
    \ >= 10000000000) {\n                 ^\n/tmp/tmp2x7hiokz.java:46: error: integer\
    \ number too large\n            count = fizzBuzzHelper(n, 10000000000, 11);\n\
    \                                      ^\n/tmp/tmp2x7hiokz.java:48: error: integer\
    \ number too large\n        if (n >= 100000000000) {\n                 ^\n/tmp/tmp2x7hiokz.java:49:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 100000000000,\
    \ 13);\n                                      ^\n/tmp/tmp2x7hiokz.java:51: error:\
    \ integer number too large\n        if (n >= 1000000000000) {\n              \
    \   ^\n/tmp/tmp2x7hiokz.java:52: error: integer number too large\n           \
    \ count = fizzBuzzHelper(n, 1000000000000, 11);\n                            \
    \          ^\n/tmp/tmp2x7hiokz.java:54: error: integer number too large\n    \
    \    if (n >= 10000000000000) {\n                 ^\n/tmp/tmp2x7hiokz.java:55:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 10000000000000,\
    \ 13);\n                                      ^\n/tmp/tmp2x7hiokz.java:57: error:\
    \ integer number too large\n        if (n >= 100000000000000) {\n            \
    \     ^\n/tmp/tmp2x7hiokz.java:58: error: integer number too large\n         \
    \   count = fizzBuzzHelper(n, 100000000000000, 11);\n                        \
    \              ^\n/tmp/tmp2x7hiokz.java:60: error: integer number too large\n\
    \        if (n >= 1000000000000000) {\n                 ^\n/tmp/tmp2x7hiokz.java:61:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 1000000000000000,\
    \ 13);\n                                      ^\n/tmp/tmp2x7hiokz.java:63: error:\
    \ integer number too large\n        if (n >= 10000000000000000) {\n          \
    \       ^\n/tmp/tmp2x7hiokz.java:64: error: integer number too large\n       \
    \     count = fizzBuzzHelper(n, 10000000000000000, 11);\n                    \
    \                  ^\n/tmp/tmp2x7hiokz.java:66: error: integer number too large\n\
    \        if (n >= 100000000000000000) {\n                 ^\n/tmp/tmp2x7hiokz.java:67:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 100000000000000000,\
    \ 13);\n                                      ^\n/tmp/tmp2x7hiokz.java:69: error:\
    \ integer number too large\n        if (n >= 1000000000000000000) {\n        \
    \         ^\n/tmp/tmp2x7hiokz.java:70: error: integer number too large\n     \
    \       count = fizzBuzzHelper(n, 1000000000000000000, 11);\n                \
    \                      ^\n/tmp/tmp2x7hiokz.java:72: error: integer number too\
    \ large\n        if (n >= 10000000000000000000) {\n                 ^\n/tmp/tmp2x7hiokz.java:73:\
    \ error: integer number too large\n            count = fizzBuzzHelper(n, 10000000000000000000,\
    \ 13);\n                                      ^\n20 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long dividend = n;\n        long divisor = 11L;\n      \
    \  long remainder2;\n        do {\n            divisor = divisor * 11L;\n    \
    \        dividend = dividend / divisor;\n            remainder = dividend % divisor;\n\
    \            remainder2 = remainder % 11L;\n            if (remainder2 == 7L)\
    \ {\n                count++;\n            }\n        } while (remainder != 0);\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfsosleq9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 7)\n             \
    \   count++;\n        }\n        for (long i = n; i > 0; i /= 13) {\n        \
    \    if (i % 13 == 7)\n                count++;\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc5u1y6pf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = \n    }\n    public static void main(String[] args) {\n \
    \   assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n \
    \   assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpndsxee5l.java:109: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 0) count += 1;\n \
    \           if (i % 13 == 0) count += 1;\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1aarl0wg.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8upjpld.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long quotient;\n        long remainder2;\n        long quotient2;\n\
    \        long remainder3;\n        long quotient3;\n        long remainder4;\n\
    \        long quotient4;\n        long remainder5;\n        long quotient5;\n\
    \        long remainder6;\n        long quotient6;\n        long remainder7;\n\
    \        long quotient7;\n        long remainder8;\n        long quotient8;\n\
    \        long remainder9;\n        long quotient9;\n        long remainder10;\n\
    \        long quotient10;\n        long remainder11;\n        long quotient11;\n\
    \        long remainder12;\n        long quotient12;\n        long remainder13;\n\
    \        long quotient13;\n        long remainder14;\n        long quotient14;\n\
    \        long remainder15;\n        long quotient15;\n        long remainder16;\n\
    \        long quotient16;\n        long remainder17;\n        long quotient17;\n\
    \        long remainder18;\n        long quotient18;\n        long remainder19;\n\
    \        long quotient19;\n        long remainder20;\n        long quotient20;\n\
    \        long remainder21;\n        long quotient21;\n        long remainder22;\n\
    \        long quotient22;\n        long remainder23;\n        long quotient23;\n\
    \        long remainder24;\n        long quotient24;\n        long remainder25;\n\
    \        long quotient25;\n        long remainder26;\n        long quotient26;\n\
    \        long remainder27;\n        long quotient27;\n        long remainder28;\n\
    \        long quotient28;\n        long remainder29;\n        long quotient29;\n\
    \        long remainder30;\n        long quotient30;\n        long remainder31;\n\
    \        long quotient31;\n        long remainder32;\n        long quotient32;\n\
    \        long remainder33;\n        long quotient33;\n        long remainder34;\n\
    \        long quotient34;\n        long remainder35;\n        long quotient35;\n\
    \        long remainder36;\n        long quotient36;\n        long remainder37;\n\
    \        long quotient37;\n        long remainder38;\n        long quotient38;\n\
    \        long remainder39;\n        long quotient39;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8mc7r4ly.java:97: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvcx2dc46.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7tox5pvj.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n\
    \            count++;\n        }\n        n /= 11;\n        remainder = n % 11;\n\
    \        if (remainder == 0 || remainder == 13) {\n            count++;\n    \
    \    }\n        n /= 11;\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 13) {\n            count++;\n        }\n        n /= 11;\n\
    \        remainder = \n    }\n    public static void main(String[] args) {\n \
    \   assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n \
    \   assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiiglqry4.java:109: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder != 0) {\n            long digit = remainder\
    \ % 10;\n            if (digit == 7 || digit == 11 || digit == 13) {\n       \
    \         count++;\n            }\n            remainder = remainder / 10;\n \
    \       }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvkbolzzr.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder % 11 == 0 || remainder % 13 == 0) {\n\
    \            count++;\n            remainder = remainder / 11;\n        }\n  \
    \      return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_1ynf9b0.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuj7hszon.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpie1e_5we.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long dividend = n;\n        long divisor = 11;\n       \
    \ long divisor13 = 13;\n        do {\n            remainder = dividend % divisor;\n\
    \            if (remainder == divisor) {\n                count++;\n         \
    \   }\n            dividend /= divisor;\n            divisor *= 11;\n        \
    \    divisor13 *= 13;\n        } while (dividend != 0);\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6ml39au.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 11;\n            if (remainder\
    \ == 7 || remainder == 13) {\n                count++;\n            }\n      \
    \      n = n / 11;\n        } while (n != 0);\n        return count;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpin8j_1qx.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq4izmy9.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0) {\n            long digit = remainder\
    \ % 10;\n            if (digit == 7 || digit == 11 || digit == 13) {\n       \
    \         count++;\n            }\n            remainder = remainder / 10;\n \
    \       }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplebn9eaa.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 0) count += 1;\n \
    \           if (i % 13 == 0) count += 1;\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9enx_6mb.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 11;\n            if (remainder\
    \ == 7) {\n                count++;\n            }\n            n = n / 11;\n\
    \        } while (remainder != 7);\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8pbjnysx.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctopk711.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ num = (long) Math.pow(10, n);\n        long num2 = (long) Math.pow(10, n - 1);\n\
    \        long num3 = (long) Math.pow(10, n - 2);\n        long num4 = (long) Math.pow(10,\
    \ n - 3);\n        long num5 = (long) Math.pow(10, n - 4);\n        long num6\
    \ = (long) Math.pow(10, n - 5);\n        long num7 = (long) Math.pow(10, n - 6);\n\
    \        long num8 = (long) Math.pow(10, n - 7);\n        long num9 = (long) Math.pow(10,\
    \ n - 8);\n        long num10 = (long) Math.pow(10, n - 9);\n        long num11\
    \ = (long) Math.pow(10, n - 10);\n        long num12 = (long) Math.pow(10, n -\
    \ 11);\n        long num13 = (long) Math.pow(10, n - 12);\n        long num14\
    \ = (long) Math.pow(10, n - 13);\n        long num15 = (long) Math.pow(10, n -\
    \ 14);\n        long num16 = (long) Math.pow(10, n - 15);\n        long num17\
    \ = (long) Math.pow(10, n - 16);\n        long num18 = (long) Math.pow(10, n -\
    \ 17);\n        long num19 = (long) Math.pow(10, n - 18);\n        long num20\
    \ = (long) Math.pow(10, n - 19);\n        long num21 = (long) Math.pow(10, n -\
    \ 20);\n        long num22 = (long) Math.pow(10, n - 21);\n        long num23\
    \ = (long) Math.pow(10, n - 22);\n        long num24 = (long) Math.pow(10, n -\
    \ 23);\n        long num25 = (long) Math.pow(10, n - 24);\n        long num26\
    \ = (long) Math.pow(10, n - 25);\n        long num27 = (long) Math.pow(10, n -\
    \ 26);\n        long num28 = (long) Math.pow(10, n - 27);\n        long num29\
    \ = (long) Math.pow(10, n - 28);\n        long num30 = (long) Math.pow(10, n -\
    \ 29);\n        long num31 = (long) Math.pow(10, n - 30);\n        long num32\
    \ = (long) Math.pow(10, n - 31);\n        long num33 = (long) Math.pow(10, n -\
    \ 32);\n        long num34 = (long) Math.pow(10, n - 33);\n        long num35\
    \ = (long) Math.pow(10, n - 34);\n        long num36 = (long) Math.pow(10, n -\
    \ 35);\n        long num37 = (long) Math.pow(10, n - 36);\n        long num38\
    \ = (long) Math.pow(10, n - 37);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vkuesbt.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0 && remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n            count++;\n            remainder = remainder / 10;\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuct1xszl.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaoo2p2bj.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3nqczt9b.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n < 10) {\n            count++;\n        }\n        if (n % 11 == 0 || n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n < 100) {\n      \
    \      count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n      \
    \      count++;\n        }\n        if (n < 1000) {\n            count++;\n  \
    \      }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n  \
    \      }\n        if (n < 10000) {\n            count++;\n        }\n        if\
    \ (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if\
    \ (n < 100000) {\n            count++;\n        }\n        if (n % 11 == 0 ||\
    \ n % 13 == 0) {\n            count++;\n        }\n        if (n < 1000000) {\n\
    \            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n\
    \            count++;\n        }\n        if (n < 10000000) {\n            count++;\n\
    \        }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n\
    \        }\n        if (n < 100000000) {\n            count++;\n        }\n  \
    \      if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n  \
    \      if (n < 1000000000) {\n            count++;\n        }\n        if (n %\
    \ 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n <\
    \ 10000000000) {\n            count++;\n        }\n        if (n % 11 == 0 ||\
    \ n % 13 == 0) {\n            count++;\n        }\n        if (n < 100000000000)\
    \ {\n            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0)\
    \ {\n            count++;\n        }\n        if (n < 1000000000000) {\n     \
    \       count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n     \
    \       count++;\n        }\n        if (n < 10000000000000) {\n            count++;\n\
    \        }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n\
    \        }\n        if (n < 100000000000000) {\n            count++;\n       \
    \ }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n       \
    \ }\n        if (n < 1000000000000000) {\n            count++;\n        }\n  \
    \      if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n  \
    \      if (n < 10000000000000000) {\n            count++;\n        }\n       \
    \ if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n       \
    \ if (n < 100000000000000000) {\n            count++;\n        }\n        if (n\
    \ % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n\
    \ < 1000000000000000000) {\n            count++;\n        }\n        if (n % 11\
    \ == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n < 10000000000000000000)\
    \ {\n            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0)\
    \ {\n            count\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6yiy9rv1.java:72: error: integer number too large\n        if (n\
    \ < 10000000000) {\n                ^\n/tmp/tmp6yiy9rv1.java:78: error: integer\
    \ number too large\n        if (n < 100000000000) {\n                ^\n/tmp/tmp6yiy9rv1.java:84:\
    \ error: integer number too large\n        if (n < 1000000000000) {\n        \
    \        ^\n/tmp/tmp6yiy9rv1.java:90: error: integer number too large\n      \
    \  if (n < 10000000000000) {\n                ^\n/tmp/tmp6yiy9rv1.java:96: error:\
    \ integer number too large\n        if (n < 100000000000000) {\n             \
    \   ^\n/tmp/tmp6yiy9rv1.java:102: error: integer number too large\n        if\
    \ (n < 1000000000000000) {\n                ^\n/tmp/tmp6yiy9rv1.java:108: error:\
    \ integer number too large\n        if (n < 10000000000000000) {\n           \
    \     ^\n/tmp/tmp6yiy9rv1.java:114: error: integer number too large\n        if\
    \ (n < 100000000000000000) {\n                ^\n/tmp/tmp6yiy9rv1.java:120: error:\
    \ integer number too large\n        if (n < 1000000000000000000) {\n         \
    \       ^\n/tmp/tmp6yiy9rv1.java:126: error: integer number too large\n      \
    \  if (n < 10000000000000000000) {\n                ^\n/tmp/tmp6yiy9rv1.java:130:\
    \ error: not a statement\n            count\n            ^\n/tmp/tmp6yiy9rv1.java:130:\
    \ error: ';' expected\n            count\n                 ^\n/tmp/tmp6yiy9rv1.java:132:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n13 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ num = (long) Math.pow(10, n);\n        long num2 = (long) Math.pow(10, n-2);\n\
    \        long num3 = (long) Math.pow(10, n-3);\n        long num4 = (long) Math.pow(10,\
    \ n-4);\n        long num5 = (long) Math.pow(10, n-5);\n        long num6 = (long)\
    \ Math.pow(10, n-6);\n        long num7 = (long) Math.pow(10, n-7);\n        long\
    \ num8 = (long) Math.pow(10, n-8);\n        long num9 = (long) Math.pow(10, n-9);\n\
    \        long num10 = (long) Math.pow(10, n-10);\n        long num11 = (long)\
    \ Math.pow(10, n-11);\n        long num12 = (long) Math.pow(10, n-12);\n     \
    \   long num13 = (long) Math.pow(10, n-13);\n        long num14 = (long) Math.pow(10,\
    \ n-14);\n        long num15 = (long) Math.pow(10, n-15);\n        long num16\
    \ = (long) Math.pow(10, n-16);\n        long num17 = (long) Math.pow(10, n-17);\n\
    \        long num18 = (long) Math.pow(10, n-18);\n        long num19 = (long)\
    \ Math.pow(10, n-19);\n        long num20 = (long) Math.pow(10, n-20);\n     \
    \   long num21 = (long) Math.pow(10, n-21);\n        long num22 = (long) Math.pow(10,\
    \ n-22);\n        long num23 = (long) Math.pow(10, n-23);\n        long num24\
    \ = (long) Math.pow(10, n-24);\n        long num25 = (long) Math.pow(10, n-25);\n\
    \        long num26 = (long) Math.pow(10, n-26);\n        long num27 = (long)\
    \ Math.pow(10, n-27);\n        long num28 = (long) Math.pow(10, n-28);\n     \
    \   long num29 = (long) Math.pow(10, n-29);\n        long num30 = (long) Math.pow(10,\
    \ n-30);\n        long num31 = (long) Math.pow(10, n-31);\n        long num32\
    \ = (long) Math.pow(10, n-32);\n        long num33 = (long) Math.pow(10, n-33);\n\
    \        long num34 = (long) Math.pow(10, n-34);\n        long num35 = (long)\
    \ Math.pow(10, n-35);\n        long num36 = (long) Math.pow(10, n-36);\n     \
    \   long num37 = (long) Math.pow(10, n-37);\n        long num38 = (long) Math.pow(\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwn9ze_t9.java:56: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 100) {\n            count++;\n  \
    \          remainder = remainder / 10;\n        }\n        if (remainder == 100)\
    \ {\n            count++;\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkwj8daey.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp55cz1cz1.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = n; i > 0; i /= 11) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxupf76h8.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (mod != 0) {\n       \
    \     count += 1;\n        }\n        div = n / 13;\n        mod = n % 13;\n \
    \       if (mod != 0) {\n            count += 1;\n        }\n        if (div !=\
    \ 0) {\n            count += 1;\n        }\n        return count;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpva_czr71.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long remainder2;\n        long remainder3;\n        long\
    \ remainder4;\n        long remainder5;\n        long remainder6;\n        long\
    \ remainder7;\n        long remainder8;\n        long remainder9;\n        long\
    \ remainder10;\n        long remainder11;\n        long remainder12;\n       \
    \ long remainder13;\n        long remainder14;\n        long remainder15;\n  \
    \      long remainder16;\n        long remainder17;\n        long remainder18;\n\
    \        long remainder19;\n        long remainder20;\n        long remainder21;\n\
    \        long remainder22;\n        long remainder23;\n        long remainder24;\n\
    \        long remainder25;\n        long remainder26;\n        long remainder27;\n\
    \        long remainder28;\n        long remainder29;\n        long remainder30;\n\
    \        long remainder31;\n        long remainder32;\n        long remainder33;\n\
    \        long remainder34;\n        long remainder35;\n        long remainder36;\n\
    \        long remainder37;\n        long remainder38;\n        long remainder39;\n\
    \        long remainder40;\n        long remainder41;\n        long remainder42;\n\
    \        long remainder43;\n        long remainder44;\n        long remainder45;\n\
    \        long remainder46;\n        long remainder47;\n        long remainder48;\n\
    \        long remainder49;\n        long remainder50;\n        long remainder51;\n\
    \        long remainder52;\n        long remainder53;\n        long remainder54;\n\
    \        long remainder55;\n        long remainder56;\n        long remainder57;\n\
    \        long remainder58;\n        long remainder59;\n        long remainder60;\n\
    \        long remainder61;\n        long remainder62;\n        long remainder63;\n\
    \        long remainder64;\n        long remainder65;\n        long remainder66;\n\
    \        long remainder67;\n        long remainder68;\n        long remainder69;\n\
    \        long remainder70;\n        long remainder71;\n        long remainder72;\n\
    \        long remainder73;\n        long remainder74;\n        long remainder75;\n\
    \        long remain\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2peguwb6.java:93: error: ';' expected\n        long remain\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa9v9rzzo.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long remainder2;\n        long remainder3;\n        long\
    \ remainder4;\n        long remainder5;\n        long remainder6;\n        long\
    \ remainder7;\n        long remainder8;\n        long remainder9;\n        long\
    \ remainder10;\n        long remainder11;\n        long remainder12;\n       \
    \ long remainder13;\n        long remainder14;\n        long remainder15;\n  \
    \      long remainder16;\n        long remainder17;\n        long remainder18;\n\
    \        long remainder19;\n        long remainder20;\n        long remainder21;\n\
    \        long remainder22;\n        long remainder23;\n        long remainder24;\n\
    \        long remainder25;\n        long remainder26;\n        long remainder27;\n\
    \        long remainder28;\n        long remainder29;\n        long remainder30;\n\
    \        long remainder31;\n        long remainder32;\n        long remainder33;\n\
    \        long remainder34;\n        long remainder35;\n        long remainder36;\n\
    \        long remainder37;\n        long remainder38;\n        long remainder39;\n\
    \        long remainder40;\n        long remainder41;\n        long remainder42;\n\
    \        long remainder43;\n        long remainder44;\n        long remainder45;\n\
    \        long remainder46;\n        long remainder47;\n        long remainder48;\n\
    \        long remainder49;\n        long remainder50;\n        long remainder51;\n\
    \        long remainder52;\n        long remainder53;\n        long remainder54;\n\
    \        long remainder55;\n        long remainder56;\n        long remainder57;\n\
    \        long remainder58;\n        long remainder59;\n        long remainder60;\n\
    \        long remainder61;\n        long remainder62;\n        long remainder63;\n\
    \        long remainder64;\n        long remainder65;\n        long remainder66;\n\
    \        long remainder67;\n        long remainder68;\n        long remainder69;\n\
    \        long remainder70;\n        long remainder71;\n        long remainder72;\n\
    \        long remainder73;\n        long remainder74;\n        long remainder75;\n\
    \        long remain\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprq9h81m6.java:93: error: ';' expected\n        long remain\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count++;\n        }\n        if (n >=\
    \ 1000 && n <= 9999) {\n            count++;\n        }\n        if (n >= 10000\
    \ && n <= 99999) {\n            count++;\n        }\n        if (n >= 100000 &&\
    \ n <= 999999) {\n            count++;\n        }\n        if (n >= 1000000 &&\
    \ n <= 9999999) {\n            count++;\n        }\n        if (n >= 10000000\
    \ && n <= 99999999) {\n            count++;\n        }\n        if (n >= 100000000\
    \ && n <= 999999999) {\n            count++;\n        }\n        if (n >= 1000000000\
    \ && n <= 99999999999) {\n            count++;\n        }\n        if (n >= 10000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 1000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 10000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 1000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 10000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count++;\n        }\n        if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphf87y_dv.java:39: error: integer number too large\n        if (n\
    \ >= 1000000000 && n <= 99999999999) {\n                                    ^\n\
    /tmp/tmphf87y_dv.java:42: error: integer number too large\n        if (n >= 10000000000\
    \ && n <= 999999999999) {\n                 ^\n/tmp/tmphf87y_dv.java:42: error:\
    \ integer number too large\n        if (n >= 10000000000 && n <= 999999999999)\
    \ {\n                                     ^\n/tmp/tmphf87y_dv.java:45: error:\
    \ integer number too large\n        if (n >= 100000000000 && n <= 999999999999)\
    \ {\n                 ^\n/tmp/tmphf87y_dv.java:45: error: integer number too large\n\
    \        if (n >= 100000000000 && n <= 999999999999) {\n                     \
    \                 ^\n/tmp/tmphf87y_dv.java:48: error: integer number too large\n\
    \        if (n >= 1000000000000 && n <= 999999999999) {\n                 ^\n\
    /tmp/tmphf87y_dv.java:48: error: integer number too large\n        if (n >= 1000000000000\
    \ && n <= 999999999999) {\n                                       ^\n/tmp/tmphf87y_dv.java:51:\
    \ error: integer number too large\n        if (n >= 10000000000000 && n <= 999999999999)\
    \ {\n                 ^\n/tmp/tmphf87y_dv.java:51: error: integer number too large\n\
    \        if (n >= 10000000000000 && n <= 999999999999) {\n                   \
    \                     ^\n/tmp/tmphf87y_dv.java:54: error: integer number too large\n\
    \        if (n >= 100000000000000 && n <= 999999999999) {\n                 ^\n\
    /tmp/tmphf87y_dv.java:54: error: integer number too large\n        if (n >= 100000000000000\
    \ && n <= 999999999999) {\n                                         ^\n/tmp/tmphf87y_dv.java:57:\
    \ error: integer number too large\n        if (n >= 1000000000000000 && n <= 999999999999)\
    \ {\n                 ^\n/tmp/tmphf87y_dv.java:57: error: integer number too large\n\
    \        if (n >= 1000000000000000 && n <= 999999999999) {\n                 \
    \                         ^\n/tmp/tmphf87y_dv.java:60: error: integer number too\
    \ large\n        if (n >= 10000000000000000 && n <= 999999999999) {\n        \
    \         ^\n/tmp/tmphf87y_dv.java:60: error: integer number too large\n     \
    \   if (n >= 10000000000000000 && n <= 999999999999) {\n                     \
    \                      ^\n/tmp/tmphf87y_dv.java:63: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:63: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:66: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:66: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:69: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:69: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:72: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:72: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:75: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:75: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:78: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:78: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:81: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:81: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:84: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:84: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:87: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:87: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:90: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:90: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:93: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:93: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:96: error: integer number too\
    \ large\n        if (n >= 100000000000000000 && n <= 999999999999) {\n       \
    \          ^\n/tmp/tmphf87y_dv.java:96: error: integer number too large\n    \
    \    if (n >= 100000000000000000 && n <= 999999999999) {\n                   \
    \                         ^\n/tmp/tmphf87y_dv.java:99: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n40 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n % 11 == 0) count++;\n        if (n >= 100 && n % 13 == 0) count++;\n\
    \        if (n >= 100 && n % 11 == 0 && n % 13 == 0) count++;\n        if (n >=\
    \ 100 && n % 11 == 0) count++;\n        if (n >= 100 && n % 13 == 0) count++;\n\
    \        if (n >= 100 && n % 11 == 0 && n % 13 == 0) count++;\n        if (n >=\
    \ 100 && n % 11 == 0 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11\
    \ == 0) count++;\n        if (n >= 100 && n % 13 == 0) count++;\n        if (n\
    \ >= 100 && n % 11 == 0 && n % 13 == 0) count++;\n        if (n >= 100 && n %\
    \ 11 == 0 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11 == 0) count++;\n\
    \        if (n >= 100 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11\
    \ == 0 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11 == 0 && n % 13\
    \ == 0) count++;\n        if (n >= 100 && n % 11 == 0) count++;\n        if (n\
    \ >= 100 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11 == 0 && n %\
    \ 13 == 0) count++;\n        if (n >= 100 && n % 11 == 0 && n % 13 == 0) count++;\n\
    \        if (n >= 100 && n % 11 == 0) count++;\n        if (n >= 100 && n % 13\
    \ == 0) count++;\n        if (n >= 100 && n % 11 == 0 && n % 13 == 0) count++;\n\
    \        if (n >= 100 && n % 11 == 0 && n % 13 == 0) count++;\n        if (n >=\
    \ 100 && n % 11 == 0) count++;\n        if (n >= 100 && n % 13 == 0) count++;\n\
    \        if (n >= 100 && n % 11 == 0 && n % 13 == 0) count++;\n        if (n >=\
    \ 100 && n % 11 == 0 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11\
    \ == 0) count++;\n        if (n >= 100 && n % 13 == 0) count++;\n        if (n\
    \ >= 100 && n % 11 == 0 && n % 13 == 0) count++;\n        if (n >= 100 && n %\
    \ 11 == 0 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11 == 0) count++;\n\
    \        if (n >= 100 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11\
    \ == 0 && n % 13 == 0) count++;\n        if (n >= 100 && n % 11 == 0 && n % 13\
    \ == 0) count++;\n        if (n >= 100 && n % 11 == 0) count++;\n        if (n\
    \ >= 100 && n % 13 == \n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvtwuzhnb.java:55: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n < 10) {\n            count++;\n        }\n        if (n % 11 == 0 || n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n < 100) {\n      \
    \      count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n      \
    \      count++;\n        }\n        if (n < 1000) {\n            count++;\n  \
    \      }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n  \
    \      }\n        if (n < 10000) {\n            count++;\n        }\n        if\
    \ (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if\
    \ (n < 100000) {\n            count++;\n        }\n        if (n % 11 == 0 ||\
    \ n % 13 == 0) {\n            count++;\n        }\n        if (n < 1000000) {\n\
    \            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n\
    \            count++;\n        }\n        if (n < 10000000) {\n            count++;\n\
    \        }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n\
    \        }\n        if (n < 100000000) {\n            count++;\n        }\n  \
    \      if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n  \
    \      if (n < 1000000000) {\n            count++;\n        }\n        if (n %\
    \ 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n <\
    \ 10000000000) {\n            count++;\n        }\n        if (n % 11 == 0 ||\
    \ n % 13 == 0) {\n            count++;\n        }\n        if (n < 100000000000)\
    \ {\n            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0)\
    \ {\n            count++;\n        }\n        if (n < 1000000000000) {\n     \
    \       count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n     \
    \       count++;\n        }\n        if (n < 10000000000000) {\n            count++;\n\
    \        }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n\
    \        }\n        if (n < 100000000000000) {\n            count++;\n       \
    \ }\n        if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n       \
    \ }\n        if (n < 1000000000000000) {\n            count++;\n        }\n  \
    \      if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n  \
    \      if (n < 10000000000000000) {\n            count++;\n        }\n       \
    \ if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n       \
    \ if (n < 100000000000000000) {\n            count++;\n        }\n        if (n\
    \ % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n\
    \ < 1000000000000000000) {\n            count++;\n        }\n        if (n % 11\
    \ == 0 || n % 13 == 0) {\n            count++;\n        }\n        if (n < 10000000000000000000)\
    \ {\n            count++;\n        }\n        if (n % 11 == 0 || n % 13 == 0)\
    \ {\n            count\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6tc59zr3.java:72: error: integer number too large\n        if (n\
    \ < 10000000000) {\n                ^\n/tmp/tmp6tc59zr3.java:78: error: integer\
    \ number too large\n        if (n < 100000000000) {\n                ^\n/tmp/tmp6tc59zr3.java:84:\
    \ error: integer number too large\n        if (n < 1000000000000) {\n        \
    \        ^\n/tmp/tmp6tc59zr3.java:90: error: integer number too large\n      \
    \  if (n < 10000000000000) {\n                ^\n/tmp/tmp6tc59zr3.java:96: error:\
    \ integer number too large\n        if (n < 100000000000000) {\n             \
    \   ^\n/tmp/tmp6tc59zr3.java:102: error: integer number too large\n        if\
    \ (n < 1000000000000000) {\n                ^\n/tmp/tmp6tc59zr3.java:108: error:\
    \ integer number too large\n        if (n < 10000000000000000) {\n           \
    \     ^\n/tmp/tmp6tc59zr3.java:114: error: integer number too large\n        if\
    \ (n < 100000000000000000) {\n                ^\n/tmp/tmp6tc59zr3.java:120: error:\
    \ integer number too large\n        if (n < 1000000000000000000) {\n         \
    \       ^\n/tmp/tmp6tc59zr3.java:126: error: integer number too large\n      \
    \  if (n < 10000000000000000000) {\n                ^\n/tmp/tmp6tc59zr3.java:130:\
    \ error: not a statement\n            count\n            ^\n/tmp/tmp6tc59zr3.java:130:\
    \ error: ';' expected\n            count\n                 ^\n/tmp/tmp6tc59zr3.java:132:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n13 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long divisor;\n        long remainder2;\n        long divisor2;\n\
    \        long remainder3;\n        long divisor3;\n        long remainder4;\n\
    \        long divisor4;\n        long remainder5;\n        long divisor5;\n  \
    \      long remainder6;\n        long divisor6;\n        long remainder7;\n  \
    \      long divisor7;\n        long remainder8;\n        long divisor8;\n    \
    \    long remainder9;\n        long divisor9;\n        long remainder10;\n   \
    \     long divisor10;\n        long remainder11;\n        long divisor11;\n  \
    \      long remainder12;\n        long divisor12;\n        long remainder13;\n\
    \        long divisor13;\n        long remainder14;\n        long divisor14;\n\
    \        long remainder15;\n        long divisor15;\n        long remainder16;\n\
    \        long divisor16;\n        long remainder17;\n        long divisor17;\n\
    \        long remainder18;\n        long divisor18;\n        long remainder19;\n\
    \        long divisor19;\n        long remainder20;\n        long divisor20;\n\
    \        long remainder21;\n        long divisor21;\n        long remainder22;\n\
    \        long divisor22;\n        long remainder23;\n        long divisor23;\n\
    \        long remainder24;\n        long divisor24;\n        long remainder25;\n\
    \        long divisor25;\n        long remainder26;\n        long divisor26;\n\
    \        long remainder27;\n        long divisor27;\n        long remainder28;\n\
    \        long divisor28;\n        long remainder29;\n        long divisor29;\n\
    \        long remainder30;\n        long divisor30;\n        long remainder31;\n\
    \        long divisor31;\n        long remainder32;\n        long divisor32;\n\
    \        long remainder33;\n        long divisor33;\n        long remainder34;\n\
    \        long divisor34;\n        long remainder35;\n        long divisor35;\n\
    \        long remainder36;\n        long divisor36;\n        long remainder37;\n\
    \        long divisor37;\n        long remainder38;\n        long divisor38;\n\
    \        long remainder39;\n        long divisor39;\n        long remainder40;\n\
    \        long divisor40;\n        long remainder41;\n        long divisor41;\n\
    \        long remainder42;\n        long divisor42;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo43mfkpm.java:103: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 11 || n >= 13) {\n            count = fizzBuzzHelper(n, 11, 13);\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1qq7dmg.java:19: error: cannot find symbol\n            count\
    \ = fizzBuzzHelper(n, 11, 13);\n                    ^\n  symbol:   method fizzBuzzHelper(long,int,int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        while (n>0) {\n            remainder = n%11;\n         \
    \   if (remainder == 7 || remainder == 13) {\n                count++;\n     \
    \       }\n            n = n/11;\n        }\n        return count;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm41ottq0.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (mod != 0 || div != 0)\
    \ {\n            count++;\n        }\n        div = n / 13;\n        mod = n %\
    \ 13;\n        if (mod != 0 || div != 0) {\n            count++;\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxyx2oswa.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count = fizzBuzzHelper(n, 0);\n      \
    \  } else if (n >= 1000 && n <= 9999) {\n            count = fizzBuzzHelper(n,\
    \ 1);\n        } else if (n >= 10000 && n <= 99999) {\n            count = fizzBuzzHelper(n,\
    \ 2);\n        } else if (n >= 100000 && n <= 999999) {\n            count = fizzBuzzHelper(n,\
    \ 3);\n        } else if (n >= 1000000 && n <= 9999999) {\n            count =\
    \ fizzBuzzHelper(n, 4);\n        } else if (n >= 10000000 && n <= 99999999) {\n\
    \            count = fizzBuzzHelper(n, 5);\n        } else if (n >= 100000000\
    \ && n <= 999999999) {\n            count = fizzBuzzHelper(n, 6);\n        } else\
    \ if (n >= 1000000000 && n <= 99999999999) {\n            count = fizzBuzzHelper(n,\
    \ 7);\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp39wc8j_5.java:32: error: integer number too large\n        } else\
    \ if (n >= 1000000000 && n <= 99999999999) {\n                               \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n <= 0) {\n            return 0;\n        }\n        if (n % 11 == 0 || n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % 11 == 0 && n %\
    \ 13 == 0) {\n            count++;\n        }\n        if (n % 11 != 0 && n %\
    \ 13 != 0) {\n            count++;\n        }\n        if (n % \n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8afv0we4.java:118: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkxtmz9tu.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxi1uwsc.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk2jqojja.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long divisor;\n        long remainder2;\n        long divisor2;\n\
    \        long remainder3;\n        long divisor3;\n        long remainder4;\n\
    \        long divisor4;\n        long remainder5;\n        long divisor5;\n  \
    \      long remainder6;\n        long divisor6;\n        long remainder7;\n  \
    \      long divisor7;\n        long remainder8;\n        long divisor8;\n    \
    \    long remainder9;\n        long divisor9;\n        long remainder10;\n   \
    \     long divisor10;\n        long remainder11;\n        long divisor11;\n  \
    \      long remainder12;\n        long divisor12;\n        long remainder13;\n\
    \        long divisor13;\n        long remainder14;\n        long divisor14;\n\
    \        long remainder15;\n        long divisor15;\n        long remainder16;\n\
    \        long divisor16;\n        long remainder17;\n        long divisor17;\n\
    \        long remainder18;\n        long divisor18;\n        long remainder19;\n\
    \        long divisor19;\n        long remainder20;\n        long divisor20;\n\
    \        long remainder21;\n        long divisor21;\n        long remainder22;\n\
    \        long divisor22;\n        long remainder23;\n        long divisor23;\n\
    \        long remainder24;\n        long divisor24;\n        long remainder25;\n\
    \        long divisor25;\n        long remainder26;\n        long divisor26;\n\
    \        long remainder27;\n        long divisor27;\n        long remainder28;\n\
    \        long divisor28;\n        long remainder29;\n        long divisor29;\n\
    \        long remainder30;\n        long divisor30;\n        long remainder31;\n\
    \        long divisor31;\n        long remainder32;\n        long divisor32;\n\
    \        long remainder33;\n        long divisor33;\n        long remainder34;\n\
    \        long divisor34;\n        long remainder35;\n        long divisor35;\n\
    \        long remainder36;\n        long divisor36;\n        long remainder37;\n\
    \        long divisor37;\n        long remainder38;\n        long divisor38;\n\
    \        long remainder39;\n        long divisor39;\n        long remainder40;\n\
    \        long divisor40;\n        long remainder41;\n        long divisor41;\n\
    \        long remainder42;\n        long divisor42;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplmf65guf.java:103: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj2e_pgxj.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ numDivisibleBy11Or13 = (n % 11 == 0 || n % 13 == 0) ? n : n % 11 + 13 * n;\n\
    \        long numDivisibleBy11 = (numDivisibleBy11Or13 % 11 == 0) ? numDivisibleBy11Or13\
    \ : numDivisibleBy11Or13 % 11;\n        long numDivisibleBy13 = (numDivisibleBy11Or13\
    \ % 13 == 0) ? numDivisibleBy11Or13 : numDivisibleBy11Or13 % 13;\n        long\
    \ numDivisibleBy11Or13And13 = (numDivisibleBy11 + numDivisibleBy13) % 11 + numDivisibleBy13;\n\
    \        long numDivisibleBy11And13 = (numDivisibleBy11Or13And13 % 11 == 0) ?\
    \ numDivisibleBy11Or13And13 : numDivisibleBy11Or13And13 % 11;\n        long numDivisibleBy13And11\
    \ = (numDivisibleBy11Or13And13 % 13 == 0) ? numDivisibleBy11Or13And13 : numDivisibleBy11Or13And13\
    \ % 13;\n        long numDivisibleBy11And13And13 = (numDivisibleBy11And13 % 11\
    \ == 0) ? numDivisibleBy11And13And13 : numDivisibleBy11And13 % 11;\n        long\
    \ numDivisibleBy13And11And11 = (numDivisibleBy11And13And13 % 13 == 0) ? numDivisibleBy11And13And13\
    \ : numDivisibleBy11And13And13 % 13;\n        long numDivisibleBy11And13And13And11\
    \ = (numDivisibleBy11And13And13And11 % 11 == 0) ? numDivisibleBy11And13And13And11\
    \ : numDivisibleBy11And13And13And11 % 11;\n        long numDivisibleBy13And11And11And11\
    \ = (numDivisibleBy11And13And13And11And11 % 13 == 0) ? numDivisibleBy11And13And13And11And11\
    \ : numDivisibleBy11And13And13And11And11 % 13;\n        long numDivisibleBy11And13And13And11And11\
    \ = (numDivisibleBy11And13And13And11And11 % 11 == 0) ? numDivisibleBy11And13And13And11And11\
    \ : numDivisibleBy11And13And13And11And11 % 11;\n        long numDivisibleBy13And11And11And11And11\
    \ = (\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7u2cxv0_.java:30: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder % 11 == 0 || remainder % 13 == 0) {\n\
    \            count++;\n            remainder = remainder / 11;\n        }\n  \
    \      return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi1qj1x47.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb637zgx6.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp42pp1359.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpau9d8knq.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4i7j1m5.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2lkuazso.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (mod != 0 || div != 0)\
    \ {\n            count += 1;\n        }\n        div = n / 13;\n        mod =\
    \ n % 13;\n        if (mod != 0 || div != 0) {\n            count += 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4axpbr9g.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpboc292ec.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        long remainder2;\n        long remainder3;\n        long\
    \ remainder4;\n        long remainder5;\n        long remainder6;\n        long\
    \ remainder7;\n        long remainder8;\n        long remainder9;\n        long\
    \ remainder10;\n        long remainder11;\n        long remainder12;\n       \
    \ long remainder13;\n        long remainder14;\n        long remainder15;\n  \
    \      long remainder16;\n        long remainder17;\n        long remainder18;\n\
    \        long remainder19;\n        long remainder20;\n        long remainder21;\n\
    \        long remainder22;\n        long remainder23;\n        long remainder24;\n\
    \        long remainder25;\n        long remainder26;\n        long remainder27;\n\
    \        long remainder28;\n        long remainder29;\n        long remainder30;\n\
    \        long remainder31;\n        long remainder32;\n        long remainder33;\n\
    \        long remainder34;\n        long remainder35;\n        long remainder36;\n\
    \        long remainder37;\n        long remainder38;\n        long remainder39;\n\
    \        long remainder40;\n        long remainder41;\n        long remainder42;\n\
    \        long remainder43;\n        long remainder44;\n        long remainder45;\n\
    \        long remainder46;\n        long remainder47;\n        long remainder48;\n\
    \        long remainder49;\n        long remainder50;\n        long remainder51;\n\
    \        long remainder52;\n        long remainder53;\n        long remainder54;\n\
    \        long remainder55;\n        long remainder56;\n        long remainder57;\n\
    \        long remainder58;\n        long remainder59;\n        long remainder60;\n\
    \        long remainder61;\n        long remainder62;\n        long remainder63;\n\
    \        long remainder64;\n        long remainder65;\n        long remainder66;\n\
    \        long remainder67;\n        long remainder68;\n        long remainder69;\n\
    \        long remainder70;\n        long remainder71;\n        long remainder72;\n\
    \        long remainder73;\n        long remainder74;\n        long remainder75;\n\
    \        long remain\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n  \
    \  assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n \
    \   assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpurzf1mqc.java:93: error: ';' expected\n        long remain\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        do {\n            int digit = remainder % 10;\n    \
    \        if (digit == 7) {\n                count++;\n            }\n        \
    \    remainder = remainder / 10;\n        } while (remainder != 0);\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeg6lpluf.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = remainder % 10;\n                \
    \                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1pi6k2os.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count += 1;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count += 1;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9w5dkk4.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfm34qsjb.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder;\n        do {\n            remainder = n % 11;\n            if (remainder\
    \ == 7) {\n                count++;\n            }\n            n = n / 11;\n\
    \        } while (remainder != 7);\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n  \
    \  assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n  \
    \  assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpocbyzqho.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kbsbacl.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0 && remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n            count++;\n            remainder = remainder / 10;\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplp0qcqyf.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0) {\n            if (remainder %\
    \ 11 == 0 || remainder % 13 == 0) {\n                count++;\n            }\n\
    \            remainder = remainder / 10;\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezxbw49w.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (div == 0 || mod == 0)\
    \ {\n            count++;\n        }\n        div = n / 13;\n        mod = n %\
    \ 13;\n        if (div == 0 || mod == 0) {\n            count++;\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_of0bbj.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ div = n / 11;\n        long mod = n % 11;\n        if (div == 0 || mod == 0)\
    \ {\n            count++;\n        }\n        if (div == 0 || mod == 1) {\n  \
    \          count++;\n        }\n        if (div == 0 || mod == 2) {\n        \
    \    count++;\n        }\n        if (div == 0 || mod == 3) {\n            count++;\n\
    \        }\n        if (div == 0 || mod == 4) {\n            count++;\n      \
    \  }\n        if (div == 0 || mod == 5) {\n            count++;\n        }\n \
    \       if (div == 0 || mod == 6) {\n            count++;\n        }\n       \
    \ if (div == 0 || mod == 7) {\n            count++;\n        }\n        if (div\
    \ == 0 || mod == 8) {\n            count++;\n        }\n        if (div == 0 ||\
    \ mod == 9) {\n            count++;\n        }\n        if (div == 0 || mod ==\
    \ 10) {\n            count++;\n        }\n        if (div == 0 || mod == 11) {\n\
    \            count++;\n        }\n        if (div == 0 || mod == 12) {\n     \
    \       count++;\n        }\n        if (div == 0 || mod == 13) {\n          \
    \  count++;\n        }\n        if (div == 0 || mod == 14) {\n            count++;\n\
    \        }\n        if (div == 0 || mod == 15) {\n            count++;\n     \
    \   }\n        if (div == 0 || mod == 16) {\n            count++;\n        }\n\
    \        if (div == 0 || mod == 17) {\n            count++;\n        }\n     \
    \   if (div == 0 || mod == 18) {\n            count++;\n        }\n        if\
    \ (div == 0 || mod == 19) {\n            count++;\n        }\n        if (div\
    \ == 0 || mod == 20) {\n            count++;\n        }\n        if (div == 0\
    \ || mod == 21) {\n            count++;\n        }\n        if (div == 0 || mod\
    \ == 22) {\n            count++;\n        }\n        if (div == 0 || mod == 23)\
    \ {\n            count++;\n        }\n        if (div == 0 || mod == 24) {\n \
    \           count++;\n        }\n        if (div == 0 || mod == 25) {\n      \
    \      count++;\n        }\n        if (div == 0 || mod == 26) {\n           \
    \ count++;\n        }\n        if (div == 0 || mod == 27) {\n            count++;\n\
    \        }\n        if (div == 0 || mod == 28) {\n            count++;\n     \
    \   }\n        if (div == 0 || mod == 29) {\n            count++;\n        }\n\
    \        if (div == 0 || mod == 30) {\n            count++;\n        }\n     \
    \   if (div == 0 || mod == 31) {\n            count++;\n        }\n        if\
    \ (div == 0 || mod == 32) {\n            count++;\n        }\n        if (div\
    \ == 0 || \n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpchuhmbm_.java:120: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0) {\n            long digit = remainder\
    \ % 10;\n            if (digit == 7 || digit == 11 || digit == 13) {\n       \
    \         count++;\n            }\n            remainder = remainder / 10;\n \
    \       }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpse6esgry.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphwxo3mbg.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        if\
    \ (n >= 100 && n <= 999) {\n            count = fizzBuzzHelper(n, 11, 13);\n \
    \       } else if (n >= 1000 && n <= 9999) {\n            count = fizzBuzzHelper(n,\
    \ 11, 13);\n        } else if (n >= 10000 && n <= 99999) {\n            count\
    \ = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 100000 && n <= 999999)\
    \ {\n            count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000\
    \ && n <= 9999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n       \
    \ } else if (n >= 10000000 && n <= 99999999) {\n            count = fizzBuzzHelper(n,\
    \ 11, 13);\n        } else if (n >= 100000000 && n <= 999999999) {\n         \
    \   count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000000 &&\
    \ n <= 99999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n      \
    \  } else if (n >= 10000000000 && n <= 999999999999) {\n            count = fizzBuzzHelper(n,\
    \ 11, 13);\n        } else if (n >= 100000000000 && n <= 999999999999) {\n   \
    \         count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000000000\
    \ && n <= 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n  \
    \      } else if (n >= 10000000000000 && n <= 999999999999) {\n            count\
    \ = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 100000000000000 && n <=\
    \ 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n        } else\
    \ if (n >= 1000000000000000 && n <= 999999999999) {\n            count = fizzBuzzHelper(n,\
    \ 11, 13);\n        } else if (n >= 10000000000000000 && n <= 999999999999) {\n\
    \            count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n  \
    \      } else if (n >= 1000000000000000001 && n <= 999999999999) {\n         \
    \   count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000000000000002\
    \ && n <= 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n  \
    \      } else if (n >= 1000000000000000003 && n <= 999999999999) {\n         \
    \   count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 1000000000000000004\
    \ && n <= 999999999999) {\n            count = fizzBuzzHelper(n, 11, 13);\n  \
    \      } else if (n >= 1000000000000000005 && n <= 999999999999) {\n         \
    \   count = fizzBuzzHelper(n, 11, 13);\n        } else if (n >= 100000000000000000\n\
    \    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpielwzda1.java:32: error: integer number too large\n        } else\
    \ if (n >= 1000000000 && n <= 99999999999) {\n                               \
    \            ^\n/tmp/tmpielwzda1.java:34: error: integer number too large\n  \
    \      } else if (n >= 10000000000 && n <= 999999999999) {\n                 \
    \       ^\n/tmp/tmpielwzda1.java:34: error: integer number too large\n       \
    \ } else if (n >= 10000000000 && n <= 999999999999) {\n                      \
    \                      ^\n/tmp/tmpielwzda1.java:36: error: integer number too\
    \ large\n        } else if (n >= 100000000000 && n <= 999999999999) {\n      \
    \                  ^\n/tmp/tmpielwzda1.java:36: error: integer number too large\n\
    \        } else if (n >= 100000000000 && n <= 999999999999) {\n              \
    \                               ^\n/tmp/tmpielwzda1.java:38: error: integer number\
    \ too large\n        } else if (n >= 1000000000000 && n <= 999999999999) {\n \
    \                       ^\n/tmp/tmpielwzda1.java:38: error: integer number too\
    \ large\n        } else if (n >= 1000000000000 && n <= 999999999999) {\n     \
    \                                         ^\n/tmp/tmpielwzda1.java:40: error:\
    \ integer number too large\n        } else if (n >= 10000000000000 && n <= 999999999999)\
    \ {\n                        ^\n/tmp/tmpielwzda1.java:40: error: integer number\
    \ too large\n        } else if (n >= 10000000000000 && n <= 999999999999) {\n\
    \                                               ^\n/tmp/tmpielwzda1.java:42: error:\
    \ integer number too large\n        } else if (n >= 100000000000000 && n <= 999999999999)\
    \ {\n                        ^\n/tmp/tmpielwzda1.java:42: error: integer number\
    \ too large\n        } else if (n >= 100000000000000 && n <= 999999999999) {\n\
    \                                                ^\n/tmp/tmpielwzda1.java:44:\
    \ error: integer number too large\n        } else if (n >= 1000000000000000 &&\
    \ n <= 999999999999) {\n                        ^\n/tmp/tmpielwzda1.java:44: error:\
    \ integer number too large\n        } else if (n >= 1000000000000000 && n <= 999999999999)\
    \ {\n                                                 ^\n/tmp/tmpielwzda1.java:46:\
    \ error: integer number too large\n        } else if (n >= 10000000000000000 &&\
    \ n <= 999999999999) {\n                        ^\n/tmp/tmpielwzda1.java:46: error:\
    \ integer number too large\n        } else if (n >= 10000000000000000 && n <=\
    \ 999999999999) {\n                                                  ^\n/tmp/tmpielwzda1.java:48:\
    \ error: integer number too large\n        } else if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n                        ^\n/tmp/tmpielwzda1.java:48:\
    \ error: integer number too large\n        } else if (n >= 100000000000000000\
    \ && n <= 999999999999) {\n                                                  \
    \ ^\n/tmp/tmpielwzda1.java:50: error: integer number too large\n        } else\
    \ if (n >= 1000000000000000001 && n <= 999999999999) {\n                     \
    \   ^\n/tmp/tmpielwzda1.java:50: error: integer number too large\n        } else\
    \ if (n >= 1000000000000000001 && n <= 999999999999) {\n                     \
    \                               ^\n/tmp/tmpielwzda1.java:52: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000002 && n <= 999999999999)\
    \ {\n                        ^\n/tmp/tmpielwzda1.java:52: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000002 && n <= 999999999999)\
    \ {\n                                                    ^\n/tmp/tmpielwzda1.java:54:\
    \ error: integer number too large\n        } else if (n >= 1000000000000000003\
    \ && n <= 999999999999) {\n                        ^\n/tmp/tmpielwzda1.java:54:\
    \ error: integer number too large\n        } else if (n >= 1000000000000000003\
    \ && n <= 999999999999) {\n                                                  \
    \  ^\n/tmp/tmpielwzda1.java:56: error: integer number too large\n        } else\
    \ if (n >= 1000000000000000004 && n <= 999999999999) {\n                     \
    \   ^\n/tmp/tmpielwzda1.java:56: error: integer number too large\n        } else\
    \ if (n >= 1000000000000000004 && n <= 999999999999) {\n                     \
    \                               ^\n/tmp/tmpielwzda1.java:58: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000005 && n <= 999999999999)\
    \ {\n                        ^\n/tmp/tmpielwzda1.java:58: error: integer number\
    \ too large\n        } else if (n >= 1000000000000000005 && n <= 999999999999)\
    \ {\n                                                    ^\n/tmp/tmpielwzda1.java:60:\
    \ error: integer number too large\n        } else if (n >= 100000000000000000\n\
    \                        ^\n/tmp/tmpielwzda1.java:60: error: ')' expected\n  \
    \      } else if (n >= 100000000000000000\n                                  \
    \        ^\n/tmp/tmpielwzda1.java:61: error: illegal start of statement\n    }\n\
    \    ^\n30 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count = count + 1;\n        }\n        remainder = n % 13;\n        if\
    \ (remainder == 0 || remainder == 11) {\n            count = count + 1;\n    \
    \    }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptuv7c7gb.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd63emv1q.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp250m6qb4.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pzb_sqi.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkxz2611g.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n;\n        while (remainder > 0 && remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n            count++;\n            remainder = remainder / 10;\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) ==\
    \ (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) ==\
    \ (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_mebwhzs.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n   \
    \ // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n\
    \    public static long fizzBuzz(long n) {\n        long count = 0;\n        long\
    \ remainder = n % 11;\n        if (remainder == 0 || remainder == 13) {\n    \
    \        count++;\n        }\n        remainder = n % 13;\n        if (remainder\
    \ == 0 || remainder == 11) {\n            count++;\n        }\n        remainder\
    \ = n % 7;\n        if (remainder == 0) {\n            count++;\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplyh1dqgi.java:34)\n"
  exit_code: 1
  status: Exception
