name: HumanEval_77_iscube
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp93o3t48z.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a % 3 == 0) {\n            return true;\n        }\n \
    \       if (a % 5 == 0) {\n            return true;\n        }\n        if (a\
    \ % 7 == 0) {\n            return true;\n        }\n        return false;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxtulqoqg.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        return\
    \ cube == a ? true : false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppk4f63m4.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = a;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaxjo8_e9.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a*a*a*a == 1);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3nffl6dv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxwvou_9n.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo82mc4t1.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0)\n         \
    \   return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n        else\n    \
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcdfijtjc.java:25: error: bad operand types for binary operator\
    \ '*'\n            return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n   \
    \                              ^\n  first type:  boolean\n  second type: boolean\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        long b = 1;\n        long c = 1;\n        long d = 1;\n  \
    \      long e = 1;\n        long f = 1;\n        long g = 1;\n        long h =\
    \ 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long\
    \ l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n    \
    \    long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long \n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuk7uslw7.java:122: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpuk7uslw7.java:122: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(x -> x*x*x == a).count();\n        return cube == 1;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprs2qgyq2.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        long b = 1;\n        long c = 1;\n        long d = 1;\n  \
    \      long e = 1;\n        long f = 1;\n        long g = 1;\n        long h =\
    \ 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long\
    \ l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n    \
    \    long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long aa = 1;\n        long ab = 1;\n        long ac = 1;\n        long ad =\
    \ 1;\n        long ae = 1;\n        long af = 1;\n        long ag = 1;\n     \
    \   long ah = 1;\n        long ai = 1;\n        long aj = 1;\n        long ak\
    \ = 1;\n        long al = 1;\n        long am = 1;\n        long an = 1;\n   \
    \     long ao = 1;\n        long ap = 1;\n        long aq = 1;\n        long ar\
    \ = 1;\n        long as = 1;\n        long at = 1;\n        long au = 1;\n   \
    \     long av = 1;\n        long aw = 1;\n        long ax = 1;\n        long ay\
    \ = 1;\n        long az = 1;\n        long ba = 1;\n        long bb = 1;\n   \
    \     long bc = 1;\n        long bd = 1;\n        long be = 1;\n        long bf\
    \ = 1;\n        long bg = 1;\n        long bh = 1;\n        long bi = 1;\n   \
    \     long bj = 1;\n        long bk = 1;\n        long bl = 1;\n        long bm\
    \ = 1;\n        long bn = 1;\n        long bo = 1;\n        long bp = 1;\n   \
    \     long bq = 1;\n        long br = 1;\n        long bs = 1;\n        long bt1\
    \ = 1;\n        long bt2 = 1;\n        long bt3 = 1;\n        long bt4 = 1;\n\
    \        long bt5 = 1;\n        long bt6 = 1;\n        long bt7 = 1;\n       \
    \ long bt8 = 1;\n        long bt9 = 1;\n        long bt10 = 1;\n        long bt11\
    \ = 1;\n        long bt12 = 1;\n        long bt13 = 1;\n        long bt14 = 1;\n\
    \        long bt15 = 1;\n        long bt16 = 1;\n        long bt17 = 1;\n    \
    \    long bt18 = 1;\n        long bt19 = 1;\n        long bt20 = 1;\n        long\
    \ bt21 = 1;\n        long bt22 = 1;\n        long bt23 = 1;\n        long bt24\
    \ = 1;\n        long bt25 = 1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpha5ky7sv.java:118: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9qh7mg8k.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxmpt0bix.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwfxu0i9f.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_e_0996.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyaslnnxr.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvugzy0lp.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        if\
    \ (a==1) return true;\n        if (a==2) return true;\n        if (a==3) return\
    \ true;\n        if (a==4) return true;\n        if (a==5) return true;\n    \
    \    if (a==6) return true;\n        if (a==7) return true;\n        if (a==8)\
    \ return true;\n        if (a==9) return true;\n        if (a==10) return true;\n\
    \        if (a==11) return true;\n        if (a==12) return true;\n        if\
    \ (a==13) return true;\n        if (a==14) return true;\n        if (a==15) return\
    \ true;\n        if (a==16) return true;\n        if (a==17) return true;\n  \
    \      if (a==18) return true;\n        if (a==19) return true;\n        if (a==20)\
    \ return true;\n        if (a==21) return true;\n        if (a==22) return true;\n\
    \        if (a==23) return true;\n        if (a==24) return true;\n        if\
    \ (a==25) return true;\n        if (a==26) return true;\n        if (a==27) return\
    \ true;\n        if (a==28) return true;\n        if (a==29) return true;\n  \
    \      if (a==30) return true;\n        if (a==31) return true;\n        if (a==32)\
    \ return true;\n        if (a==33) return true;\n        if (a==34) return true;\n\
    \        if (a==35) return true;\n        if (a==36) return true;\n        if\
    \ (a==37) return true;\n        if (a==38) return true;\n        if (a==39) return\
    \ true;\n        if (a==40) return true;\n        if (a==41) return true;\n  \
    \      if (a==42) return true;\n        if (a==43) return true;\n        if (a==44)\
    \ return true;\n        if (a==45) return true;\n        if (a==46) return true;\n\
    \        if (a==47) return true;\n        if (a==48) return true;\n        if\
    \ (a==49) return true;\n        if (a==50) return true;\n        if (a==51) return\
    \ true;\n        if (a==52) return true;\n        if (a==53) return true;\n  \
    \      if (a==54) return true;\n        if (a==55) return true;\n        if (a==56)\
    \ return true;\n        if (a==57) return true;\n        if (a==58) return true;\n\
    \        if (a==59) return true;\n        if (a==60) return true;\n        if\
    \ (a==61) return true;\n        if (a==62) return true;\n        if (a==63) return\
    \ true;\n        if (a==64) return true;\n        if (a==65) return true;\n  \
    \      if (a==66) return true;\n        if (a==67) return true;\n        if (a==68)\
    \ return true;\n        if (a==69) return true;\n        if (a==70) return true;\n\
    \        if (a==71) return true;\n        if (a==\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpymyxpq8t.java:93: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpymyxpq8t.java:94: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpymyxpq8t.java:94: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpymyxpq8t.java:94:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpymyxpq8t.java:94: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpymyxpq8t.java:94:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpymyxpq8t.java:105: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return a%9==0 && a%6==0 && a%3==0 &&\
    \ a%2==0 && a%1==0;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n  \
    \  assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n  \
    \  assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6325zrlh.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a) == 1;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b8jaulb.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0 || cube == Long.MIN_VALUE) {\n            return false;\n       \
    \ }\n        return true;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfulya7b.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        long b = 1;\n        long c = 1;\n        long d = 1;\n  \
    \      long e = 1;\n        long f = 1;\n        long g = 1;\n        long h =\
    \ 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long\
    \ l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n    \
    \    long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long \n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ilczdzg.java:122: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp_ilczdzg.java:122: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptwvekuvr.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a % 3 == 0) {\n            return true;\n        }\n \
    \       return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22sarf0e.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp15f50o0d.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 0) {\n            return true;\n        }\n     \
    \   if (a > 0 && a < 9) {\n            return true;\n        }\n        if (a\
    \ > 9 && a < 99) {\n            return true;\n        }\n        if (a > 99 &&\
    \ a < 999) {\n            return true;\n        }\n        if (a > 999 && a <\
    \ 9999) {\n            return true;\n        }\n        if (a > 9999 && a < 99999)\
    \ {\n            return true;\n        }\n        if (a > 99999 && a < 999999)\
    \ {\n            return true;\n        }\n        if (a > 999999 && a < 9999999)\
    \ {\n            return true;\n        }\n        if (a > 9999999 && a < 999999999)\
    \ {\n            return true;\n        }\n        if (a > 999999999 && a < 99999999999)\
    \ {\n            return true;\n        }\n        if (a > 99999999999 && a < 9999999999999)\
    \ {\n            return true;\n        }\n        if (a > 9999999999999 && a <\
    \ 999999999999999) {\n            return true;\n        }\n        if (a > 999999999999999\
    \ && a < 9999999999999) {\n            return true;\n        }\n        if (a\
    \ > 9999999999999 && a < 999999999999999) {\n            return true;\n      \
    \  }\n        if (a > 999999999999999 && a < 9999999999999) {\n            return\
    \ true;\n        }\n        if (a > 9999999999999 && a < 999999999999999) {\n\
    \            return true;\n        }\n        if (a > 999999999999999 && a < 9999999999999)\
    \ {\n            return true;\n        }\n        if (a > 9999999999999 && a <\
    \ 999999999999999) {\n            return true;\n        }\n        if (a > 999999999999999\
    \ && a < 9999999999999) {\n            return true;\n        }\n        if (a\
    \ > 9999999999999 && a < 999999999999999) {\n            return true;\n      \
    \  }\n        if (a > 999999999999999 && a < 9999999999999) {\n            return\
    \ true;\n        }\n        if (a > 999999999999999 && a < 9999999999999) {\n\
    \            return true;\n        }\n        if (a > 999999999999999 && a < 9999999999999)\
    \ {\n            return true;\n        }\n        if (a > 999999999999999 && a\
    \ < 9999999999999) {\n            return true;\n        }\n        if (a > 999999999999999\
    \ && a < 9999999999999) {\n            return true;\n        }\n        if (a\
    \ > 999999999999999 && a < 9999999999999) {\n            return true;\n      \
    \  }\n        if (a > 999999999999999 && a < 9999999999999) {\n            return\
    \ true;\n        }\n        if (a > 999999999999999 && a < 9999999999999) {\n\
    \            return true;\n        }\n        if (a > 999999999999999 && a < 9999999999\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqx70lb0b.java:50: error: integer number too large: 99999999999\n\
    \        if (a > 999999999 && a < 99999999999) {\n                           \
    \      ^\n/tmp/tmpqx70lb0b.java:53: error: integer number too large: 99999999999\n\
    \        if (a > 99999999999 && a < 9999999999999) {\n                ^\n/tmp/tmpqx70lb0b.java:53:\
    \ error: integer number too large: 9999999999999\n        if (a > 99999999999\
    \ && a < 9999999999999) {\n                                   ^\n/tmp/tmpqx70lb0b.java:56:\
    \ error: integer number too large: 9999999999999\n        if (a > 9999999999999\
    \ && a < 999999999999999) {\n                ^\n/tmp/tmpqx70lb0b.java:56: error:\
    \ integer number too large: 999999999999999\n        if (a > 9999999999999 &&\
    \ a < 999999999999999) {\n                                     ^\n/tmp/tmpqx70lb0b.java:59:\
    \ error: integer number too large: 999999999999999\n        if (a > 999999999999999\
    \ && a < 9999999999999) {\n                ^\n/tmp/tmpqx70lb0b.java:59: error:\
    \ integer number too large: 9999999999999\n        if (a > 999999999999999 &&\
    \ a < 9999999999999) {\n                                       ^\n/tmp/tmpqx70lb0b.java:62:\
    \ error: integer number too large: 9999999999999\n        if (a > 9999999999999\
    \ && a < 999999999999999) {\n                ^\n/tmp/tmpqx70lb0b.java:62: error:\
    \ integer number too large: 999999999999999\n        if (a > 9999999999999 &&\
    \ a < 999999999999999) {\n                                     ^\n/tmp/tmpqx70lb0b.java:65:\
    \ error: integer number too large: 999999999999999\n        if (a > 999999999999999\
    \ && a < 9999999999999) {\n                ^\n/tmp/tmpqx70lb0b.java:65: error:\
    \ integer number too large: 9999999999999\n        if (a > 999999999999999 &&\
    \ a < 9999999999999) {\n                                       ^\n/tmp/tmpqx70lb0b.java:68:\
    \ error: integer number too large: 9999999999999\n        if (a > 9999999999999\
    \ && a < 999999999999999) {\n                ^\n/tmp/tmpqx70lb0b.java:68: error:\
    \ integer number too large: 999999999999999\n        if (a > 9999999999999 &&\
    \ a < 999999999999999) {\n                                     ^\n/t"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        if\
    \ (a==1) return true;\n        if (a==2) return true;\n        if (a==3) return\
    \ true;\n        if (a==4) return true;\n        if (a==5) return true;\n    \
    \    if (a==6) return true;\n        if (a==7) return true;\n        if (a==8)\
    \ return true;\n        if (a==9) return true;\n        if (a==10) return true;\n\
    \        if (a==11) return true;\n        if (a==12) return true;\n        if\
    \ (a==13) return true;\n        if (a==14) return true;\n        if (a==15) return\
    \ true;\n        if (a==16) return true;\n        if (a==17) return true;\n  \
    \      if (a==18) return true;\n        if (a==19) return true;\n        if (a==20)\
    \ return true;\n        if (a==21) return true;\n        if (a==22) return true;\n\
    \        if (a==23) return true;\n        if (a==24) return true;\n        if\
    \ (a==25) return true;\n        if (a==26) return true;\n        if (a==27) return\
    \ true;\n        if (a==28) return true;\n        if (a==29) return true;\n  \
    \      if (a==30) return true;\n        if (a==31) return true;\n        if (a==32)\
    \ return true;\n        if (a==33) return true;\n        if (a==34) return true;\n\
    \        if (a==35) return true;\n        if (a==36) return true;\n        if\
    \ (a==37) return true;\n        if (a==38) return true;\n        if (a==39) return\
    \ true;\n        if (a==40) return true;\n        if (a==41) return true;\n  \
    \      if (a==42) return true;\n        if (a==43) return true;\n        if (a==44)\
    \ return true;\n        if (a==45) return true;\n        if (a==46) return true;\n\
    \        if (a==47) return true;\n        if (a==48) return true;\n        if\
    \ (a==49) return true;\n        if (a==50) return true;\n        if (a==51) return\
    \ true;\n        if (a==52) return true;\n        if (a==53) return true;\n  \
    \      if (a==54) return true;\n        if (a==55) return true;\n        if (a==56)\
    \ return true;\n        if (a==57) return true;\n        if (a==58) return true;\n\
    \        if (a==59) return true;\n        if (a==60) return true;\n        if\
    \ (a==61) return true;\n        if (a==62) return true;\n        if (a==63) return\
    \ true;\n        if (a==64) return true;\n        if (a==65) return true;\n  \
    \      if (a==66) return true;\n        if (a==67) return true;\n        if (a==68)\
    \ return true;\n        if (a==69) return true;\n        if (a==70) return true;\n\
    \        if (a==71) return true;\n        if (a==\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdf44l5qw.java:93: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpdf44l5qw.java:94: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpdf44l5qw.java:94: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpdf44l5qw.java:94:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpdf44l5qw.java:94: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpdf44l5qw.java:94:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpdf44l5qw.java:105: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyd9c9lsg.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfczp7rd5.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a) == 1;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqqww2ayy.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0) {\n            return true;\n        } else {\n            return\
    \ false;\n        }\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n  \
    \  assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n  \
    \  assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_jnyhaft.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long aa = 1;\n        long ab = 1;\n        long\
    \ ac = 1;\n        long ad = 1;\n        long ae = 1;\n        long af = 1;\n\
    \        long ag = 1;\n        long ah = 1;\n        long ai = 1;\n        long\
    \ aj = 1;\n        long ak = 1;\n        long al = 1;\n        long am = 1;\n\
    \        long an = 1;\n        long ao = 1;\n        long ap = 1;\n        long\
    \ aq = 1;\n        long ar = 1;\n        long as = 1;\n        long at = 1;\n\
    \        long au = 1;\n        long av = 1;\n        long aw = 1;\n        long\
    \ ax = 1;\n        long ay = 1;\n        long az = 1;\n        long ba = 1;\n\
    \        long bb = 1;\n        long bc = 1;\n        long bd = 1;\n        long\
    \ be = 1;\n        long bf = 1;\n        long bg = 1;\n        long bh = 1;\n\
    \        long bi = 1;\n        long bj = 1;\n        long bk = 1;\n        long\
    \ bl = 1;\n        long bm = 1;\n        long bn = 1;\n        long bo = 1;\n\
    \        long bp = 1;\n        long bq = 1;\n        long br = 1;\n        long\
    \ bs = 1;\n        long bt = 1;\n        long bu = 1;\n        long bv = 1;\n\
    \        long bw = 1;\n        long bx = 1;\n        long by = 1;\n        long\
    \ bz = 1;\n        long ca = 1;\n        long cb = 1;\n        long cc = 1;\n\
    \        long cd = 1;\n        long ce = 1;\n        long cf = 1;\n        long\
    \ cg = 1;\n        long ch = 1;\n        long ci = 1;\n        long cj = 1;\n\
    \        long ck = 1;\n        long cl = 1;\n        long cm = 1;\n        long\
    \ cn = 1;\n        long co = 1;\n        long cp = 1;\n        long cq = 1;\n\
    \        long cr = 1;\n        long cs = 1;\n        long ct = 1;\n        long\
    \ cu = 1;\n        long cv = 1;\n        long cw = 1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdelaymyx.java:120: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a > Integer.MAX_VALUE) {\n            return false;\n\
    \        }\n        return (int) Math.pow(a, 3) == a;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo41l0egp.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpocc3gy8e.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzs40noqv.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7tyfdiz.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfye4mx8s.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 && a % 5 == 0 && a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3wbv0ew.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgeedp490.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbj_9j9_0.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzc4od9yl.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0) {\n            return false;\n        }\n        return true;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9un4zdvz.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a > Integer.MAX_VALUE) {\n            return false;\n\
    \        }\n        if (a % 3 == 0) {\n            return true;\n        }\n \
    \       return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprtzwj3dt.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a) == 1;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ne_vcya.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvctecl_z.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = a;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkr9s5ypu.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprzbbbelp.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        return\
    \ cube == a || cube == a * a || cube == a * a * a;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy449gboc.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i * i * i == a).count();\n        return cube == a;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0uopvmo0.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpudqjje7d.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == a) return true;\n        return false;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5xas79_.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0)\n            return true;\n\
    \        long b = a%a;\n        if (b==0)\n            return true;\n        long\
    \ c = a%b;\n        if (b==c)\n            return true;\n        long d = a%c;\n\
    \        if (b==d)\n            return true;\n        long e = a%d;\n        if\
    \ (b==e)\n            return true;\n        long f = a%e;\n        if (b==f)\n\
    \            return true;\n        long g = a%f;\n        if (b==g)\n        \
    \    return true;\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1l02w9kq.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        long\
    \ b = a%a;\n        long c = a%b;\n        long d = a%c;\n        long e = a%d;\n\
    \        long f = a%e;\n        long g = a%f;\n        long h = a%g;\n       \
    \ long i = a%h;\n        long j = a%i;\n        long k = a%j;\n        long l\
    \ = a%k;\n        long m = a%l;\n        long n = a%m; \n        long o = a%n;\n\
    \        long p = a%o;\n        long q = a%p;\n        long r = a%q;\n       \
    \ long s = a%r;\n        long t = a%s;\n        long u = a%t;\n        long v\
    \ = a%u;\n        long w = a%v;\n        long x = a%w;\n        long y = a%x;\n\
    \        long z = a%y;\n        long a = a%z;\n        long b = a%a;\n       \
    \ long c = a%b;\n        long d = a%d;\n        long e = a%e;\n        long f\
    \ = a%f;\n        long g = a%g;\n        long h = a%h;\n        long i = a%i;\n\
    \        long j = a%j;\n        long k = a%k;\n        long l = a%l;\n       \
    \ long m = a%m;\n        long n = a%n;\n        long o = a%o;\n        long p\
    \ = a%p;\n        long q = a%q;\n        long r = a%r;\n        long s = a%s;\n\
    \        long t = a%t;\n        long u = a%u;\n        long v = a%v;\n       \
    \ long w = a%w;\n        long x = a%x;\n        long y = a%y;\n        long z\
    \ = a%z;\n        long a = a%a;\n        long b = a%b;\n        long c = a%c;\n\
    \        long d = a%d;\n        long e = a%e;\n        long f = a%f;\n       \
    \ long g = a%g;\n        long h = a%h;\n        long i = a%i;\n        long j\
    \ = a%j;\n        long k = a%k;\n        long l = a%l;\n        long m = a%m;\n\
    \        long n = a%n;\n        long o = a%o;\n        long p = a%p;\n       \
    \ long q = a%q;\n        long r = a%r;\n        long s = a%s;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf2y0zfks.java:46: error: variable a is already defined in method\
    \ iscube(long)\n        long a = a%z;\n             ^\n/tmp/tmpf2y0zfks.java:47:\
    \ error: variable b is already defined in method iscube(long)\n        long b\
    \ = a%a;\n             ^\n/tmp/tmpf2y0zfks.java:48: error: variable c is already\
    \ defined in method iscube(long)\n        long c = a%b;\n             ^\n/tmp/tmpf2y0zfks.java:49:\
    \ error: variable d is already defined in method iscube(long)\n        long d\
    \ = a%d;\n             ^\n/tmp/tmpf2y0zfks.java:50: error: variable e is already\
    \ defined in method iscube(long)\n        long e = a%e;\n             ^\n/tmp/tmpf2y0zfks.java:51:\
    \ error: variable f is already defined in method iscube(long)\n        long f\
    \ = a%f;\n             ^\n/tmp/tmpf2y0zfks.java:52: error: variable g is already\
    \ defined in method iscube(long)\n        long g = a%g;\n             ^\n/tmp/tmpf2y0zfks.java:53:\
    \ error: variable h is already defined in method iscube(long)\n        long h\
    \ = a%h;\n             ^\n/tmp/tmpf2y0zfks.java:54: error: variable i is already\
    \ defined in method iscube(long)\n        long i = a%i;\n             ^\n/tmp/tmpf2y0zfks.java:55:\
    \ error: variable j is already defined in method iscube(long)\n        long j\
    \ = a%j;\n             ^\n/tmp/tmpf2y0zfks.java:56: error: variable k is already\
    \ defined in method iscube(long)\n        long k = a%k;\n             ^\n/tmp/tmpf2y0zfks.java:57:\
    \ error: variable l is already defined in method iscube(long)\n        long l\
    \ = a%l;\n             ^\n/tmp/tmpf2y0zfks.java:58: error: variable m is already\
    \ defined in method iscube(long)\n        long m = a%m;\n             ^\n/tmp/tmpf2y0zfks.java:59:\
    \ error: variable n is already defined in method iscube(long)\n        long n\
    \ = a%n;\n             ^\n/tmp/tmpf2y0zfks.java:60: error: variable o is already\
    \ defined in method iscube(long)\n        long o = a%o;\n             ^\n/tmp/tmpf2y0zfks.java:61:\
    \ error: variable p is already defined in method iscube(long)\n        long p\
    \ = a%p;\n             ^\n/tmp/tmpf2y0zfks.java:62: error: variable q is already\
    \ defined in method iscube("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7a8cx5_q.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0 && a < 9)\n\
    \            return true;\n        if (a > 9 && a < 99)\n            return true;\n\
    \        if (a > 99 && a < 999)\n            return true;\n        if (a > 999\
    \ && a < 9999)\n            return true;\n        if (a > 9999 && a < 99999)\n\
    \            return true;\n        if (a > 99999 && a < 999999)\n            return\
    \ true;\n        if (a > 999999 && a < 9999999)\n            return true;\n  \
    \      if (a > 9999999 && a < 999999999)\n            return true;\n        if\
    \ (a > 999999999 && a < 99999999999)\n            return true;\n        if (a\
    \ > 99999999999 && a < 999999999999999)\n            return true;\n        if\
    \ (a > 999999999999999 && a < 9999999999999999999)\n            return true;\n\
    \        if (a > 9999999999999999999 && a < 99999999999999999999999)\n       \
    \     return true;\n        if (a > 99999999999999999999999 && a < 999999999999999999999999999)\n\
    \            return true;\n        if (a > 999999999999999999999999999 && a <\
    \ 9999999999999999999999999999999)\n            return true;\n        if (a >\
    \ 9999999999999999999999999999999 && a < 99999999999999999999999999999999999)\n\
    \            return true;\n        if (a > 9999999999999999999999999999999 &&\
    \ a < 99999999999999999999999999999999999)\n            return true;\n       \
    \ if (a > 99999999999999999999999999999999999 && a < 999999999999999999999999999999999999999)\n\
    \            return true;\n        if (a > 99999999999999999999999999999999999\
    \ && a < 999999999999999999999999999999999999999)\n            return true;\n\
    \        if (a > 99999999999999999999999999999999999 && a < 999999999999999999999999999999999999999)\n\
    \            return true;\n        if (a > 99999999999999999999999999999999999\
    \ && a < 999999999999999999999999999999999999999)\n            return true;\n\
    \        if (a > 99999999999999999999999999999999999 && a < 999999999999999999999999999999999999999)\n\
    \            return true;\n        if (a > 99999999999999999999999999999999999\
    \ && a < 999999999999999999999999999999999999999)\n            return true;\n\
    \        if (a > 99999999999999999999999999999999999 && a < 999999999999999999999999999999999999999)\n\
    \            return \n    }\n    public static void main(String[] args) {\n  \
    \  assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n   \
    \ assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n   \
    \ assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_owokp8.java:40: error: integer number too large: 99999999999\n\
    \        if (a > 999999999 && a < 99999999999)\n                             \
    \    ^\n/tmp/tmp0_owokp8.java:42: error: integer number too large: 99999999999\n\
    \        if (a > 99999999999 && a < 999999999999999)\n                ^\n/tmp/tmp0_owokp8.java:42:\
    \ error: integer number too large: 999999999999999\n        if (a > 99999999999\
    \ && a < 999999999999999)\n                                   ^\n/tmp/tmp0_owokp8.java:44:\
    \ error: integer number too large: 999999999999999\n        if (a > 999999999999999\
    \ && a < 9999999999999999999)\n                ^\n/tmp/tmp0_owokp8.java:44: error:\
    \ integer number too large: 9999999999999999999\n        if (a > 999999999999999\
    \ && a < 9999999999999999999)\n                                       ^\n/tmp/tmp0_owokp8.java:46:\
    \ error: integer number too large: 9999999999999999999\n        if (a > 9999999999999999999\
    \ && a < 99999999999999999999999)\n                ^\n/tmp/tmp0_owokp8.java:46:\
    \ error: integer number too large: 99999999999999999999999\n        if (a > 9999999999999999999\
    \ && a < 99999999999999999999999)\n                                          \
    \ ^\n/tmp/tmp0_owokp8.java:48: error: integer number too large: 99999999999999999999999\n\
    \        if (a > 99999999999999999999999 && a < 999999999999999999999999999)\n\
    \                ^\n/tmp/tmp0_owokp8.java:48: error: integer number too large:\
    \ 999999999999999999999999999\n        if (a > 99999999999999999999999 && a <\
    \ 999999999999999999999999999)\n                                             \
    \  ^\n/tmp/tmp0_owokp8.java:50: error: integer number too large: 999999999999999999999999999\n\
    \        if (a > 999999999999999999999999999 && a < 9999999999999999999999999999999)\n\
    \                ^\n/tmp/tmp0_owokp8.java:50: error: integer number too large:\
    \ 9999999999999999999999999999999\n        if (a > 999999999999999999999999999\
    \ && a < 9999999999999999999999999999999)\n                                  \
    \                 ^\n/tmp/tmp0_owokp8.java:52: error: integer number too large:\
    \ 9999999999999999999999999999999\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_boflpt6.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a) == 1;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdzabw8w4.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp83rgfyrv.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long aa = 1;\n        long ab = 1;\n    \
    \    long ac = 1;\n        long ad = 1;\n        long ae = 1;\n        long af\
    \ = 1;\n        long ag = 1;\n        long ah = 1;\n        long ai = 1;\n   \
    \     long aj = 1;\n        long ak = 1;\n        long al = 1;\n        long am\
    \ = 1;\n        long an = 1;\n        long ao = 1;\n        long ap = 1;\n   \
    \     long aq = 1;\n        long ar = 1;\n        long as = 1;\n        long at\
    \ = 1;\n        long au = 1;\n        long av = 1;\n        long aw = 1;\n   \
    \     long ax = 1;\n        long ay = 1;\n        long az = 1;\n        long aaa\
    \ = 1;\n        long aab = 1;\n        long aac = 1;\n        long aad = 1;\n\
    \        long aae = 1;\n        long aaf = 1;\n        long aag = 1;\n       \
    \ long aah = 1;\n        long ai1 = 1;\n        long aj1 = 1;\n        long ak1\
    \ = 1;\n        long al1 = 1;\n        long am1 = 1;\n        long an1 = 1;\n\
    \        long ao1 = 1;\n        long ap1 = 1;\n        long aq1 = 1;\n       \
    \ long ar1 = 1;\n        long as1 = 1;\n        long at1 = 1;\n        long au1\
    \ = 1;\n        long av1 = 1;\n        long aw1 = 1;\n        long ax1 = 1;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv13fo5bz.java:122: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 || a % 5 == 0 || a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc5v2lb5g.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp04hyhf14.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = a;\n        long c = b;\n\
    \        long d = b;\n        long e = b;\n        long f = b;\n        long g\
    \ = b;\n        long h = b;\n        long i = b;\n        long j = b;\n      \
    \  long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n\
    \        long o = b;\n        long p = b;\n        long q = b;\n        long r\
    \ = b;\n        long s = b;\n        long t = b;\n        long u = b;\n      \
    \  long v = b;\n        long w = b;\n        long x = b;\n        long y = b;\n\
    \        long z = b;\n        long a = b;\n        long b = b;\n        long c\
    \ = b;\n        long d = b;\n        long e = b;\n        long f = b;\n      \
    \  long g = b;\n        long h = b;\n        long i = b;\n        long j = b;\n\
    \        long k = b;\n        long l = b;\n        long m = b;\n        long n\
    \ = b;\n        long o = b;\n        long p = b;\n        long q = b;\n      \
    \  long r = b;\n        long s = b;\n        long t = b;\n        long u = b;\n\
    \        long v = b;\n        long w = b;\n        long x = b;\n        long y\
    \ = b;\n        long z = b;\n        long a = b;\n        long b = b;\n      \
    \  long c = b;\n        long d = b;\n        long e = b;\n        long f = b;\n\
    \        long g = b;\n        long h = b;\n        long i = b;\n        long j\
    \ = b;\n        long k = b;\n        long l = b;\n        long m = b;\n      \
    \  long n = b;\n        long o = b;\n        long p = b;\n        long q = b;\n\
    \        long r = b;\n        long s = b;\n        long t = b;\n        long u\
    \ = b;\n        long v = b;\n        long w = b;\n        long x = b;\n      \
    \  long y = b;\n        long z = b;\n        long a = b;\n        long b = b;\n\
    \        long c = b;\n        long d = b;\n        long e = b;\n        long f\
    \ = b;\n        long g = b;\n        long h = b;\n        long i = b;\n      \
    \  long j = b;\n        long k = b;\n        long l = b;\n        long m = b;\n\
    \        long n = b;\n        long o = b;\n        long p = b;\n        long q\
    \ = b;\n        long r = b;\n        long s = b;\n        long t = b;\n      \
    \  long u = b;\n        long v = b;\n        long w = b;\n        long x = b;\n\
    \        long y = \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm99l7eir.java:122: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpm99l7eir.java:123: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpm99l7eir.java:123: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpm99l7eir.java:123:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpm99l7eir.java:123: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpm99l7eir.java:123:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpm99l7eir.java:134: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        if\
    \ (a==1) return true;\n        if (a==2) return true;\n        if (a==3) return\
    \ true;\n        if (a==4) return true;\n        if (a==5) return true;\n    \
    \    if (a==6) return true;\n        if (a==7) return true;\n        if (a==8)\
    \ return true;\n        if (a==9) return true;\n        if (a==10) return true;\n\
    \        if (a==11) return true;\n        if (a==12) return true;\n        if\
    \ (a==13) return true;\n        if (a==14) return true;\n        if (a==15) return\
    \ true;\n        if (a==16) return true;\n        if (a==17) return true;\n  \
    \      if (a==18) return true;\n        if (a==19) return true;\n        if (a==20)\
    \ return true;\n        if (a==21) return true;\n        if (a==22) return true;\n\
    \        if (a==23) return true;\n        if (a==24) return true;\n        if\
    \ (a==25) return true;\n        if (a==26) return true;\n        if (a==27) return\
    \ true;\n        if (a==28) return true;\n        if (a==29) return true;\n  \
    \      if (a==30) return true;\n        if (a==31) return true;\n        if (a==32)\
    \ return true;\n        if (a==33) return true;\n        if (a==34) return true;\n\
    \        if (a==35) return true;\n        if (a==36) return true;\n        if\
    \ (a==37) return true;\n        if (a==38) return true;\n        if (a==39) return\
    \ true;\n        if (a==40) return true;\n        if (a==41) return true;\n  \
    \      if (a==42) return true;\n        if (a==43) return true;\n        if (a==44)\
    \ return true;\n        if (a==45) return true;\n        if (a==46) return true;\n\
    \        if (a==47) return true;\n        if (a==48) return true;\n        if\
    \ (a==49) return true;\n        if (a==50) return true;\n        if (a==51) return\
    \ true;\n        if (a==52) return true;\n        if (a==53) return true;\n  \
    \      if (a==54) return true;\n        if (a==55) return true;\n        if (a==56)\
    \ return true;\n        if (a==57) return true;\n        if (a==58) return true;\n\
    \        if (a==59) return true;\n        if (a==60) return true;\n        if\
    \ (a==61) return true;\n        if (a==62) return true;\n        if (a==63) return\
    \ true;\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdij04jnq.java:89)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeaz2juxf.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3oikkvuj.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdzo3wy1o.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0)\n         \
    \   return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz4e0dmhe.java:25: error: bad operand types for binary operator\
    \ '*'\n            return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n   \
    \                              ^\n  first type:  boolean\n  second type: boolean\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a) == 1;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyvfya09b.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxql1ow7e.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpruav5h4s.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 || a % 5 == 0 || a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf6zhcy9b.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a % 2 == 0) {\n            return false;\n        }\n\
    \        if (a % 3 == 0) {\n            return true;\n        }\n        if (a\
    \ % 5 == 0) {\n            return true;\n        }\n        if (a % 7 == 0) {\n\
    \            return true;\n        }\n        if (a % 11 == 0) {\n           \
    \ return true;\n        }\n        if (a % 13 == 0) {\n            return true;\n\
    \        }\n        if (a % 17 == 0) {\n            return true;\n        }\n\
    \        if (a % 19 == 0) {\n            return true;\n        }\n        if (a\
    \ % 23 == 0) {\n            return true;\n        }\n        if (a % 29 == 0)\
    \ {\n            return true;\n        }\n        if (a % 31 == 0) {\n       \
    \     return true;\n        }\n        if (a % 37 == 0) {\n            return\
    \ true;\n        }\n        if (a % 41 == 0) {\n            return true;\n   \
    \     }\n        if (a % 43 == 0) {\n            return true;\n        }\n   \
    \     if (a % 47 == 0) {\n            return true;\n        }\n        if (a %\
    \ 53 == 0) {\n            return true;\n        }\n        if (a % 59 == 0) {\n\
    \            return true;\n        }\n        if (a % 61 == 0) {\n           \
    \ return true;\n        }\n        if (a % 67 == 0) {\n            return true;\n\
    \        }\n        if (a % 71 == 0) {\n            return true;\n        }\n\
    \        if (a % 73 == 0) {\n            return true;\n        }\n        if (a\
    \ % 79 == 0) {\n            return true;\n        }\n        if (a % 83 == 0)\
    \ {\n            return true;\n        }\n        if (a % 89 == 0) {\n       \
    \     return true;\n        }\n        if (a % 97 == 0) {\n            return\
    \ true;\n        }\n        if (a % 101 == 0) {\n            return true;\n  \
    \      }\n        if (a % 103 == 0) {\n            return true;\n        }\n \
    \       if (a % 107 == 0) {\n            return true;\n        }\n        if (a\
    \ % 109 == 0) {\n            return true;\n        }\n        if (a % 113 == 0)\
    \ {\n            return true;\n        }\n        if (a % 117 == 0) {\n      \
    \      return true;\n        }\n        if (a % 121 == 0) {\n            return\
    \ true;\n        }\n        if (a % 123 == 0) {\n            return true;\n  \
    \      }\n        if (a % 127 == 0) {\n            return true;\n        }\n \
    \       if (a % 131 == 0) {\n            return true;\n        }\n        if (a\
    \ % 137 == 0) {\n            return true;\n        }\n        if (a % 141 == 0)\
    \ {\n            return true;\n        }\n        if (a % 147 == 0) {\n      \
    \      return true;\n        }\n        if (a % 151 == 0) {\n            return\
    \ true;\n        }\n        if (a % 157 == 0) {\n            return true;\n  \
    \      }\n        if (a % 161 == 0) {\n            return true;\n        }\n \
    \       if (a % 167 == 0) {\n            return true;\n        }\n        if (a\
    \ % 171 == 0) {\n            return true;\n        }\n        if (a % 177 == 0)\
    \ {\n            return true;\n        }\n        if (a % 181 == 0) {\n      \
    \      return true;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n  \
    \  assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n  \
    \  assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpawgxepxw.java:159: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpawgxepxw.java:159: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpawgxepxw.java:159: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpawgxepxw.java:159: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpawgxepxw.java:159: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpawgxepxw.java:170: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i * a * i == a).count();\n        return cube == a;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjjsg_6jt.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph4fd0jge.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        long b = 1;\n        long c = 1;\n        long d = 1;\n  \
    \      long e = 1;\n        long f = 1;\n        long g = 1;\n        long h =\
    \ 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long\
    \ l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n    \
    \    long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long a = 1;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n\
    \        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h\
    \ = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n      \
    \  long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long a = 1;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n      \
    \  long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n\
    \        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o\
    \ = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n\
    \        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z\
    \ = 1;\n        long a = 1;\n        long b = 1;\n        long c = 1;\n      \
    \  long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n\
    \        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k\
    \ = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n      \
    \  long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v\
    \ = 1;\n        long w = 1;\n        long x = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo16h0_3o.java:124: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpo16h0_3o.java:125: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpo16h0_3o.java:125: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpo16h0_3o.java:125:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpo16h0_3o.java:125: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpo16h0_3o.java:125:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpo16h0_3o.java:136: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        if\
    \ (a==1) return true;\n        if (a==2) return true;\n        if (a==3) return\
    \ true;\n        if (a==4) return true;\n        if (a==5) return true;\n    \
    \    if (a==6) return true;\n        if (a==7) return true;\n        if (a==8)\
    \ return true;\n        if (a==9) return true;\n        if (a==10) return true;\n\
    \        if (a==11) return true;\n        if (a==12) return true;\n        if\
    \ (a==13) return true;\n        if (a==14) return true;\n        if (a==15) return\
    \ true;\n        if (a==16) return true;\n        if (a==17) return true;\n  \
    \      if (a==18) return true;\n        if (a==19) return true;\n        if (a==20)\
    \ return true;\n        if (a==21) return true;\n        if (a==22) return true;\n\
    \        if (a==23) return true;\n        if (a==24) return true;\n        if\
    \ (a==25) return true;\n        if (a==26) return true;\n        if (a==27) return\
    \ true;\n        if (a==28) return true;\n        if (a==29) return true;\n  \
    \      if (a==30) return true;\n        if (a==31) return true;\n        if (a==32)\
    \ return true;\n        if (a==33) return true;\n        if (a==34) return true;\n\
    \        if (a==35) return true;\n        if (a==36) return true;\n        if\
    \ (a==37) return true;\n        if (a==38) return true;\n        if (a==39) return\
    \ true;\n        if (a==40) return true;\n        if (a==41) return true;\n  \
    \      if (a==42) return true;\n        if (a==43) return true;\n        if (a==44)\
    \ return true;\n        if (a==45) return true;\n        if (a==46) return true;\n\
    \        if (a==47) return true;\n        if (a==48) return true;\n        if\
    \ (a==49) return true;\n        if (a==50) return true;\n        if (a==51) return\
    \ true;\n        if (a==52) return true;\n        if (a==53) return true;\n  \
    \      if (a==54) return true;\n        if (a==55) return true;\n        if (a==56)\
    \ return true;\n        if (a==57) return true;\n        if (a==58) return true;\n\
    \        if (a==59) return true;\n        if (a==60) return true;\n        if\
    \ (a==61) return true;\n        if (a==62) return true;\n        if (a==63) return\
    \ true;\n        if (a==64) return true;\n        if (a==65) return true;\n  \
    \      if (a==66) return true;\n        if (a==67) return true;\n        if (a==68)\
    \ return true;\n        if (a==69) return true;\n        if (a==70) return true;\n\
    \        if (a==71) return true;\n        if (a==\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwpfbuc2t.java:93: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpwpfbuc2t.java:94: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpwpfbuc2t.java:94: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpwpfbuc2t.java:94:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpwpfbuc2t.java:94: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpwpfbuc2t.java:94:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpwpfbuc2t.java:105: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0s0oilv.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnkvjypk6.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a % 2 == 0)\n    \
    \        return false;\n        if (a % 3 == 0)\n            return true;\n  \
    \      if (a % 5 == 0)\n            return false;\n        if (a % 7 == 0)\n \
    \           return true;\n        if (a % 11 == 0)\n            return false;\n\
    \        if (a % 13 == 0)\n            return true;\n        if (a % 17 == 0)\n\
    \            return false;\n        if (a % 19 == 0)\n            return true;\n\
    \        if (a % 23 == 0)\n            return false;\n        if (a % 29 == 0)\n\
    \            return true;\n        if (a % 31 == 0)\n            return false;\n\
    \        if (a % 37 == 0)\n            return true;\n        if (a % 41 == 0)\n\
    \            return false;\n        if (a % 43 == 0)\n            return true;\n\
    \        if (a % 47 == 0)\n            return false;\n        if (a % 49 == 0)\n\
    \            return true;\n        if (a % 53 == 0)\n            return false;\n\
    \        if (a % 57 == 0)\n            return true;\n        if (a % 61 == 0)\n\
    \            return false;\n        if (a % 67 == 0)\n            return true;\n\
    \        if (a % 71 == 0)\n            return false;\n        if (a % 73 == 0)\n\
    \            return true;\n        if (a % 79 == 0)\n            return false;\n\
    \        if (a % 83 == 0)\n            return true;\n        if (a % 89 == 0)\n\
    \            return false;\n        if (a % 93 == 0)\n            return true;\n\
    \        if (a % 97 == 0)\n            return false;\n        if (a % 101 == 0)\n\
    \            return true;\n        if (a % 103 == 0)\n            return false;\n\
    \        if (a % 107 == 0)\n            return true;\n        if (a % 109 == 0)\n\
    \            return false;\n        if (a % 113 == 0)\n            return true;\n\
    \        if (a % 117 == 0)\n            return false;\n        if (a % 121 ==\
    \ 0)\n            return true;\n        if (a % 123 == 0)\n            return\
    \ false;\n        if (a % 127 == 0)\n            return true;\n        if (a %\
    \ 131 == 0)\n            return false;\n        if (a % 133 == 0)\n          \
    \  return true;\n        if (a % 137 == 0)\n            return false;\n      \
    \  if (a % 141 == 0)\n            return true;\n        if (a % 143 == 0)\n  \
    \          return false;\n        if (a % 147 == 0)\n            return true;\n\
    \        if (a % 151 == 0)\n            return false;\n        if (a % 153 ==\
    \ 0)\n            return true;\n        if (a % 157 == 0)\n            return\
    \ false;\n        if (a % 161 == 0)\n            return true;\n        if (a %\
    \ 163 == 0)\n            return false;\n        if (a % 167 == 0)\n          \
    \  return true;\n        if (a % 171 == 0)\n            return false;\n      \
    \  if (a % 173 == 0)\n            return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw4wyz_nf.java:124: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i * i * i == a).count();\n        return cube == 1;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0csoz4iu.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk7gvlyei.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkz4x_ubn.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0) {\n            return true;\n        }\n        return false;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7_cgzkb.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprsceu1hf.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 || a % 5 == 0 || a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxunzlzp.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9_fw_dpc.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 1) {\n            return true;\n        }\n     \
    \   if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n\
    \            return true;\n        }\n        if (a == 4) {\n            return\
    \ true;\n        }\n        if (a == 5) {\n            return true;\n        }\n\
    \        if (a == 6) {\n            return true;\n        }\n        if (a ==\
    \ 7) {\n            return true;\n        }\n        if (a == 8) {\n         \
    \   return true;\n        }\n        if (a == 9) {\n            return true;\n\
    \        }\n        if (a == 10) {\n            return true;\n        }\n    \
    \    if (a == 11) {\n            return true;\n        }\n        if (a == 12)\
    \ {\n            return true;\n        }\n        if (a == 13) {\n           \
    \ return true;\n        }\n        if (a == 14) {\n            return true;\n\
    \        }\n        if (a == 15) {\n            return true;\n        }\n    \
    \    if (a == 16) {\n            return true;\n        }\n        if (a == 17)\
    \ {\n            return true;\n        }\n        if (a == 18) {\n           \
    \ return true;\n        }\n        if (a == 19) {\n            return true;\n\
    \        }\n        if (a == 20) {\n            return true;\n        }\n    \
    \    if (a == 21) {\n            return true;\n        }\n        if (a == 22)\
    \ {\n            return true;\n        }\n        if (a == 23) {\n           \
    \ return true;\n        }\n        if (a == 24) {\n            return true;\n\
    \        }\n        if (a == 25) {\n            return true;\n        }\n    \
    \    if (a == 26) {\n            return true;\n        }\n        if (a == 27)\
    \ {\n            return true;\n        }\n        if (a == 28) {\n           \
    \ return true;\n        }\n        if (a == 29) {\n            return true;\n\
    \        }\n        if (a == 30) {\n            return true;\n        }\n    \
    \    if (a == 31) {\n            return true;\n        }\n        if (a == 32)\
    \ {\n            return true;\n        }\n        if (a == 33) {\n           \
    \ return true;\n        }\n        if (a == 34) {\n            return true;\n\
    \        }\n        if (a == 35) {\n            return true;\n        }\n    \
    \    if (a == 36) {\n            return true;\n        }\n        if (a == 37)\
    \ {\n            return true;\n        }\n        if (a == 38) {\n           \
    \ return true;\n        }\n        if (a == 39) {\n            return true;\n\
    \        }\n        if (a == 40) {\n            return true;\n        }\n    \
    \    if (a == 41) {\n            return true;\n        }\n        if (a == 42)\
    \ {\n            return true;\n        }\n        if (a == 43) {\n           \
    \ return true;\n        }\n        if (a == 44) {\n            return true;\n\
    \        }\n        if (a == 45) {\n            return true;\n        }\n    \
    \    if (a == 46) {\n            return true;\n        }\n        if (a == 47)\
    \ {\n            return true;\n        }\n        if (a == 48) {\n           \
    \ return true;\n        }\n        if (a == 49) {\n            return true;\n\
    \        }\n        if (a == 50) {\n            return true;\n        }\n    \
    \    if (a == 51) {\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwqgooxj_.java:176: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpwqgooxj_.java:176: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpwqgooxj_.java:176: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpwqgooxj_.java:176: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpwqgooxj_.java:176: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpwqgooxj_.java:187: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4nowshtt.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 1) {\n            return true;\n        }\n     \
    \   if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n\
    \            return true;\n        }\n        if (a == 4) {\n            return\
    \ true;\n        }\n        if (a == 5) {\n            return true;\n        }\n\
    \        if (a == 6) {\n            return true;\n        }\n        if (a ==\
    \ 7) {\n            return true;\n        }\n        if (a == 8) {\n         \
    \   return true;\n        }\n        if (a == 9) {\n            return true;\n\
    \        }\n        if (a == 10) {\n            return true;\n        }\n    \
    \    if (a == 11) {\n            return true;\n        }\n        if (a == 12)\
    \ {\n            return true;\n        }\n        if (a == 13) {\n           \
    \ return true;\n        }\n        if (a == 14) {\n            return true;\n\
    \        }\n        if (a == 15) {\n            return true;\n        }\n    \
    \    if (a == 16) {\n            return true;\n        }\n        if (a == 17)\
    \ {\n            return true;\n        }\n        if (a == 18) {\n           \
    \ return true;\n        }\n        if (a == 19) {\n            return true;\n\
    \        }\n        if (a == 20) {\n            return true;\n        }\n    \
    \    if (a == 21) {\n            return true;\n        }\n        if (a == 22)\
    \ {\n            return true;\n        }\n        if (a == 23) {\n           \
    \ return true;\n        }\n        if (a == 24) {\n            return true;\n\
    \        }\n        if (a == 25) {\n            return true;\n        }\n    \
    \    if (a == 26) {\n            return true;\n        }\n        if (a == 27)\
    \ {\n            return true;\n        }\n        if (a == 28) {\n           \
    \ return true;\n        }\n        if (a == 29) {\n            return true;\n\
    \        }\n        if (a == 30) {\n            return true;\n        }\n    \
    \    if (a == 31) {\n            return true;\n        }\n        if (a == 32)\
    \ {\n            return true;\n        }\n        if (a == 33) {\n           \
    \ return true;\n        }\n        if (a == 34) {\n            return true;\n\
    \        }\n        if (a == 35) {\n            return true;\n        }\n    \
    \    if (a == 36) {\n            return true;\n        }\n        if (a == 37)\
    \ {\n            return true;\n        }\n        if (a == 38) {\n           \
    \ return true;\n        }\n        if (a == 39) {\n            return true;\n\
    \        }\n        if (a == 40) {\n            return true;\n        }\n    \
    \    if (a == 41) {\n            return true;\n        }\n        if (a == 42)\
    \ {\n            return true;\n        }\n        if (a == 43) {\n           \
    \ return true;\n        }\n        if (a == 44) {\n            return true;\n\
    \        }\n        if (a == 45) {\n            return true;\n        }\n    \
    \    if (a == 46) {\n            return true;\n        }\n        if (a == 47)\
    \ {\n            return true;\n        }\n        if (a == 48) {\n           \
    \ return true;\n        }\n        if (a == 49) {\n            return true;\n\
    \        }\n        if (a == 50) {\n            return true;\n        }\n    \
    \    if (a == 51) {\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdz0h5m2.java:176: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpfdz0h5m2.java:176: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpfdz0h5m2.java:176: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpfdz0h5m2.java:176: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpfdz0h5m2.java:176: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpfdz0h5m2.java:187: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 1) {\n            return true;\n        }\n     \
    \   if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n\
    \            return true;\n        }\n        if (a == 4) {\n            return\
    \ true;\n        }\n        if (a == 5) {\n            return true;\n        }\n\
    \        if (a == 6) {\n            return true;\n        }\n        if (a ==\
    \ 7) {\n            return true;\n        }\n        if (a == 8) {\n         \
    \   return true;\n        }\n        if (a == 9) {\n            return true;\n\
    \        }\n        if (a == 10) {\n            return true;\n        }\n    \
    \    if (a == 11) {\n            return true;\n        }\n        if (a == 12)\
    \ {\n            return true;\n        }\n        if (a == 13) {\n           \
    \ return true;\n        }\n        if (a == 14) {\n            return true;\n\
    \        }\n        if (a == 15) {\n            return true;\n        }\n    \
    \    if (a == 16) {\n            return true;\n        }\n        if (a == 17)\
    \ {\n            return true;\n        }\n        if (a == 18) {\n           \
    \ return true;\n        }\n        if (a == 19) {\n            return true;\n\
    \        }\n        if (a == 20) {\n            return true;\n        }\n    \
    \    if (a == 21) {\n            return true;\n        }\n        if (a == 22)\
    \ {\n            return true;\n        }\n        if (a == 23) {\n           \
    \ return true;\n        }\n        if (a == 24) {\n            return true;\n\
    \        }\n        if (a == 25) {\n            return true;\n        }\n    \
    \    if (a == 26) {\n            return true;\n        }\n        if (a == 27)\
    \ {\n            return true;\n        }\n        if (a == 28) {\n           \
    \ return true;\n        }\n        if (a == 29) {\n            return true;\n\
    \        }\n        if (a == 30) {\n            return true;\n        }\n    \
    \    if (a == 31) {\n            return true;\n        }\n        if (a == 32)\
    \ {\n            return true;\n        }\n        if (a == 33) {\n           \
    \ return true;\n        }\n        if (a == 34) {\n            return true;\n\
    \        }\n        if (a == 35) {\n            return true;\n        }\n    \
    \    if (a == 36) {\n            return true;\n        }\n        if (a == 37)\
    \ {\n            return true;\n        }\n        if (a == 38) {\n           \
    \ return true;\n        }\n        if (a == 39) {\n            return true;\n\
    \        }\n        if (a == 40) {\n            return true;\n        }\n    \
    \    if (a == 41) {\n            return true;\n        }\n        if (a == 42)\
    \ {\n            return true;\n        }\n        if (a == 43) {\n           \
    \ return true;\n        }\n        if (a == 44) {\n            return true;\n\
    \        }\n        if (a == 45) {\n            return true;\n        }\n    \
    \    if (a == 46) {\n            return true;\n        }\n        if (a == 47)\
    \ {\n            return true;\n        }\n        if (a == 48) {\n           \
    \ return true;\n        }\n        if (a == 49) {\n            return true;\n\
    \        }\n        if (a == 50) {\n            return true;\n        }\n    \
    \    if (a == 51) {\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv4wr3lzj.java:176: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpv4wr3lzj.java:176: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpv4wr3lzj.java:176: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpv4wr3lzj.java:176: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpv4wr3lzj.java:176: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpv4wr3lzj.java:187: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return a%9==0&&a%6==0&&a%3==0;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9ur4z41.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i * i * i == a).count();\n        return cube == 1;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoc2ho2vv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i * i * i == a).count();\n        return cube == 1;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8i77pww.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdqs4pfc0.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgafcquik.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0 || cube == 1)\n            return true;\n        return false;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_tv0ndrx.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx77mcr4r.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzl90m3z3.java:20: error: ';' expected\n        return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 1) {\n            return true;\n        }\n     \
    \   if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n\
    \            return true;\n        }\n        if (a == 4) {\n            return\
    \ true;\n        }\n        if (a == 5) {\n            return true;\n        }\n\
    \        if (a == 6) {\n            return true;\n        }\n        if (a ==\
    \ 7) {\n            return true;\n        }\n        if (a == 8) {\n         \
    \   return true;\n        }\n        if (a == 9) {\n            return true;\n\
    \        }\n        if (a == 10) {\n            return true;\n        }\n    \
    \    if (a == 11) {\n            return true;\n        }\n        if (a == 12)\
    \ {\n            return true;\n        }\n        if (a == 13) {\n           \
    \ return true;\n        }\n        if (a == 14) {\n            return true;\n\
    \        }\n        if (a == 15) {\n            return true;\n        }\n    \
    \    if (a == 16) {\n            return true;\n        }\n        if (a == 17)\
    \ {\n            return true;\n        }\n        if (a == 18) {\n           \
    \ return true;\n        }\n        if (a == 19) {\n            return true;\n\
    \        }\n        if (a == 20) {\n            return true;\n        }\n    \
    \    if (a == 21) {\n            return true;\n        }\n        if (a == 22)\
    \ {\n            return true;\n        }\n        if (a == 23) {\n           \
    \ return true;\n        }\n        if (a == 24) {\n            return true;\n\
    \        }\n        if (a == 25) {\n            return true;\n        }\n    \
    \    if (a == 26) {\n            return true;\n        }\n        if (a == 27)\
    \ {\n            return true;\n        }\n        if (a == 28) {\n           \
    \ return true;\n        }\n        if (a == 29) {\n            return true;\n\
    \        }\n        if (a == 30) {\n            return true;\n        }\n    \
    \    if (a == 31) {\n            return true;\n        }\n        if (a == 32)\
    \ {\n            return true;\n        }\n        if (a == 33) {\n           \
    \ return true;\n        }\n        if (a == 34) {\n            return true;\n\
    \        }\n        if (a == 35) {\n            return true;\n        }\n    \
    \    if (a == 36) {\n            return true;\n        }\n        if (a == 37)\
    \ {\n            return true;\n        }\n        if (a == 38) {\n           \
    \ return true;\n        }\n        if (a == 39) {\n            return true;\n\
    \        }\n        if (a == 40) {\n            return true;\n        }\n    \
    \    if (a == 41) {\n            return true;\n        }\n        if (a == 42)\
    \ {\n            return true;\n        }\n        if (a == 43) {\n           \
    \ return true;\n        }\n        if (a == 44) {\n            return true;\n\
    \        }\n        if (a == 45) {\n            return true;\n        }\n    \
    \    if (a == 46) {\n            return true;\n        }\n        if (a == 47)\
    \ {\n            return true;\n        }\n        if (a == 48) {\n           \
    \ return true;\n        }\n        if (a == 49) {\n            return true;\n\
    \        }\n        if (a == 50) {\n            return true;\n        }\n    \
    \    if (a == 51) {\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxf0o6pai.java:176: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpxf0o6pai.java:176: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpxf0o6pai.java:176: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpxf0o6pai.java:176: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpxf0o6pai.java:176: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpxf0o6pai.java:187: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp030skkr_.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5nkbu48p.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0)\n         \
    \   return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n        else\n    \
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsm__siic.java:25: error: bad operand types for binary operator\
    \ '*'\n            return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n   \
    \                              ^\n  first type:  boolean\n  second type: boolean\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i * a * i == a).count();\n        return cube == a;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf60us5wy.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = a;\n        long c = b;\n\
    \        long d = c;\n        long e = d;\n        long f = e;\n        long g\
    \ = f;\n        long h = g;\n        long i = h;\n        long j = i;\n      \
    \  long k = j;\n        long l = k;\n        long m = l;\n        long n = m;\n\
    \        long o = n;\n        long p = o;\n        long q = p;\n        long r\
    \ = q;\n        long s = r;\n        long t = s;\n        long u = t;\n      \
    \  long v = u;\n        long w = v;\n        long x = w;\n        long y = x;\n\
    \        long z = y;\n        long a = z;\n        long b = a;\n        long c\
    \ = b;\n        long d = c;\n        long e = d;\n        long f = e;\n      \
    \  long g = f;\n        long h = g;\n        long i = h;\n        long j = i;\n\
    \        long k = j;\n        long l = k;\n        long m = l;\n        long n\
    \ = m;\n        long o = n;\n        long p = o;\n        long q = p;\n      \
    \  long r = q;\n        long s = r;\n        long t = s;\n        long u = t;\n\
    \        long v = u;\n        long w = v;\n        long x = w;\n        long y\
    \ = x;\n        long z = y;\n        long a = z;\n        long b = a;\n      \
    \  long c = b;\n        long d = c;\n        long e = d;\n        long f = e;\n\
    \        long g = f;\n        long h = g;\n        long i = h;\n        long j\
    \ = i;\n        long k = j;\n        long l = k;\n        long m = l;\n      \
    \  long n = m;\n        long o = n;\n        long p = o;\n        long q = p;\n\
    \        long r = q;\n        long s = r;\n        long t = s;\n        long u\
    \ = t;\n        long v = u;\n        long w = v;\n        long x = w;\n      \
    \  long y = x;\n        long z = y;\n        long a = z;\n        long b = a;\n\
    \        long c = b;\n        long d = c;\n        long e = d;\n        long f\
    \ = e;\n        long g = f;\n        long h = g;\n        long i = h;\n      \
    \  long j = i;\n        long k = j;\n        long l = k;\n        long m = l;\n\
    \        long n = m;\n        long o = n;\n        long p = o;\n        long q\
    \ = p;\n        long r = q;\n        long s = r;\n        long t = s;\n      \
    \  long u = t;\n\n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5emwe6q_.java:45: error: variable a is already defined in method\
    \ iscube(long)\n        long a = z;\n             ^\n/tmp/tmp5emwe6q_.java:46:\
    \ error: variable b is already defined in method iscube(long)\n        long b\
    \ = a;\n             ^\n/tmp/tmp5emwe6q_.java:47: error: variable c is already\
    \ defined in method iscube(long)\n        long c = b;\n             ^\n/tmp/tmp5emwe6q_.java:48:\
    \ error: variable d is already defined in method iscube(long)\n        long d\
    \ = c;\n             ^\n/tmp/tmp5emwe6q_.java:49: error: variable e is already\
    \ defined in method iscube(long)\n        long e = d;\n             ^\n/tmp/tmp5emwe6q_.java:50:\
    \ error: variable f is already defined in method iscube(long)\n        long f\
    \ = e;\n             ^\n/tmp/tmp5emwe6q_.java:51: error: variable g is already\
    \ defined in method iscube(long)\n        long g = f;\n             ^\n/tmp/tmp5emwe6q_.java:52:\
    \ error: variable h is already defined in method iscube(long)\n        long h\
    \ = g;\n             ^\n/tmp/tmp5emwe6q_.java:53: error: variable i is already\
    \ defined in method iscube(long)\n        long i = h;\n             ^\n/tmp/tmp5emwe6q_.java:54:\
    \ error: variable j is already defined in method iscube(long)\n        long j\
    \ = i;\n             ^\n/tmp/tmp5emwe6q_.java:55: error: variable k is already\
    \ defined in method iscube(long)\n        long k = j;\n             ^\n/tmp/tmp5emwe6q_.java:56:\
    \ error: variable l is already defined in method iscube(long)\n        long l\
    \ = k;\n             ^\n/tmp/tmp5emwe6q_.java:57: error: variable m is already\
    \ defined in method iscube(long)\n        long m = l;\n             ^\n/tmp/tmp5emwe6q_.java:58:\
    \ error: variable n is already defined in method iscube(long)\n        long n\
    \ = m;\n             ^\n/tmp/tmp5emwe6q_.java:59: error: variable o is already\
    \ defined in method iscube(long)\n        long o = n;\n             ^\n/tmp/tmp5emwe6q_.java:60:\
    \ error: variable p is already defined in method iscube(long)\n        long p\
    \ = o;\n             ^\n/tmp/tmp5emwe6q_.java:61: error: variable q is already\
    \ defined in method iscube(long)\n        long q = p;\n      "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a % 3 == 0) {\n            return true;\n        }\n \
    \       if (a % 5 == 0) {\n            return true;\n        }\n        if (a\
    \ % 7 == 0) {\n            return true;\n        }\n        return false;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4pwlj_cu.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5jyq1xq1.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 || a % 5 == 0 || a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9zx6ty7o.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptdeaxtvz.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0 && a < 9)\n\
    \            return true;\n        if (a > 9 && a < 99)\n            return true;\n\
    \        if (a > 99 && a < 999)\n            return true;\n        if (a > 999\
    \ && a < 9999)\n            return true;\n        if (a > 9999 && a < 99999)\n\
    \            return true;\n        if (a > 99999 && a < 999999)\n            return\
    \ true;\n        if (a > 999999 && a < 9999999)\n            return true;\n  \
    \      if (a > 9999999 && a < 99999999)\n            return true;\n        if\
    \ (a > 99999999 && a < 999999999)\n            return true;\n        if (a > 999999999\
    \ && a < 99999999999)\n            return true;\n        if (a > 99999999999 &&\
    \ a < 999999999999)\n            return true;\n        if (a > 999999999999 &&\
    \ a < 999999999999999)\n            return true;\n        if (a > 999999999999999\
    \ && a < 9999999999999999)\n            return true;\n        if (a > 9999999999999999\
    \ && a < 9999999999999999999)\n            return true;\n        if (a > 9999999999999999999\
    \ && a < 99999999999999999999)\n            return true;\n        if (a > 99999999999999999999\
    \ && a < 99999999999999999999999)\n            return true;\n        if (a > 99999999999999999999999\
    \ && a < 999999999999999999999999)\n            return true;\n        if (a >\
    \ 999999999999999999999999 && a < 999999999999999999999999999)\n            return\
    \ true;\n        if (a > 999999999999999999999999999 && a < 9999999999999999999999999999)\n\
    \            return true;\n        if (a > 9999999999999999999999999999 && a <\
    \ 9999999999999999999999999999999)\n            return true;\n        if (a >\
    \ 9999999999999999999999999999999 && a < 99999999999999999999999999999999)\n \
    \           return true;\n        if (a > 99999999999999999999999999999999 &&\
    \ a < 9999999999999999999999999999999)\n            return true;\n        if (a\
    \ > 9999999999999999999999999999999 && a < 99999999999999999999999999999999999)\n\
    \            return true;\n        if (a > 99999999999999999999999999999999999\
    \ && a < 999999999999999999999999999999999999)\n            return true;\n   \
    \     if (a > 99999999999999999999999999999999999 && a < 999999999999999999999999999999999999999)\n\
    \            return true;\n        if (a > \n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzch3y9fo.java:42: error: integer number too large: 99999999999\n\
    \        if (a > 999999999 && a < 99999999999)\n                             \
    \    ^\n/tmp/tmpzch3y9fo.java:44: error: integer number too large: 99999999999\n\
    \        if (a > 99999999999 && a < 999999999999)\n                ^\n/tmp/tmpzch3y9fo.java:44:\
    \ error: integer number too large: 999999999999\n        if (a > 99999999999 &&\
    \ a < 999999999999)\n                                   ^\n/tmp/tmpzch3y9fo.java:46:\
    \ error: integer number too large: 999999999999\n        if (a > 999999999999\
    \ && a < 999999999999999)\n                ^\n/tmp/tmpzch3y9fo.java:46: error:\
    \ integer number too large: 999999999999999\n        if (a > 999999999999 && a\
    \ < 999999999999999)\n                                    ^\n/tmp/tmpzch3y9fo.java:48:\
    \ error: integer number too large: 999999999999999\n        if (a > 999999999999999\
    \ && a < 9999999999999999)\n                ^\n/tmp/tmpzch3y9fo.java:48: error:\
    \ integer number too large: 9999999999999999\n        if (a > 999999999999999\
    \ && a < 9999999999999999)\n                                       ^\n/tmp/tmpzch3y9fo.java:50:\
    \ error: integer number too large: 9999999999999999\n        if (a > 9999999999999999\
    \ && a < 9999999999999999999)\n                ^\n/tmp/tmpzch3y9fo.java:50: error:\
    \ integer number too large: 9999999999999999999\n        if (a > 9999999999999999\
    \ && a < 9999999999999999999)\n                                        ^\n/tmp/tmpzch3y9fo.java:52:\
    \ error: integer number too large: 9999999999999999999\n        if (a > 9999999999999999999\
    \ && a < 99999999999999999999)\n                ^\n/tmp/tmpzch3y9fo.java:52: error:\
    \ integer number too large: 99999999999999999999\n        if (a > 9999999999999999999\
    \ && a < 99999999999999999999)\n                                           ^\n\
    /tmp/tmpzch3y9fo.java:54: error: integer number too large: 99999999999999999999\n\
    \        if (a > 99999999999999999999 && a < 99999999999999999999999)\n      \
    \          ^\n/tmp/tmpzch3y9fo.java:54: error: integer number too large: 99999999999999999999999\n\
    \        if (a > 999999999999"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        long b = 1;\n        long c = 1;\n        long d = 1;\n        long e\
    \ = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n      \
    \  long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n\
    \        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        long A\
    \ = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n      \
    \  long E = 1;\n        long F = 1;\n        long G = 1;\n        long H = 1;\n\
    \        long I = 1;\n        long J = 1;\n        long K = 1;\n        long L\
    \ = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n      \
    \  long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S = 1;\n\
    \        long T = 1;\n        long U = 1;\n        long V = 1;\n        long W\
    \ = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n      \
    \  long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long AD =\
    \ 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n     \
    \   long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long AK\
    \ = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n   \
    \     long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long AR\
    \ = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n   \
    \     long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long AY\
    \ = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n   \
    \     long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long BF\
    \ = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n   \
    \     long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long BM\
    \ = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n   \
    \     long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long BT\
    \ = 1;\n        long BU = 1;\n        long BV = 1;\n        long B\n    }\n  \
    \  public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5t02aqmo.java:121: error: ';' expected\n        long B\n      \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 0) {\n            return true;\n        }\n     \
    \   if (a % 3 == 0) {\n            return true;\n        }\n        if (a % 5\
    \ == 0) {\n            return true;\n        }\n        return false;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyoay0rg8.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i * i * i == a).count();\n        return cube == 1;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphybjwtfn.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        long\
    \ b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n    \
    \    long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long aa = 1;\n     \
    \   long ab = 1;\n        long ac = 1;\n        long ad = 1;\n        long ae\
    \ = 1;\n        long af = 1;\n        long ag = 1;\n        long ah = 1;\n   \
    \     long ai = 1;\n        long aj = 1;\n        long ak = 1;\n        long al\
    \ = 1;\n        long am = 1;\n        long an = 1;\n        long ao = 1;\n   \
    \     long ap = 1;\n        long aq = 1;\n        long ar = 1;\n        long as\
    \ = 1;\n        long at = 1;\n        long au = 1;\n        long av = 1;\n   \
    \     long aw = 1;\n        long ax = 1;\n        long ay = 1;\n        long az\
    \ = 1;\n        long ba = 1;\n        long bb = 1;\n        long bc = 1;\n   \
    \     long bd = 1;\n        long be = 1;\n        long bf = 1;\n        long bg\
    \ = 1;\n        long bh = 1;\n        long bi = 1;\n        long bj = 1;\n   \
    \     long bk = 1;\n        long bl = 1;\n        long bm = 1;\n        long bn\
    \ = 1;\n        long bo = 1;\n        long bp = 1;\n        long bq = 1;\n   \
    \     long br = 1;\n        long bs = 1;\n        long bt1 = 1;\n        long\
    \ bt2 = 1;\n        long bt3 = 1;\n        long bt4 = 1;\n        long bt5 = 1;\n\
    \        long bt6 = 1;\n        long bt7 = 1;\n        long bt8 = 1;\n       \
    \ long bt9 = 1;\n        long bt10 = 1;\n        long bt11 = 1;\n        long\
    \ bt12 = 1;\n        long bt13 = 1;\n        long bt14 = 1;\n        long bt15\
    \ = 1;\n        long bt16 = 1;\n        long bt17 = 1;\n        long bt18 = 1;\n\
    \        long bt19 = 1;\n        long bt20 = 1;\n        long bt21 = 1;\n    \
    \    long bt22 = 1;\n        long bt23 = 1;\n        long bt24 = 1;\n        long\
    \ bt25 = 1;\n\n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprlo_0eb2.java:117: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 && a % 5 == 0 && a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp245qw1_h.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        long b = 1;\n        long c = 1;\n        long d = 1;\n        long e\
    \ = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n      \
    \  long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n\
    \        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        long A\
    \ = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n      \
    \  long E = 1;\n        long F = 1;\n        long G = 1;\n        long H = 1;\n\
    \        long I = 1;\n        long J = 1;\n        long K = 1;\n        long L\
    \ = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n      \
    \  long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S = 1;\n\
    \        long T = 1;\n        long U = 1;\n        long V = 1;\n        long W\
    \ = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n      \
    \  long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long AD =\
    \ 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n     \
    \   long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long AK\
    \ = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n   \
    \     long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long AR\
    \ = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n   \
    \     long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long AY\
    \ = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n   \
    \     long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long BF\
    \ = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n   \
    \     long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long BM\
    \ = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n   \
    \     long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long BT\
    \ = 1;\n        long BU = 1;\n        long BV = 1;\n        long B\n    }\n  \
    \  public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptzt8rz3a.java:121: error: ';' expected\n        long B\n      \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a) == 1;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqconcnj_.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a > 1000000000000L) {\n            return false;\n   \
    \     }\n        if (a % 3 == 0) {\n            return true;\n        }\n    \
    \    return false;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n   \
    \ assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n   \
    \ assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoegzfl_8.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        return\
    \ cube == a && cube % a == 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpojjx15sl.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long aa = 1;\n        long ab = 1;\n    \
    \    long ac = 1;\n        long ad = 1;\n        long ae = 1;\n        long af\
    \ = 1;\n        long ag = 1;\n        long ah = 1;\n        long ai = 1;\n   \
    \     long aj = 1;\n        long ak = 1;\n        long al = 1;\n        long am\
    \ = 1;\n        long an = 1;\n        long ao = 1;\n        long ap = 1;\n   \
    \     long aq = 1;\n        long ar = 1;\n        long as = 1;\n        long at\
    \ = 1;\n        long au = 1;\n        long av = 1;\n        long aw = 1;\n   \
    \     long ax = 1;\n        long ay = 1;\n        long az = 1;\n        long aaa\
    \ = 1;\n        long aab = 1;\n        long aac = 1;\n        long aad = 1;\n\
    \        long aae = 1;\n        long aaf = 1;\n        long aag = 1;\n       \
    \ long aah = 1;\n        long aai = 1;\n        long aaj = 1;\n        long aak\
    \ = 1;\n        long aal = 1;\n        long aam = 1;\n        long aan = 1;\n\
    \        long aao = 1;\n        long ap1 = 1;\n        long aq1 = 1;\n       \
    \ long ar1 = 1;\n        long as1 = 1;\n        long at1 = 1;\n        long au1\
    \ = 1;\n        long av1 = 1;\n        long aw\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdwtokikl.java:119: error: ';' expected\n        long aw\n     \
    \          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5d0zon42.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a % 3 == 0) {\n            return true;\n        }\n \
    \       return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6exzbsv1.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4wluapdq.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = a;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long a = 1;\n        long b = 1;\n        long c\
    \ = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n      \
    \  long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n      \
    \  long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n\
    \        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_wmzdj0x.java:122: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp_wmzdj0x.java:122: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp61org_b6.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9_d8dwoz.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a) == 1;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt97vrnjv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a % 2 == 0) {\n            return true;\n        }\n \
    \       long b = 1;\n        long c = a;\n        while (c > 0) {\n          \
    \  if (c % 2 == 0) {\n                b = b * c;\n            }\n            c\
    \ = c / 2;\n        }\n        if (a == b) {\n            return true;\n     \
    \   }\n        return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpajct487p.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        long\
    \ b = a%a;\n        long c = a%b;\n        long d = a%c;\n        long e = a%d;\n\
    \        long f = a%e;\n        long g = a%f;\n        long h = a%g;\n       \
    \ long i = a%h;\n        long j = a%i;\n        long k = a%j;\n        long l\
    \ = a%k;\n        long m = a%l;\n        long n = a%m; \n        long o = a%n;\n\
    \        long p = a%o;\n        long q = a%p;\n        long r = a%q;\n       \
    \ long s = a%r;\n        long t = a%s;\n        long u = a%t;\n        long v\
    \ = a%u;\n        long w = a%v;\n        long x = a%w;\n        long y = a%x;\n\
    \        long z = a%y;\n        long a = a%z;\n        long b = a%a;\n       \
    \ long c = a%b;\n        long d = a%d;\n        long e = a%e;\n        long f\
    \ = a%f;\n        long g = a%g;\n        long h = a%h;\n        long i = a%i;\n\
    \        long j = a%j;\n        long k = a%k;\n        long l = a%l;\n       \
    \ long m = a%m;\n        long n = a%n;\n        long o = a%o;\n        long p\
    \ = a%p;\n        long q = a%q;\n        long r = a%r;\n        long s = a%s;\n\
    \        long t = a%t;\n        long u = a%u;\n        long v = a%v;\n       \
    \ long w = a%w;\n        long x = a%x;\n        long y = a%y;\n        long z\
    \ = a%z;\n        long a = a%a;\n        long b = a%b;\n        long c = a%c;\n\
    \        long d = a%d;\n        long e = a%e;\n        long f = a%f;\n       \
    \ long g = a%g;\n        long h = a%h;\n        long i = a%i;\n        long j\
    \ = a%j;\n        long k = a%k;\n        long l = a%l;\n        long m = a%m;\n\
    \        long n = a%n;\n        long o = a%o;\n        long p = a%p;\n       \
    \ long q = a%q;\n        long r = a%r;\n        long s = a%s;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjquwgpnr.java:46: error: variable a is already defined in method\
    \ iscube(long)\n        long a = a%z;\n             ^\n/tmp/tmpjquwgpnr.java:47:\
    \ error: variable b is already defined in method iscube(long)\n        long b\
    \ = a%a;\n             ^\n/tmp/tmpjquwgpnr.java:48: error: variable c is already\
    \ defined in method iscube(long)\n        long c = a%b;\n             ^\n/tmp/tmpjquwgpnr.java:49:\
    \ error: variable d is already defined in method iscube(long)\n        long d\
    \ = a%d;\n             ^\n/tmp/tmpjquwgpnr.java:50: error: variable e is already\
    \ defined in method iscube(long)\n        long e = a%e;\n             ^\n/tmp/tmpjquwgpnr.java:51:\
    \ error: variable f is already defined in method iscube(long)\n        long f\
    \ = a%f;\n             ^\n/tmp/tmpjquwgpnr.java:52: error: variable g is already\
    \ defined in method iscube(long)\n        long g = a%g;\n             ^\n/tmp/tmpjquwgpnr.java:53:\
    \ error: variable h is already defined in method iscube(long)\n        long h\
    \ = a%h;\n             ^\n/tmp/tmpjquwgpnr.java:54: error: variable i is already\
    \ defined in method iscube(long)\n        long i = a%i;\n             ^\n/tmp/tmpjquwgpnr.java:55:\
    \ error: variable j is already defined in method iscube(long)\n        long j\
    \ = a%j;\n             ^\n/tmp/tmpjquwgpnr.java:56: error: variable k is already\
    \ defined in method iscube(long)\n        long k = a%k;\n             ^\n/tmp/tmpjquwgpnr.java:57:\
    \ error: variable l is already defined in method iscube(long)\n        long l\
    \ = a%l;\n             ^\n/tmp/tmpjquwgpnr.java:58: error: variable m is already\
    \ defined in method iscube(long)\n        long m = a%m;\n             ^\n/tmp/tmpjquwgpnr.java:59:\
    \ error: variable n is already defined in method iscube(long)\n        long n\
    \ = a%n;\n             ^\n/tmp/tmpjquwgpnr.java:60: error: variable o is already\
    \ defined in method iscube(long)\n        long o = a%o;\n             ^\n/tmp/tmpjquwgpnr.java:61:\
    \ error: variable p is already defined in method iscube(long)\n        long p\
    \ = a%p;\n             ^\n/tmp/tmpjquwgpnr.java:62: error: variable q is already\
    \ defined in method iscube("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a % 3 == 0) {\n            return true;\n        }\n \
    \       if (a % 5 == 0) {\n            return true;\n        }\n        if (a\
    \ % 7 == 0) {\n            return true;\n        }\n        return false;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqpraq87.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0) {\n            return false;\n        }\n        return true;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc4_hjk0d.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsauusjw3.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6xbjb4dc.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 || a % 5 == 0 || a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx2nlr8j.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0)\n            return true;\n\
    \        if (a % 2 == 0)\n            return false;\n        if (a % 3 == 0)\n\
    \            return true;\n        if (a % 5 == 0)\n            return false;\n\
    \        if (a % 7 == 0)\n            return true;\n        if (a % 11 == 0)\n\
    \            return false;\n        if (a % 13 == 0)\n            return true;\n\
    \        if (a % 17 == 0)\n            return false;\n        if (a % 19 == 0)\n\
    \            return true;\n        if (a % 23 == 0)\n            return false;\n\
    \        if (a % 29 == 0)\n            return true;\n        if (a % 31 == 0)\n\
    \            return false;\n        if (a % 37 == 0)\n            return true;\n\
    \        if (a % 41 == 0)\n            return false;\n        if (a % 43 == 0)\n\
    \            return true;\n        if (a % 47 == 0)\n            return false;\n\
    \        if (a % 53 == 0)\n            return true;\n        if (a % 59 == 0)\n\
    \            return false;\n        if (a % 61 == 0)\n            return true;\n\
    \        if (a % 67 == 0)\n            return false;\n        if (a % 71 == 0)\n\
    \            return true;\n        if (a % 73 == 0)\n            return false;\n\
    \        if (a % 79 == 0)\n            return true;\n        if (a % 83 == 0)\n\
    \            return false;\n        if (a % 89 == 0)\n            return true;\n\
    \        if (a % 97 == 0)\n            return false;\n        if (a % 101 == 0)\n\
    \            return true;\n        if (a % 103 == 0)\n            return false;\n\
    \        if (a % 107 == 0)\n            return true;\n        if (a % 111 == 0)\n\
    \            return false;\n        if (a % 113 == 0)\n            return true;\n\
    \        if (a % 117 == 0)\n            return false;\n        if (a % 121 ==\
    \ 0)\n            return true;\n        if (a % 123 == 0)\n            return\
    \ false;\n        if (a % 127 == 0)\n            return true;\n        if (a %\
    \ 131 == 0)\n            return false;\n        if (a % 133 == 0)\n          \
    \  return true;\n        if (a % 137 == 0)\n            return false;\n      \
    \  if (a % 141 == 0)\n            return true;\n        if (a % 143 == 0)\n  \
    \          return false;\n        if (a % 147 == 0)\n            return true;\n\
    \        if (a % 151 == 0)\n            return false;\n        if (a % 153 ==\
    \ 0)\n            return true;\n        if (a % 157 == 0)\n            return\
    \ false;\n        if (a % 161 == 0)\n            return true;\n        if (a %\
    \ 163 == 0)\n            return false;\n        if (a % 167 == 0)\n          \
    \  return true;\n        if (a % 171 == 0)\n            return false;\n      \
    \  if (a % 173 == 0)\n            return true;\n        if (a % 177 == 0)\n  \
    \          return false;\n        if (a % 181 == 0)\n            return true;\n\
    \        if (a % 183 == 0)\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk0zb6rim.java:123: error: illegal start of statement\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0)\n         \
    \   return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp35lypywo.java:25: error: bad operand types for binary operator\
    \ '*'\n            return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n   \
    \                              ^\n  first type:  boolean\n  second type: boolean\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpru00e6sj.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a > 1000) {\n            return false;\n        }\n  \
    \      if (a % 3 == 0) {\n            return true;\n        }\n        return\
    \ false;\n\n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7obfgijh.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        if\
    \ (a==1) return true;\n        if (a==2) return true;\n        if (a==3) return\
    \ true;\n        if (a==4) return true;\n        if (a==5) return true;\n    \
    \    if (a==6) return true;\n        if (a==7) return true;\n        if (a==8)\
    \ return true;\n        if (a==9) return true;\n        if (a==10) return true;\n\
    \        if (a==11) return true;\n        if (a==12) return true;\n        if\
    \ (a==13) return true;\n        if (a==14) return true;\n        if (a==15) return\
    \ true;\n        if (a==16) return true;\n        if (a==17) return true;\n  \
    \      if (a==18) return true;\n        if (a==19) return true;\n        if (a==20)\
    \ return true;\n        if (a==21) return true;\n        if (a==22) return true;\n\
    \        if (a==23) return true;\n        if (a==24) return true;\n        if\
    \ (a==25) return true;\n        if (a==26) return true;\n        if (a==27) return\
    \ true;\n        if (a==28) return true;\n        if (a==29) return true;\n  \
    \      if (a==30) return true;\n        if (a==31) return true;\n        if (a==32)\
    \ return true;\n        if (a==33) return true;\n        if (a==34) return true;\n\
    \        if (a==35) return true;\n        if (a==36) return true;\n        if\
    \ (a==37) return true;\n        if (a==38) return true;\n        if (a==39) return\
    \ true;\n        if (a==40) return true;\n        if (a==41) return true;\n  \
    \      if (a==42) return true;\n        if (a==43) return true;\n        if (a==44)\
    \ return true;\n        if (a==45) return true;\n        if (a==46) return true;\n\
    \        if (a==47) return true;\n        if (a==48) return true;\n        if\
    \ (a==49) return true;\n        if (a==50) return true;\n        if (a==51) return\
    \ true;\n        if (a==52) return true;\n        if (a==53) return true;\n  \
    \      if (a==54) return true;\n        if (a==55) return true;\n        if (a==56)\
    \ return true;\n        if (a==57) return true;\n        if (a==58) return true;\n\
    \        if (a==59) return true;\n        if (a==60) return true;\n        if\
    \ (a==61) return true;\n        if (a==62) return true;\n        if (a==63) return\
    \ true;\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp68csakd2.java:89)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a > 1000000000000L) {\n            return false;\n   \
    \     }\n        if (a % 3 == 0) {\n            return true;\n        }\n    \
    \    return false;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n   \
    \ assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n   \
    \ assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppcs12itz.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplu2wqyrv.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        long b = 1;\n        long c = 1;\n        long d = 1;\n  \
    \      long e = 1;\n        long f = 1;\n        long g = 1;\n        long h =\
    \ 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long\
    \ l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n    \
    \    long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long \n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxzu519gg.java:122: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpxzu519gg.java:122: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkmid7b4k.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 1) {\n            return true;\n        }\n     \
    \   if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n\
    \            return true;\n        }\n        if (a == 4) {\n            return\
    \ true;\n        }\n        if (a == 5) {\n            return true;\n        }\n\
    \        if (a == 6) {\n            return true;\n        }\n        if (a ==\
    \ 7) {\n            return true;\n        }\n        if (a == 8) {\n         \
    \   return true;\n        }\n        if (a == 9) {\n            return true;\n\
    \        }\n        if (a == 10) {\n            return true;\n        }\n    \
    \    if (a == 11) {\n            return true;\n        }\n        if (a == 12)\
    \ {\n            return true;\n        }\n        if (a == 13) {\n           \
    \ return true;\n        }\n        if (a == 14) {\n            return true;\n\
    \        }\n        if (a == 15) {\n            return true;\n        }\n    \
    \    if (a == 16) {\n            return true;\n        }\n        if (a == 17)\
    \ {\n            return true;\n        }\n        if (a == 18) {\n           \
    \ return true;\n        }\n        if (a == 19) {\n            return true;\n\
    \        }\n        if (a == 20) {\n            return true;\n        }\n    \
    \    if (a == 21) {\n            return true;\n        }\n        if (a == 22)\
    \ {\n            return true;\n        }\n        if (a == 23) {\n           \
    \ return true;\n        }\n        if (a == 24) {\n            return true;\n\
    \        }\n        if (a == 25) {\n            return true;\n        }\n    \
    \    if (a == 26) {\n            return true;\n        }\n        if (a == 27)\
    \ {\n            return true;\n        }\n        if (a == 28) {\n           \
    \ return true;\n        }\n        if (a == 29) {\n            return true;\n\
    \        }\n        if (a == 30) {\n            return true;\n        }\n    \
    \    if (a == 31) {\n            return true;\n        }\n        if (a == 32)\
    \ {\n            return true;\n        }\n        if (a == 33) {\n           \
    \ return true;\n        }\n        if (a == 34) {\n            return true;\n\
    \        }\n        if (a == 35) {\n            return true;\n        }\n    \
    \    if (a == 36) {\n            return true;\n        }\n        if (a == 37)\
    \ {\n            return true;\n        }\n        if (a == 38) {\n           \
    \ return true;\n        }\n        if (a == 39) {\n            return true;\n\
    \        }\n        if (a == 40) {\n            return true;\n        }\n    \
    \    if (a == 41) {\n            return true;\n        }\n        if (a == 42)\
    \ {\n            return true;\n        }\n        if (a == 43) {\n           \
    \ return true;\n        }\n        if (a == 44) {\n            return true;\n\
    \        }\n        if (a == 45) {\n            return true;\n        }\n    \
    \    if (a == 46) {\n            return true;\n        }\n        if (a == 47)\
    \ {\n            return true;\n        }\n        if (a == 48) {\n           \
    \ return true;\n        }\n        if (a == 49) {\n            return true;\n\
    \        }\n        if (a == 50) {\n            return true;\n        }\n    \
    \    if (a == 51) {\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppi8k9zk5.java:176: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmppi8k9zk5.java:176: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmppi8k9zk5.java:176: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmppi8k9zk5.java:176: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmppi8k9zk5.java:176: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmppi8k9zk5.java:187: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a==0) return true;\n        if\
    \ (a==1) return true;\n        if (a==2) return true;\n        if (a==3) return\
    \ true;\n        if (a==4) return true;\n        if (a==5) return true;\n    \
    \    if (a==6) return true;\n        if (a==7) return true;\n        if (a==8)\
    \ return true;\n        if (a==9) return true;\n        if (a==10) return true;\n\
    \        if (a==11) return true;\n        if (a==12) return true;\n        if\
    \ (a==13) return true;\n        if (a==14) return true;\n        if (a==15) return\
    \ true;\n        if (a==16) return true;\n        if (a==17) return true;\n  \
    \      if (a==18) return true;\n        if (a==19) return true;\n        if (a==20)\
    \ return true;\n        if (a==21) return true;\n        if (a==22) return true;\n\
    \        if (a==23) return true;\n        if (a==24) return true;\n        if\
    \ (a==25) return true;\n        if (a==26) return true;\n        if (a==27) return\
    \ true;\n        if (a==28) return true;\n        if (a==29) return true;\n  \
    \      if (a==30) return true;\n        if (a==31) return true;\n        if (a==32)\
    \ return true;\n        if (a==33) return true;\n        if (a==34) return true;\n\
    \        if (a==35) return true;\n        if (a==36) return true;\n        if\
    \ (a==37) return true;\n        if (a==38) return true;\n        if (a==39) return\
    \ true;\n        if (a==40) return true;\n        if (a==41) return true;\n  \
    \      if (a==42) return true;\n        if (a==43) return true;\n        if (a==44)\
    \ return true;\n        if (a==45) return true;\n        if (a==46) return true;\n\
    \        if (a==47) return true;\n        if (a==48) return true;\n        if\
    \ (a==49) return true;\n        if (a==50) return true;\n        if (a==51) return\
    \ true;\n        if (a==52) return true;\n        if (a==53) return true;\n  \
    \      if (a==54) return true;\n        if (a==55) return true;\n        if (a==56)\
    \ return true;\n        if (a==57) return true;\n        if (a==58) return true;\n\
    \        if (a==59) return true;\n        if (a==60) return true;\n        if\
    \ (a==61) return true;\n        if (a==62) return true;\n        if (a==63) return\
    \ true;\n        if (a==64) return true;\n        if (a==65) return true;\n  \
    \      if (a==66) return true;\n        if (a==67) return true;\n        if (a==68)\
    \ return true;\n        if (a==69) return true;\n        if (a==70) return true;\n\
    \        if (a==71) return true;\n        if (a==\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1kfn007h.java:93: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp1kfn007h.java:94: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp1kfn007h.java:94: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp1kfn007h.java:94:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp1kfn007h.java:94: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp1kfn007h.java:94:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp1kfn007h.java:105: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i * a * i == a).count();\n        return cube == 1;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx42ub8ay.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 0) {\n            return true;\n        }\n     \
    \   if (a > 0 && a < 9) {\n            return true;\n        }\n        if (a\
    \ > 9 && a < 27) {\n            return true;\n        }\n        if (a > 27 &&\
    \ a < 49) {\n            return true;\n        }\n        if (a > 49 && a < 81)\
    \ {\n            return true;\n        }\n        if (a > 81 && a < 121) {\n \
    \           return true;\n        }\n        if (a > 121 && a < 181) {\n     \
    \       return true;\n        }\n        if (a > 181 && a < 273) {\n         \
    \   return true;\n        }\n        if (a > 273 && a < 493) {\n            return\
    \ true;\n        }\n        if (a > 493 && a < 823) {\n            return true;\n\
    \        }\n        if (a > 823 && a < 1223) {\n            return true;\n   \
    \     }\n        if (a > 1223 && a < 1823) {\n            return true;\n     \
    \   }\n        if (a > 1823 && a < 2733) {\n            return true;\n       \
    \ }\n        if (a > 2733 && a < 4933) {\n            return true;\n        }\n\
    \        if (a > 4933 && a < 8231) {\n            return true;\n        }\n  \
    \      if (a > 8231 && a < 12231) {\n            return true;\n        }\n   \
    \     if (a > 12231 && a < 18231) {\n            return true;\n        }\n   \
    \     if (a > 18231 && a < 27331) {\n            return true;\n        }\n   \
    \     if (a > 27331 && a < 49331) {\n            return true;\n        }\n   \
    \     if (a > 49331 && a < 82311) {\n            return true;\n        }\n   \
    \     if (a > 82311 && a < 122311) {\n            return true;\n        }\n  \
    \      if (a > 122311 && a < 182311) {\n            return true;\n        }\n\
    \        if (a > 182311 && a < 273311) {\n            return true;\n        }\n\
    \        if (a > 273311 && a < 493311) {\n            return true;\n        }\n\
    \        if (a > 493311 && a < 823111) {\n            return true;\n        }\n\
    \        if (a > 823111 && a < 1223111) {\n            return true;\n        }\n\
    \        if (a > 1223111 && a < 1823111) {\n            return true;\n       \
    \ }\n        if (a > 1823111 && a < 2733111) {\n            return true;\n   \
    \     }\n        if (a > 2733111 && a < 4933111) {\n            return true;\n\
    \        }\n        if (a > 4933111 && a < 8231111) {\n    }\n    public static\
    \ void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqd9qwew.java:112: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpgqd9qwew.java:112: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpgqd9qwew.java:112: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpgqd9qwew.java:112: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpgqd9qwew.java:112: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpgqd9qwew.java:123: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long aa = 1;\n        long ab = 1;\n        long\
    \ ac = 1;\n        long ad = 1;\n        long ae = 1;\n        long af = 1;\n\
    \        long ag = 1;\n        long ah = 1;\n        long ai = 1;\n        long\
    \ aj = 1;\n        long ak = 1;\n        long al = 1;\n        long am = 1;\n\
    \        long an = 1;\n        long ao = 1;\n        long ap = 1;\n        long\
    \ aq = 1;\n        long ar = 1;\n        long as = 1;\n        long at = 1;\n\
    \        long au = 1;\n        long av = 1;\n        long aw = 1;\n        long\
    \ ax = 1;\n        long ay = 1;\n        long az = 1;\n        long ba = 1;\n\
    \        long bb = 1;\n        long bc = 1;\n        long bd = 1;\n        long\
    \ be = 1;\n        long bf = 1;\n        long bg = 1;\n        long bh = 1;\n\
    \        long bi = 1;\n        long bj = 1;\n        long bk = 1;\n        long\
    \ bl = 1;\n        long bm = 1;\n        long bn = 1;\n        long bo = 1;\n\
    \        long bp = 1;\n        long bq = 1;\n        long br = 1;\n        long\
    \ bs = 1;\n        long bt = 1;\n        long bu = 1;\n        long bv = 1;\n\
    \        long bw = 1;\n        long bx = 1;\n        long by = 1;\n        long\
    \ bz = 1;\n        long ca = 1;\n        long cb = 1;\n        long cc = 1;\n\
    \        long cd = 1;\n        long ce = 1;\n        long cf = 1;\n        long\
    \ cg = 1;\n        long ch = 1;\n        long ci = 1;\n        long cj = 1;\n\
    \        long ck = 1;\n        long cl = 1;\n        long cm = 1;\n        long\
    \ cn = 1;\n        long co = 1;\n        long cp = 1;\n        long cq = 1;\n\
    \        long cr = 1;\n        long cs = 1;\n        long ct = 1;\n        long\
    \ cu = 1;\n        long cv = 1;\n        long cw = 1;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplms3c9z6.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0)\n         \
    \   return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp41kt61ig.java:25: error: bad operand types for binary operator\
    \ '*'\n            return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n   \
    \                              ^\n  first type:  boolean\n  second type: boolean\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_c0sog5c.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == (long) Math.pow(cube, 3)) {\n            return true;\n        }\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdwjgulwe.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3pxr7b7.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyi3gpj7b.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 0) {\n            return true;\n        }\n     \
    \   if (a % 3 == 0) {\n            return true;\n        }\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgmfos7bw.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0)\n            return false;\n        else\n            return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jdeimnl.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmn61bvgl.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 0) {\n            return true;\n        }\n     \
    \   if (a > 0 && a < 9) {\n            return true;\n        }\n        if (a\
    \ > 9 && a < 99) {\n            return true;\n        }\n        if (a > 99 &&\
    \ a < 999) {\n            return true;\n        }\n        if (a > 999 && a <\
    \ 9999) {\n            return true;\n        }\n        if (a > 9999 && a < 99999)\
    \ {\n            return true;\n        }\n        if (a > 99999 && a < 999999)\
    \ {\n            return true;\n        }\n        if (a > 999999 && a < 9999999)\
    \ {\n            return true;\n        }\n        if (a > 9999999 && a < 99999999)\
    \ {\n            return true;\n        }\n        if (a > 99999999 && a < 999999999)\
    \ {\n            return true;\n        }\n        if (a > 999999999 && a < 9999999999)\
    \ {\n            return true;\n        }\n        if (a > 9999999999 && a < 99999999999)\
    \ {\n            return true;\n        }\n        if (a > 99999999999 && a < 999999999999)\
    \ {\n            return true;\n        }\n        if (a > 999999999999 && a <\
    \ 999999999999) {\n            return true;\n        }\n        if (a > 999999999999\
    \ && a < 999999999999) {\n            return true;\n        }\n        if (a >\
    \ 999999999999 && a < 999999999999) {\n            return true;\n        }\n \
    \       if (a > 999999999999 && a < 999999999999) {\n            return true;\n\
    \        }\n        if (a > 999999999999 && a < 999999999999) {\n            return\
    \ true;\n        }\n        if (a > 999999999999 && a < 999999999999) {\n    \
    \        return true;\n        }\n        if (a > 999999999999 && a < 999999999999)\
    \ {\n            return true;\n        }\n        if (a > 999999999999 && a <\
    \ 999999999999) {\n            return true;\n        }\n        if (a > 999999999999\
    \ && a < 999999999999) {\n            return true;\n        }\n        if (a >\
    \ 999999999999 && a < 999999999999) {\n            return true;\n        }\n \
    \       if (a > 999999999999 && a < 999999999999) {\n            return true;\n\
    \        }\n        if (a > 999999999999 && a < 999999999999) {\n            return\
    \ true;\n        }\n        if (a > 999999999999 && a < 999999999999) {\n    \
    \        return true;\n        }\n        if (a > 999999999999 && a < 999999999999)\
    \ {\n            return true;\n        }\n        if (a > 999999999999 && a <\
    \ 999999999999) {\n            return true;\n        }\n        if (a > 999999999999\
    \ && a < 999999999999) {\n            return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgm6fq31.java:53: error: integer number too large: 9999999999\n\
    \        if (a > 999999999 && a < 9999999999) {\n                            \
    \     ^\n/tmp/tmpsgm6fq31.java:56: error: integer number too large: 9999999999\n\
    \        if (a > 9999999999 && a < 99999999999) {\n                ^\n/tmp/tmpsgm6fq31.java:56:\
    \ error: integer number too large: 99999999999\n        if (a > 9999999999 &&\
    \ a < 99999999999) {\n                                  ^\n/tmp/tmpsgm6fq31.java:59:\
    \ error: integer number too large: 99999999999\n        if (a > 99999999999 &&\
    \ a < 999999999999) {\n                ^\n/tmp/tmpsgm6fq31.java:59: error: integer\
    \ number too large: 999999999999\n        if (a > 99999999999 && a < 999999999999)\
    \ {\n                                   ^\n/tmp/tmpsgm6fq31.java:62: error: integer\
    \ number too large: 999999999999\n        if (a > 999999999999 && a < 999999999999)\
    \ {\n                ^\n/tmp/tmpsgm6fq31.java:62: error: integer number too large:\
    \ 999999999999\n        if (a > 999999999999 && a < 999999999999) {\n        \
    \                            ^\n/tmp/tmpsgm6fq31.java:65: error: integer number\
    \ too large: 999999999999\n        if (a > 999999999999 && a < 999999999999) {\n\
    \                ^\n/tmp/tmpsgm6fq31.java:65: error: integer number too large:\
    \ 999999999999\n        if (a > 999999999999 && a < 999999999999) {\n        \
    \                            ^\n/tmp/tmpsgm6fq31.java:68: error: integer number\
    \ too large: 999999999999\n        if (a > 999999999999 && a < 999999999999) {\n\
    \                ^\n/tmp/tmpsgm6fq31.java:68: error: integer number too large:\
    \ 999999999999\n        if (a > 999999999999 && a < 999999999999) {\n        \
    \                            ^\n/tmp/tmpsgm6fq31.java:71: error: integer number\
    \ too large: 999999999999\n        if (a > 999999999999 && a < 999999999999) {\n\
    \                ^\n/tmp/tmpsgm6fq31.java:71: error: integer number too large:\
    \ 999999999999\n        if (a > 999999999999 && a < 999999999999) {\n        \
    \                            ^\n/tmp/tmpsgm6fq31.java:74: error: integer number\
    \ too large: 999999999999\n        if (a >"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 0) {\n            return true;\n        }\n     \
    \   if (a % 3 == 0) {\n            return true;\n        }\n        return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuipsgemx.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpub4nxlre.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        long b = 1;\n        long c = 1;\n        long d = 1;\n  \
    \      long e = 1;\n        long f = 1;\n        long g = 1;\n        long h =\
    \ 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long\
    \ l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n    \
    \    long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long a = 1;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n\
    \        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h\
    \ = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n      \
    \  long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long a = 1;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n      \
    \  long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n\
    \        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o\
    \ = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n\
    \        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z\
    \ = 1;\n        long a = 1;\n        long b = 1;\n        long c = 1;\n      \
    \  long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n\
    \        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k\
    \ = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n      \
    \  long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v\
    \ = 1;\n        long w = 1;\n        long x = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1mbxh9l4.java:124: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp1mbxh9l4.java:125: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp1mbxh9l4.java:125: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp1mbxh9l4.java:125:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp1mbxh9l4.java:125: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmp1mbxh9l4.java:125:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp1mbxh9l4.java:136: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a > 100000000) {\n            return false;\n        }\n\
    \        if (a % 3 == 0) {\n            return true;\n        }\n        return\
    \ false;\n\n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9v622nfu.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxj75mxa.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 || a % 5 == 0 || a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4woip6gm.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0)\n         \
    \   return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kqggn13.java:25: error: bad operand types for binary operator\
    \ '*'\n            return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n   \
    \                              ^\n  first type:  boolean\n  second type: boolean\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplgxo6gb3.java:20: error: incompatible types: long cannot be converted\
    \ to boolean\n        return (a * a * a * a * a * a * a);\n                  \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long aa = 1;\n        long ab = 1;\n    \
    \    long ac = 1;\n        long ad = 1;\n        long ae = 1;\n        long af\
    \ = 1;\n        long ag = 1;\n        long ah = 1;\n        long ai = 1;\n   \
    \     long aj = 1;\n        long ak = 1;\n        long al = 1;\n        long am\
    \ = 1;\n        long an = 1;\n        long ao = 1;\n        long ap = 1;\n   \
    \     long aq = 1;\n        long ar = 1;\n        long as = 1;\n        long at\
    \ = 1;\n        long au = 1;\n        long av = 1;\n        long aw = 1;\n   \
    \     long ax = 1;\n        long ay = 1;\n        long az = 1;\n        long aaa\
    \ = 1;\n        long aab = 1;\n        long aac = 1;\n        long aad = 1;\n\
    \        long aae = 1;\n        long aaf = 1;\n        long aag = 1;\n       \
    \ long aah = 1;\n        long aai = 1;\n        long aaj = 1;\n        long aak\
    \ = 1;\n        long aal = 1;\n        long aam = 1;\n        long aan = 1;\n\
    \        long aoa = 1;\n        long aap = 1;\n        long aqa = 1;\n       \
    \ long aar = 1;\n        long asa = 1;\n        long ata = 1;\n        long aua\
    \ = 1;\n        long ava\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw4vn_vpp.java:118: error: ';' expected\n        long ava\n    \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = a;\n        long c = a;\n\
    \        long d = a;\n        long e = a;\n        long f = a;\n        long g\
    \ = a;\n        long h = a;\n        long i = a;\n        long j = a;\n      \
    \  long k = a;\n        long l = a;\n        long m = a;\n        long n = a;\n\
    \        long o = a;\n        long p = a;\n        long q = a;\n        long r\
    \ = a;\n        long s = a;\n        long t = a;\n        long u = a;\n      \
    \  long v = a;\n        long w = a;\n        long x = a;\n        long y = a;\n\
    \        long z = a;\n        long a = a;\n        long b = a;\n        long c\
    \ = a;\n        long d = a;\n        long e = a;\n        long f = a;\n      \
    \  long g = a;\n        long h = a;\n        long i = a;\n        long j = a;\n\
    \        long k = a;\n        long l = a;\n        long m = a;\n        long n\
    \ = a;\n        long o = a;\n        long p = a;\n        long q = a;\n      \
    \  long r = a;\n        long s = a;\n        long t = a;\n        long u = a;\n\
    \        long v = a;\n        long w = a;\n        long x = a;\n        long y\
    \ = a;\n        long z = a;\n        long a = a;\n        long b = a;\n      \
    \  long c = a;\n        long d = a;\n        long e = a;\n        long f = a;\n\
    \        long g = a;\n        long h = a;\n        long i = a;\n        long j\
    \ = a;\n        long k = a;\n        long l = a;\n        long m = a;\n      \
    \  long n = a;\n        long o = a;\n        long p = a;\n        long q = a;\n\
    \        long r = a;\n        long s = a;\n        long t = a;\n        long u\
    \ = a;\n        long v = a;\n        long w = a;\n        long x = a;\n      \
    \  long y = a;\n        long z = a;\n        long a = a;\n        long b = a;\n\
    \        long c = a;\n        long d = a;\n        long e = a;\n        long f\
    \ = a;\n        long g = a;\n        long h = a;\n        long i = a;\n      \
    \  long j = a;\n        long k = a;\n        long l = a;\n        long m = a;\n\
    \        long n = a;\n        long o = a;\n        long p = a;\n        long q\
    \ = a;\n        long r = a;\n        long s = a;\n        long t = a;\n      \
    \  long u = a;\n        long v = a;\n        long w = a;\n        long x = a;\n\
    \        long y = \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpokx8pd5s.java:122: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpokx8pd5s.java:123: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpokx8pd5s.java:123: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpokx8pd5s.java:123:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpokx8pd5s.java:123: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpokx8pd5s.java:123:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpokx8pd5s.java:134: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8xu5s7vh.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n\
    \            return true;\n        if (a % 7 == 0)\n            return true;\n\
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzge3jjqp.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 1) {\n            return true;\n        }\n     \
    \   if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n\
    \            return true;\n        }\n        if (a == 4) {\n            return\
    \ true;\n        }\n        if (a == 5) {\n            return true;\n        }\n\
    \        if (a == 6) {\n            return true;\n        }\n        if (a ==\
    \ 7) {\n            return true;\n        }\n        if (a == 8) {\n         \
    \   return true;\n        }\n        if (a == 9) {\n            return true;\n\
    \        }\n        if (a == 10) {\n            return true;\n        }\n    \
    \    if (a == 11) {\n            return true;\n        }\n        if (a == 12)\
    \ {\n            return true;\n        }\n        if (a == 13) {\n           \
    \ return true;\n        }\n        if (a == 14) {\n            return true;\n\
    \        }\n        if (a == 15) {\n            return true;\n        }\n    \
    \    if (a == 16) {\n            return true;\n        }\n        if (a == 17)\
    \ {\n            return true;\n        }\n        if (a == 18) {\n           \
    \ return true;\n        }\n        if (a == 19) {\n            return true;\n\
    \        }\n        if (a == 20) {\n            return true;\n        }\n    \
    \    if (a == 21) {\n            return true;\n        }\n        if (a == 22)\
    \ {\n            return true;\n        }\n        if (a == 23) {\n           \
    \ return true;\n        }\n        if (a == 24) {\n            return true;\n\
    \        }\n        if (a == 25) {\n            return true;\n        }\n    \
    \    if (a == 26) {\n            return true;\n        }\n        if (a == 27)\
    \ {\n            return true;\n        }\n        if (a == 28) {\n           \
    \ return true;\n        }\n        if (a == 29) {\n            return true;\n\
    \        }\n        if (a == 30) {\n            return true;\n        }\n    \
    \    if (a == 31) {\n            return true;\n        }\n        if (a == 32)\
    \ {\n            return true;\n        }\n        if (a == 33) {\n           \
    \ return true;\n        }\n        if (a == 34) {\n            return true;\n\
    \        }\n        if (a == 35) {\n            return true;\n        }\n    \
    \    if (a == 36) {\n            return true;\n        }\n        if (a == 37)\
    \ {\n            return true;\n        }\n        if (a == 38) {\n           \
    \ return true;\n        }\n        if (a == 39) {\n            return true;\n\
    \        }\n        if (a == 40) {\n            return true;\n        }\n    \
    \    if (a == 41) {\n            return true;\n        }\n        if (a == 42)\
    \ {\n            return true;\n        }\n        if (a == 43) {\n           \
    \ return true;\n        }\n        if (a == 44) {\n            return true;\n\
    \        }\n        if (a == 45) {\n            return true;\n        }\n    \
    \    if (a == 46) {\n            return true;\n        }\n        if (a == 47)\
    \ {\n            return true;\n        }\n        if (a == 48) {\n           \
    \ return true;\n        }\n        if (a == 49) {\n            return true;\n\
    \        }\n        if (a == 50) {\n            return true;\n        }\n    \
    \    if (a == 51) {\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprt0_tg7z.java:176: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmprt0_tg7z.java:176: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmprt0_tg7z.java:176: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmprt0_tg7z.java:176: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmprt0_tg7z.java:176: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmprt0_tg7z.java:187: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == Long.MIN_VALUE) {\n            return false;\n        }\n        return\
    \ cube % Long.MIN_VALUE == 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqlmp1i7.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8mgaclv7.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 0) {\n            return true;\n        }\n     \
    \   if (a == 1) {\n            return true;\n        }\n        if (a == 2) {\n\
    \            return true;\n        }\n        if (a == 3) {\n            return\
    \ true;\n        }\n        if (a == 4) {\n            return true;\n        }\n\
    \        if (a == 5) {\n            return true;\n        }\n        if (a ==\
    \ 6) {\n            return true;\n        }\n        if (a == 7) {\n         \
    \   return true;\n        }\n        if (a == 8) {\n            return true;\n\
    \        }\n        if (a == 9) {\n            return true;\n        }\n     \
    \   if (a == 10) {\n            return true;\n        }\n        if (a == 11)\
    \ {\n            return true;\n        }\n        if (a == 12) {\n           \
    \ return true;\n        }\n        if (a == 13) {\n            return true;\n\
    \        }\n        if (a == 14) {\n            return true;\n        }\n    \
    \    if (a == 15) {\n            return true;\n        }\n        if (a == 16)\
    \ {\n            return true;\n        }\n        if (a == 17) {\n           \
    \ return true;\n        }\n        if (a == 18) {\n            return true;\n\
    \        }\n        if (a == 19) {\n            return true;\n        }\n    \
    \    if (a == 20) {\n            return true;\n        }\n        if (a == 21)\
    \ {\n            return true;\n        }\n        if (a == 22) {\n           \
    \ return true;\n        }\n        if (a == 23) {\n            return true;\n\
    \        }\n        if (a == 24) {\n            return true;\n        }\n    \
    \    if (a == 25) {\n            return true;\n        }\n        if (a == 26)\
    \ {\n            return true;\n        }\n        if (a == 27) {\n           \
    \ return true;\n        }\n        if (a == 28) {\n            return true;\n\
    \        }\n        if (a == 29) {\n            return true;\n        }\n    \
    \    if (a == 30) {\n            return true;\n        }\n        if (a == 31)\
    \ {\n            return true;\n        }\n        if (a == 32) {\n           \
    \ return true;\n        }\n        if (a == 33) {\n            return true;\n\
    \        }\n        if (a == 34) {\n            return true;\n        }\n    \
    \    if (a == 35) {\n            return true;\n        }\n        if (a == 36)\
    \ {\n            return true;\n        }\n        if (a == 37) {\n           \
    \ return true;\n        }\n        if (a == 38) {\n            return true;\n\
    \        }\n        if (a == 39) {\n            return true;\n        }\n    \
    \    if (a == 40) {\n            return true;\n        }\n        if (a == 41)\
    \ {\n            return true;\n        }\n        if (a == 42) {\n           \
    \ return true;\n        }\n        if (a == 43) {\n            return true;\n\
    \        }\n        if (a == 44) {\n            return true;\n        }\n    \
    \    if (a == 45) {\n            return true;\n        }\n        if (a == 46)\
    \ {\n            return true;\n        }\n        if (a == 47) {\n           \
    \ return true;\n        }\n        if (a == 48) {\n            return true;\n\
    \        }\n        if (a == 49) {\n            return true;\n        }\n    \
    \    if (a == 50) {\n            return true;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprhjtf5_d.java:177: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmprhjtf5_d.java:177: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmprhjtf5_d.java:177: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmprhjtf5_d.java:177: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmprhjtf5_d.java:177: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmprhjtf5_d.java:188: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpho5pd2e4.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaf8m1rs3.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 0) {\n            return true;\n        }\n     \
    \   if (a % 2 == 0) {\n            return false;\n        }\n        if (a % 3\
    \ == 0) {\n            return true;\n        }\n        if (a % 4 == 0) {\n  \
    \          return false;\n        }\n        if (a % 5 == 0) {\n            return\
    \ true;\n        }\n        if (a % 6 == 0) {\n            return false;\n   \
    \     }\n        if (a % 7 == 0) {\n            return true;\n        }\n    \
    \    if (a % 8 == 0) {\n            return false;\n        }\n        if (a %\
    \ 9 == 0) {\n            return true;\n        }\n        if (a % 10 == 0) {\n\
    \            return false;\n        }\n        if (a % 11 == 0) {\n          \
    \  return true;\n        }\n        if (a % 12 == 0) {\n            return false;\n\
    \        }\n        if (a % 13 == 0) {\n            return true;\n        }\n\
    \        if (a % 14 == 0) {\n            return false;\n        }\n        if\
    \ (a % 15 == 0) {\n            return true;\n        }\n        if (a % 16 ==\
    \ 0) {\n            return false;\n        }\n        if (a % 17 == 0) {\n   \
    \         return true;\n        }\n        if (a % 18 == 0) {\n            return\
    \ false;\n        }\n        if (a % 19 == 0) {\n            return true;\n  \
    \      }\n        if (a % 20 == 0) {\n            return false;\n        }\n \
    \       if (a % 21 == 0) {\n            return true;\n        }\n        if (a\
    \ % 22 == 0) {\n            return false;\n        }\n        if (a % 23 == 0)\
    \ {\n            return true;\n        }\n        if (a % 24 == 0) {\n       \
    \     return false;\n        }\n        if (a % 25 == 0) {\n            return\
    \ true;\n        }\n        if (a % 26 == 0) {\n            return false;\n  \
    \      }\n        if (a % 27 == 0) {\n            return true;\n        }\n  \
    \      if (a % 28 == 0) {\n            return false;\n        }\n        if (a\
    \ % 29 == 0) {\n            return true;\n        }\n        if (a % 30 == 0)\
    \ {\n            return false;\n        }\n        if (a % 31 == 0) {\n      \
    \      return true;\n        }\n        if (a % 32 == 0) {\n            return\
    \ false;\n        }\n        if (a % 33 == 0) {\n            return true;\n  \
    \      }\n        if (a % 34 == 0) {\n            return false;\n        }\n \
    \       if (a % 35 == 0) {\n            return true;\n        }\n        if (a\
    \ % 36 == 0) {\n            return false;\n        }\n        if (a % 37 == 0)\
    \ {\n            return true;\n        }\n        if (a % 38 == 0) {\n       \
    \     return false;\n        }\n        if (a % 39 == 0) {\n            return\
    \ true;\n        }\n        if (a % 40 == 0) {\n            return false;\n  \
    \      }\n        if (a % 41 == 0) {\n            return true;\n        }\n  \
    \      if (a % 42 == 0) {\n            return false;\n        }\n        if (a\
    \ % 43 == 0) {\n            return true;\n        }\n        if (a % 44 == 0)\
    \ {\n            return false;\n        }\n        if (a % 45 == 0) {\n      \
    \      return true;\n        }\n        if (a % 46 == 0) {\n            return\
    \ false;\n\n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ur1ujaq.java:162: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp2ur1ujaq.java:162: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmp2ur1ujaq.java:162: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp2ur1ujaq.java:162: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp2ur1ujaq.java:162: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp2ur1ujaq.java:173: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6mtxya8a.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb09zezw2.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfn1suva6.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr5rgku2_.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long aa = 1;\n        long ab = 1;\n        long\
    \ ac = 1;\n        long ad = 1;\n        long ae = 1;\n        long af = 1;\n\
    \        long ag = 1;\n        long ah = 1;\n        long ai = 1;\n        long\
    \ aj = 1;\n        long ak = 1;\n        long al = 1;\n        long am = 1;\n\
    \        long an = 1;\n        long ao = 1;\n        long ap = 1;\n        long\
    \ aq = 1;\n        long ar = 1;\n        long as = 1;\n        long at = 1;\n\
    \        long au = 1;\n        long av = 1;\n        long aw = 1;\n        long\
    \ ax = 1;\n        long ay = 1;\n        long az = 1;\n        long aaa = 1;\n\
    \        long aab = 1;\n        long aac = 1;\n        long aad = 1;\n       \
    \ long aae = 1;\n        long aaf = 1;\n        long aag = 1;\n        long aah\
    \ = 1;\n        long ai1 = 1;\n        long aj1 = 1;\n        long ak1 = 1;\n\
    \        long al1 = 1;\n        long am1 = 1;\n        long an1 = 1;\n       \
    \ long ao1 = 1;\n        long ap1 = 1;\n        long aq1 = 1;\n        long ar1\
    \ = 1;\n        long as1 = 1;\n        long at1 = 1;\n        long au1 = 1;\n\
    \        long av1 = 1;\n        long aw1 = 1;\n        long ax1 = 1;\n       \
    \ long ay1 = 1;\n        long az1 = 1;\n        long aaa1 = 1;\n        long aab1\
    \ = 1;\n        long aac1 = 1;\n        long aad1 = 1;\n        long aae1 = 1;\n\
    \        long aaf1 = 1;\n        long aag1 = 1;\n        long aah1 = 1;\n    \
    \    long ai1 = 1;\n        long aj1 = 1;\n        long ak1 = 1;\n        long\
    \ al1 = 1;\n        long am1 = 1;\n        long an1 = 1;\n        long ao1 = 1;\n\
    \        long ap1 = 1;\n        long aq1 = 1;\n        long ar1 = 1;\n       \
    \ long as1 = 1;\n        long at1 = 1;\n        long au1 = 1;\n        long av1\
    \ = 1;\n        long aw\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiaorr8pa.java:119: error: ';' expected\n        long aw\n     \
    \          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp073mcekn.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphnh5223q.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a % 3 == 0) {\n            return true;\n        }\n \
    \       if (a % 5 == 0) {\n            return true;\n        }\n        if (a\
    \ % 7 == 0) {\n            return true;\n        }\n        return false;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmporvc3bem.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 1) {\n            return true;\n        }\n     \
    \   if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n\
    \            return true;\n        }\n        if (a == 4) {\n            return\
    \ true;\n        }\n        if (a == 5) {\n            return true;\n        }\n\
    \        if (a == 6) {\n            return true;\n        }\n        if (a ==\
    \ 7) {\n            return true;\n        }\n        if (a == 8) {\n         \
    \   return true;\n        }\n        if (a == 9) {\n            return true;\n\
    \        }\n        if (a == 10) {\n            return true;\n        }\n    \
    \    if (a == 11) {\n            return true;\n        }\n        if (a == 12)\
    \ {\n            return true;\n        }\n        if (a == 13) {\n           \
    \ return true;\n        }\n        if (a == 14) {\n            return true;\n\
    \        }\n        if (a == 15) {\n            return true;\n        }\n    \
    \    if (a == 16) {\n            return true;\n        }\n        if (a == 17)\
    \ {\n            return true;\n        }\n        if (a == 18) {\n           \
    \ return true;\n        }\n        if (a == 19) {\n            return true;\n\
    \        }\n        if (a == 20) {\n            return true;\n        }\n    \
    \    if (a == 21) {\n            return true;\n        }\n        if (a == 22)\
    \ {\n            return true;\n        }\n        if (a == 23) {\n           \
    \ return true;\n        }\n        if (a == 24) {\n            return true;\n\
    \        }\n        if (a == 25) {\n            return true;\n        }\n    \
    \    if (a == 26) {\n            return true;\n        }\n        if (a == 27)\
    \ {\n            return true;\n        }\n        if (a == 28) {\n           \
    \ return true;\n        }\n        if (a == 29) {\n            return true;\n\
    \        }\n        if (a == 30) {\n            return true;\n        }\n    \
    \    if (a == 31) {\n            return true;\n        }\n        if (a == 32)\
    \ {\n            return true;\n        }\n        if (a == 33) {\n           \
    \ return true;\n        }\n        if (a == 34) {\n            return true;\n\
    \        }\n        if (a == 35) {\n            return true;\n        }\n    \
    \    if (a == 36) {\n            return true;\n        }\n        if (a == 37)\
    \ {\n            return true;\n        }\n        if (a == 38) {\n           \
    \ return true;\n        }\n        if (a == 39) {\n            return true;\n\
    \        }\n        if (a == 40) {\n            return true;\n        }\n    \
    \    if (a == 41) {\n            return true;\n        }\n        if (a == 42)\
    \ {\n            return true;\n        }\n        if (a == 43) {\n           \
    \ return true;\n        }\n        if (a == 44) {\n            return true;\n\
    \        }\n        if (a == 45) {\n            return true;\n        }\n    \
    \    if (a == 46) {\n            return true;\n        }\n        if (a == 47)\
    \ {\n            return true;\n        }\n        if (a == 48) {\n           \
    \ return true;\n        }\n        if (a == 49) {\n            return true;\n\
    \        }\n        if (a == 50) {\n            return true;\n        }\n    \
    \    if (a == 51) {\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0dj8o4dm.java:176: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp0dj8o4dm.java:176: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmp0dj8o4dm.java:176: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp0dj8o4dm.java:176: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp0dj8o4dm.java:176: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp0dj8o4dm.java:187: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        return\
    \ cube == a ? true : false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dx8f1fc.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        long b = 1;\n        long c = 1;\n        long d = 1;\n  \
    \      long e = 1;\n        long f = 1;\n        long g = 1;\n        long h =\
    \ 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long\
    \ l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n    \
    \    long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n        long\
    \ ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag = 1;\n\
    \        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n        long\
    \ ak = 1;\n        long al = 1;\n        long am = 1;\n        long an = 1;\n\
    \        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n        long\
    \ ar = 1;\n        long as = 1;\n        long at = 1;\n        long au = 1;\n\
    \        long av = 1;\n        long aw = 1;\n        long ax = 1;\n        long\
    \ ay = 1;\n        long az = 1;\n        long aaa = 1;\n        long aab = 1;\n\
    \        long aac = 1;\n        long aad = 1;\n        long aae = 1;\n       \
    \ long aaf = 1;\n        long aag = 1;\n        long aah = 1;\n        long aai\
    \ = 1;\n        long aaj = 1;\n        long aak = 1;\n        long aal = 1;\n\
    \        long aam = 1;\n        long aan = 1;\n        long aoa = 1;\n       \
    \ long aap = 1;\n        long aqa = 1;\n        long aar = 1;\n        long asa\
    \ = 1;\n        long ata = 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsejl1r87.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0)\n            return false;\n\
    \        if (a == 0)\n            return true;\n        if (a > 0)\n         \
    \   return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n        else\n    \
    \        return false;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7vb09e9.java:25: error: bad operand types for binary operator\
    \ '*'\n            return iscube(a / 3) * iscube(a / 3) * iscube(a / 3);\n   \
    \                              ^\n  first type:  boolean\n  second type: boolean\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxrrt0yiy.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhdtwyfp.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm1nv0ngm.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(i -> i*i*i == a).count();\n        return cube == a;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfrtdndu8.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz480ebsv.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        return (a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8_8u_vn.java:20: error: ')' expected\n        return (a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcx0v8djq.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = LongStream.rangeClosed(1,\
    \ a).filter(x -> x * x * x == a).count();\n        return cube == 1;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6kjj79k9.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp47e5sn0c.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long A = 1;\n        long B = 1;\n        long C\
    \ = 1;\n        long D = 1;\n        long E = 1;\n        long F = 1;\n      \
    \  long G = 1;\n        long H = 1;\n        long I = 1;\n        long J = 1;\n\
    \        long K = 1;\n        long L = 1;\n        long M = 1;\n        long N\
    \ = 1;\n        long O = 1;\n        long P = 1;\n        long Q = 1;\n      \
    \  long R = 1;\n        long S = 1;\n        long T = 1;\n        long U = 1;\n\
    \        long V = 1;\n        long W = 1;\n        long X = 1;\n        long Y\
    \ = 1;\n        long Z = 1;\n        long AA = 1;\n        long AB = 1;\n    \
    \    long AC = 1;\n        long AD = 1;\n        long AE = 1;\n        long AF\
    \ = 1;\n        long AG = 1;\n        long AH = 1;\n        long AI = 1;\n   \
    \     long AJ = 1;\n        long AK = 1;\n        long AL = 1;\n        long AM\
    \ = 1;\n        long AN = 1;\n        long AO = 1;\n        long AP = 1;\n   \
    \     long AQ = 1;\n        long AR = 1;\n        long AS = 1;\n        long AT\
    \ = 1;\n        long AU = 1;\n        long AV = 1;\n        long AW = 1;\n   \
    \     long AX = 1;\n        long AY = 1;\n        long AZ = 1;\n        long BA\
    \ = 1;\n        long BB = 1;\n        long BC = 1;\n        long BD = 1;\n   \
    \     long BE = 1;\n        long BF = 1;\n        long BG = 1;\n        long BH\
    \ = 1;\n        long BI = 1;\n        long BJ = 1;\n        long BK = 1;\n   \
    \     long BL = 1;\n        long BM = 1;\n        long BN = 1;\n        long BO\
    \ = 1;\n        long BP = 1;\n        long BQ = 1;\n        long BR = 1;\n   \
    \     long BS = 1;\n        long BT = 1;\n        long BU = 1;\n        long BV\
    \ = 1;\n        long BW = 1;\n        long BX = 1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuh4byf73.java:121: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a % 3 == 0 || a % 5 == 0 || a %\
    \ 7 == 0)\n            return true;\n        else\n            return false;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixj6fprc.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        long cube = a * a * a;\n        if\
    \ (cube == 0 || cube == 1) {\n            return true;\n        }\n        return\
    \ false;\n\n    }\n    public static void main(String[] args) {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezvagz_6.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes an integer a and returns True\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==>\
    \ True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64)\
    \ ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public\
    \ static boolean iscube(long a) {\n        if (a < 0) {\n            return false;\n\
    \        }\n        if (a == 1) {\n            return true;\n        }\n     \
    \   if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n\
    \            return true;\n        }\n        if (a == 4) {\n            return\
    \ true;\n        }\n        if (a == 5) {\n            return true;\n        }\n\
    \        if (a == 6) {\n            return true;\n        }\n        if (a ==\
    \ 7) {\n            return true;\n        }\n        if (a == 8) {\n         \
    \   return true;\n        }\n        if (a == 9) {\n            return true;\n\
    \        }\n        if (a == 10) {\n            return true;\n        }\n    \
    \    if (a == 11) {\n            return true;\n        }\n        if (a == 12)\
    \ {\n            return true;\n        }\n        if (a == 13) {\n           \
    \ return true;\n        }\n        if (a == 14) {\n            return true;\n\
    \        }\n        if (a == 15) {\n            return true;\n        }\n    \
    \    if (a == 16) {\n            return true;\n        }\n        if (a == 17)\
    \ {\n            return true;\n        }\n        if (a == 18) {\n           \
    \ return true;\n        }\n        if (a == 19) {\n            return true;\n\
    \        }\n        if (a == 20) {\n            return true;\n        }\n    \
    \    if (a == 21) {\n            return true;\n        }\n        if (a == 22)\
    \ {\n            return true;\n        }\n        if (a == 23) {\n           \
    \ return true;\n        }\n        if (a == 24) {\n            return true;\n\
    \        }\n        if (a == 25) {\n            return true;\n        }\n    \
    \    if (a == 26) {\n            return true;\n        }\n        if (a == 27)\
    \ {\n            return true;\n        }\n        if (a == 28) {\n           \
    \ return true;\n        }\n        if (a == 29) {\n            return true;\n\
    \        }\n        if (a == 30) {\n            return true;\n        }\n    \
    \    if (a == 31) {\n            return true;\n        }\n        if (a == 32)\
    \ {\n            return true;\n        }\n        if (a == 33) {\n           \
    \ return true;\n        }\n        if (a == 34) {\n            return true;\n\
    \        }\n        if (a == 35) {\n            return true;\n        }\n    \
    \    if (a == 36) {\n            return true;\n        }\n        if (a == 37)\
    \ {\n            return true;\n        }\n        if (a == 38) {\n           \
    \ return true;\n        }\n        if (a == 39) {\n            return true;\n\
    \        }\n        if (a == 40) {\n            return true;\n        }\n    \
    \    if (a == 41) {\n            return true;\n        }\n        if (a == 42)\
    \ {\n            return true;\n        }\n        if (a == 43) {\n           \
    \ return true;\n        }\n        if (a == 44) {\n            return true;\n\
    \        }\n        if (a == 45) {\n            return true;\n        }\n    \
    \    if (a == 46) {\n            return true;\n        }\n        if (a == 47)\
    \ {\n            return true;\n        }\n        if (a == 48) {\n           \
    \ return true;\n        }\n        if (a == 49) {\n            return true;\n\
    \        }\n        if (a == 50) {\n            return true;\n        }\n    \
    \    if (a == 51) {\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2llffv0h.java:176: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp2llffv0h.java:176: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmp2llffv0h.java:176: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp2llffv0h.java:176: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp2llffv0h.java:176: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp2llffv0h.java:187: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
