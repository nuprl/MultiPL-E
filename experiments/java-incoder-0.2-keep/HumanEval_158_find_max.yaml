name: HumanEval_158_find_max
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts a list of strings.\n    //\
  \ The list contains different words. Return the word with maximum number\n    //\
  \ of unique characters. If multiple strings have maximum number of unique\n    //\
  \ characters, return the one which comes first in lexicographical order.\n    //\
  \ find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\"\
  , \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
  ]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String> words) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"\
  )))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
  )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     List<String> result = new ArrayList<>();\n        for (String word : map.keySet())\
    \ {\n            if (map.get(word) == map.get(word).max()) {\n               \
    \ result.add(word);\n            }\n        }\n        \n        if (result.size()\
    \ == 0) {\n            return \"\";\n        }\n        \n        Collections.sort(result);\n\
    \        return result.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        \n        Set<String> keySet = map.keySet();\n        \n    \
    \    Integer maxValue = keySet.size();\n        \n        if (maxValue == 0) {\n\
    \            return \"\";\n        }\n        \n        for (String key : keySet)\
    \ {\n            Integer value = map.get(key);\n            if (value.intValue()\
    \ > maxValue.intValue()) {\n                maxValue = value;\n            }\n\
    \        }\n        \n        return maxValue.intValue() == 0 ? \"\" : keySet.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      iterator.next();\n        String maxKey = iterator.next();\n        int\
    \ maxCount = map.get(maxKey);\n        while (iterator.hasNext()) {\n        \
    \    String key = iterator.next();\n            int count = map.get(key);\n  \
    \          if (count > maxCount) {\n                maxKey = key;\n          \
    \      maxCount = count;\n            }\n        }\n        return maxKey;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collections.sort(words);\n  \
    \      String max = null;\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count > map.size()) {\n            \
    \    max = word;\n            }\n        }\n        return max;\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        List<String>\
    \ result = new ArrayList<>();\n        for (String key : keySet) {\n         \
    \   int count = map.get(key);\n            if (count > 1) {\n                result.add(key);\n\
    \            }\n        }\n        if (result.size() == 1) {\n            return\
    \ result.get(0);\n        }\n        return \"\";\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        \n        Set<String> keySet = map.keySet();\n   \
    \     if(keySet.size() > 1) {\n            String maxKey = keySet.toArray(new\
    \ String[keySet.size()])[0];\n            int maxValue = map.get(maxKey);\n  \
    \          \n            for(String key : keySet) {\n                if(map.get(key)\
    \ == maxValue) {\n                    maxKey = key;\n                }\n     \
    \       }\n            return maxKey;\n        } else {\n            return keySet.toArray(new\
    \ String[keySet.size()])[0];\n        }\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collections.sort(words, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                int\
    \ count1 = map.get(o1);\n                int count2 = map.get(o2);\n         \
    \       return count1 - count2;\n            }\n        });\n        return words.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n\
    \        return map.entrySet().stream().findFirst().get().getKey();\n", "    \
    \    Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      String max = null;\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            if (map.get(key) > map.size()) {\n     \
    \           max = key;\n            }\n        }\n        return max;\n", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().findFirst().get().getKey();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collections.sort(words,\
    \ (a, b) -> map.get(a) - map.get(b));\n        return words.get(0);\n", "    \
    \    Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keys = map.keySet();\n\
    \        Iterator<String> iterator = keys.iterator();\n        String maxKey =\
    \ null;\n        int maxCount = 0;\n        while (iterator.hasNext()) {\n   \
    \         String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                maxKey = key;\n        \
    \        maxCount = count;\n            }\n        }\n        return maxKey;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n        return\
    \ maxEntry.getKey();\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c);\n\
    \                } else {\n                    map.put(c, count);\n          \
    \      }\n            }\n        }\n        Set<String> keys = map.keySet();\n\
    \        Collections.sort(keys, new Comparator<String>() {\n            public\
    \ int compare(String o1, String o2) {\n                return map.get(o1).compareTo(map.get(o2));\n\
    \            }\n        });\n        return keys.get(0);\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        String max =\
    \ null;\n        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if (value == 1) {\n      \
    \          max = key;\n                break;\n            }\n            if (value\
    \ > 1) {\n                map.remove(key);\n            }\n        }\n       \
    \ if (map.isEmpty()) {\n            return \"\";\n        }\n        return max;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      String maxWord = null;\n        int maxCount = -1;\n        while (iterator.hasNext())\
    \ {\n            String word = iterator.next();\n            int count = map.get(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        for(String key : keySet) {\n            int\
    \ count = map.get(key);\n            if(count > 1) {\n                return key;\n\
    \            }\n        }\n        \n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 0;\n            }\n            map.put(word, count + 1);\n \
    \       }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n        return result.isEmpty()\
    \ ? \"\" : result.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        if (keySet.size() > 0) {\n          \
    \  String maxKey = iterator.next();\n            int maxValue = map.get(maxKey);\n\
    \            while (iterator.hasNext()) {\n                String nextKey = iterator.next();\n\
    \                int nextValue = map.get(nextKey);\n                if (nextValue\
    \ > maxValue) {\n                    maxKey = nextKey;\n                    maxValue\
    \ = nextValue;\n                }\n            }\n            return maxKey;\n\
    \        } else {\n            return \"\";\n        }\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        String maxKey = null;\n        for (String key : map.keySet()) {\n  \
    \          if (maxValue == map.get(key)) {\n                maxKey = key;\n  \
    \          }\n        }\n        return maxKey;\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<String> keys = map.keySet();\n\
    \        if (keys.size() == 1) {\n            return keys.get(0);\n        }\n\
    \        Set<String> maxKeys = new TreeSet<>(keys);\n        return maxKeys.first();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : entrySet) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key) >\
    \ map.get(keySet.get(0))) {\n                return key;\n            }\n    \
    \    }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<String> keys\
    \ = map.keySet();\n        String maxKey = keys.stream().max(Comparator.comparingInt(k\
    \ -> map.get(k)))\n                .orElse(\"\");\n        return maxKey;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        if (keySet.size() == 1) {\n            return keySet.iterator().next();\n\
    \        }\n        int maxCount = keySet.size();\n        for (String word :\
    \ keySet) {\n            if (map.get(word) == maxCount) {\n                return\
    \ word;\n            }\n        }\n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = 0;\n            for(char c : word.toCharArray()) {\n      \
    \          if(map.containsKey(c)) {\n                    count = map.get(c) +\
    \ 1;\n                }\n                map.put(c, count);\n            }\n \
    \       }\n        \n        Optional<Map.Entry<String, Integer>> maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue());\n\
    \        if(maxEntry.isPresent()) {\n            return maxEntry.get().getKey();\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if (value > map.size()) {\n\
    \                return key;\n            }\n        }\n        return \"\";\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        \n        Set<String>\
    \ keys = map.keySet();\n        \n        if (keys.size() == 1) {\n          \
    \  return keys.get(0);\n        }\n        \n        int maxCount = keys.size();\n\
    \        String maxWord = \"\";\n        for (String key : keys) {\n         \
    \   if (map.get(key) > maxCount) {\n                maxCount = map.get(key);\n\
    \                maxWord = key;\n            }\n        }\n        return maxWord;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Integer maxValue = Collections.max(keySet);\n     \
    \   String maxKey = keySet.toArray()[maxValue.intValue()];\n        return maxKey;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            if (map.get(key) > map.get(key)) {\n                return key;\n\
    \            }\n        }\n        return \"\";\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        if (result.size() == 0) {\n      \
    \      return \"\";\n        }\n        return result.iterator().next();\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(Character.toString(c), 0);\n            \
    \    map.putIfAbsent(Character.toString(c), map.get(c) + 1);\n            }\n\
    \        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = 0;\n\
    \            for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (map.size() > words.size()) {\n               \
    \ return \"\";\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ set = map.entrySet();\n        Iterator<Map.Entry<String, Integer>> iterator\
    \ = set.iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String,\
    \ Integer> entry = iterator.next();\n            if (entry.getValue() > words.size())\
    \ {\n                return entry.getKey();\n            }\n        }\n      \
    \  return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n   \
    \     for (String word : words) {\n            int count = 0;\n            for\
    \ (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n\
    \        return map.entrySet().stream().findFirst().get().getKey();\n", "    \
    \    Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        Map.Entry<String, Integer> maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for(String word: words) {\n            int count = map.get(word);\n\
    \            if(count == null) {\n                map.put(word, 1);\n        \
    \    } else {\n                map.put(word, count + 1);\n            }\n    \
    \    }\n        \n        Set<String> keySet = map.keySet();\n        \n     \
    \   for(String key: keySet) {\n            if(map.get(key) > map.get(keySet.toArray()[0]))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        Map.Entry<String, Integer> maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        \n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        \n        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        \n        if (maxEntry.getValue() == 1) {\n            return maxEntry.getKey();\n\
    \        } else {\n            return \"\";\n        }\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 1;\n            } else {\n                count++;\n       \
    \     }\n            map.put(word, count);\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : entries) {\n      \
    \      if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n   \
    \             maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        \n        Set<String>\
    \ keySet = map.keySet();\n        \n        Integer maxCount = keySet.isEmpty()\
    \ ? null : Collections.max(keySet);\n        \n        if (maxCount == null) {\n\
    \            return \"\";\n        }\n        \n        StringBuilder result =\
    \ new StringBuilder();\n        for (String word : keySet) {\n            if (maxCount.equals(map.get(word)))\
    \ {\n                result.append(word);\n            }\n        }\n        \n\
    \        return result.toString();\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > 1) {\n                return key;\n            }\n  \
    \      }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        if (iterator.hasNext()) {\n         \
    \   String key = iterator.next();\n            int maxCount = map.get(key);\n\
    \            while (iterator.hasNext()) {\n                String nextKey = iterator.next();\n\
    \                int nextCount = map.get(nextKey);\n                if (nextCount\
    \ > maxCount) {\n                    maxCount = nextCount;\n                 \
    \   key = nextKey;\n                }\n            }\n            return key;\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        String max = null;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key) >\
    \ map.get(max)) {\n                max = key;\n            }\n        }\n    \
    \    return max;\n", "        Map<String, Integer> map = new HashMap<>();\n  \
    \      for (String word : words) {\n            int count = map.get(word);\n \
    \           if (count == null) {\n                map.put(word, 1);\n        \
    \    } else {\n                map.put(word, count + 1);\n            }\n    \
    \    }\n        \n        Set<String> keys = map.keySet();\n        if (keys.size()\
    \ == 1) {\n            return keys.get(0);\n        }\n        \n        List<String>\
    \ result = new ArrayList<>();\n        for (String key : keys) {\n           \
    \ int count = map.get(key);\n            if (count > result.size()) {\n      \
    \          result.clear();\n                result.add(key);\n            } else\
    \ if (count == result.size()) {\n                result.add(key);\n          \
    \  }\n        }\n        \n        if (result.size() == 1) {\n            return\
    \ result.get(0);\n        }\n        \n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<String> result = new\
    \ ArrayList<>(map.keySet());\n        Collections.sort(result);\n        return\
    \ result.isEmpty() ? \"\" : result.get(0);\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word, count\
    \ + 1);\n        }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        Set<String>\
    \ result = new HashSet<>();\n        for (String word : keySet) {\n          \
    \  int count = map.get(word);\n            if (count > result.size()) {\n    \
    \            result.clear();\n                result.add(word);\n            }\
    \ else if (count == result.size()) {\n                result.add(word);\n    \
    \        }\n        }\n        if (result.size() == 1) {\n            return result.iterator().next();\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        List<String>\
    \ result = new ArrayList<>();\n        for (String key : keySet) {\n         \
    \   int count = map.get(key);\n            if (count > result.size()) {\n    \
    \            result.clear();\n                result.add(key);\n            }\
    \ else if (count == result.size()) {\n                result.add(key);\n     \
    \       }\n        }\n        if (result.size() == 1) {\n            return result.get(0);\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keys = map.keySet();\n        if (keys.size() > 1)\
    \ {\n            String maxKey = keys.iterator().next();\n            for (String\
    \ key : keys) {\n                if (map.get(key) > map.get(maxKey)) {\n     \
    \               maxKey = key;\n                }\n            }\n            return\
    \ maxKey;\n        } else {\n            return keys.get(0);\n        }\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1);\n            } else {\n         \
    \       map.put(word, count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                count = 0;\n            }\n            map.put(word, count +\
    \ 1);\n        }\n        \n        Set<String> keys = map.keySet();\n       \
    \ \n        if (keys.size() == 1) {\n            return keys.get(0);\n       \
    \ }\n        \n        Iterator<String> iterator = keys.iterator();\n        \n\
    \        int maxCount = Integer.MIN_VALUE;\n        String maxWord = \"\";\n \
    \       \n        while (iterator.hasNext()) {\n            String word = iterator.next();\n\
    \            int count = map.get(word);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        \n        return maxWord;\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       Integer count = map.get(word);\n            if (count == null) {\n   \
    \             map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Integer maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \        if (maxCount != null) {\n            String maxWord = map.get(maxCount);\n\
    \            int maxCountValue = map.get(maxCount);\n            int maxCountKey\
    \ = 0;\n            for (String key : keySet) {\n                if (map.get(key)\
    \ == maxCountValue) {\n                    maxCountKey = key;\n              \
    \  }\n            }\n            return maxWord + (maxCountValue == maxCountKey\
    \ ? \"\" : maxCountKey);\n        }\n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value == 1) {\n                return key;\n            }\n \
    \       }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        Integer maxCount = null;\n        String\
    \ maxWord = null;\n        while (iterator.hasNext()) {\n            String word\
    \ = iterator.next();\n            Integer count = map.get(word);\n           \
    \ if (maxCount == null || count > maxCount) {\n                maxCount = count;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 0;\n            }\n            map.put(word, count\
    \ + 1);\n        }\n        Collections.sort(words, new Comparator<String>() {\n\
    \            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        return\
    \ words.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n   \
    \     for(String word : words) {\n            int count = map.get(word);\n   \
    \         map.put(word, count == null ? 1 : count + 1);\n        }\n        \n\
    \        Set<String> keys = map.keySet();\n        if(keys.size() == 1) {\n  \
    \          return keys.get(0);\n        }\n        \n        Iterator<String>\
    \ it = keys.iterator();\n        while(it.hasNext()) {\n            String key\
    \ = it.next();\n            int count = map.get(key);\n            \n        \
    \    if(count > 1) {\n                it.remove();\n                map.put(key,\
    \ count - 1);\n            }\n        }\n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "        Map<String, Integer> map = new HashMap<>();\n   \
    \     for (String word : words) {\n            int count = 0;\n            for\
    \ (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (!map.containsKey(c)) {\n                    map.put(c, 1);\n\
    \                } else {\n                    map.put(c, map.get(c) + 1);\n \
    \               }\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().filter(e\
    \ -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().orElse(\"\"\
    );\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        return result.isEmpty() ? \"\" : result.get(0);\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = map.get(word);\n            map.put(word, count == null ? 1\
    \ : count + 1);\n        }\n        \n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        \n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Set<String> keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            if (map.get(key).equals(keySet.size())) {\n                return\
    \ key;\n            }\n        }\n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        Integer maxCount = keySet.size();\n     \
    \   String maxWord = null;\n        for (String word : keySet) {\n           \
    \ if (maxCount.equals(map.get(word))) {\n                maxWord = word;\n   \
    \         }\n        }\n        \n        return maxWord;\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 1;\n            } else {\n                count++;\n       \
    \     }\n            map.put(word, count);\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      String max = null;\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            int value = map.get(key);\n            if\
    \ (value == map.size()) {\n                if (max != null) {\n              \
    \      return max;\n                }\n                max = key;\n          \
    \  }\n        }\n        return max;\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = 0;\n\
    \            for (int i = 0; i < word.length(); i++) {\n                char c\
    \ = word.charAt(i);\n                if (map.containsKey(c)) {\n             \
    \       count = map.get(c) + 1;\n                } else {\n                  \
    \  map.put(c, 1);\n                }\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collections.sort(map.entrySet());\n        return map.keySet().stream().findFirst().get().getKey();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n\
    \        return map.entrySet().stream().findFirst().get().getKey();\n", "    \
    \    Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    count = map.get(c) + 1;\n    \
    \            }\n                map.put(c, count);\n            }\n        }\n\
    \        \n        Set<String> keys = map.keySet();\n        \n        for(String\
    \ key : keys) {\n            if(map.get(key) > map.get(keys.get(1))) {\n     \
    \           return key;\n            }\n        }\n        return \"\";\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        int maxCount = keySet.size();\n\
    \        for (String word : keySet) {\n            if (map.get(word) > maxCount)\
    \ {\n                maxCount = map.get(word);\n            }\n        }\n   \
    \     return keySet.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = 0;\n            for(char\
    \ c : word.toCharArray()) {\n                if(map.containsKey(c)) {\n      \
    \              map.put(c, map.get(c) + 1);\n                } else {\n       \
    \             map.put(c, 1);\n                }\n            }\n        }\n  \
    \      \n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n     \
    \   \n        Map.Entry<String, Integer> maxEntry = null;\n        \n        for(Map.Entry<String,\
    \ Integer> entry : set) {\n            if(maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        \n        return maxEntry.getKey();\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys);\n\
    \        String maxKey = keys.get(0);\n        int maxCount = map.get(maxKey);\n\
    \        for (String key : keys) {\n            if (map.get(key) == maxCount)\
    \ {\n                maxKey = key;\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return maxKey;\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        if (keySet.size() == 1) {\n            return keySet.iterator().next();\n\
    \        }\n        Set<String> result = new TreeSet<>();\n        for (String\
    \ key : keySet) {\n            int count = map.get(key);\n            if (count\
    \ > 1) {\n                result.add(key);\n            }\n        }\n       \
    \ if (result.size() == 1) {\n            return result.iterator().next();\n  \
    \      }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        String max = null;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value == map.get(max)) {\n                max = key;\n      \
    \      }\n        }\n        return max;\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  char c = word.charAt(i);\n                if (map.containsKey(c)) {\n     \
    \               count = map.get(c) + 1;\n                } else {\n          \
    \          map.put(c, 1);\n                }\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collections.sort(map.entrySet());\n        return map.entrySet().stream().filter(e\
    \ -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().orElse(\"\"\
    );\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Collections.sort(keySet);\n  \
    \      return keySet.iterator().next();\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        Collections.sort(words, Comparator.comparing(s\
    \ -> map.get(s)));\n        return words.get(0);\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        \n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        \n        Map.Entry<String, Integer> maxEntry = set.stream().max(Comparator.comparing(Map.Entry::getValue)).get();\n\
    \        \n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n     \
    \   \n        Optional<String> maxKey = keys.stream().max(Comparator.comparingInt(String::length));\n\
    \        \n        if(maxKey.isPresent()) {\n            return maxKey.get();\n\
    \        }\n        \n        return \"\";\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Integer\
    \ maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n        String\
    \ maxWord = maxCount == null ? \"\" : maxCount.toString();\n        for (String\
    \ word : keySet) {\n            if (maxCount == null || maxCount < map.get(word))\
    \ {\n                maxCount = map.get(word);\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        \n        Set<String> keys = map.keySet();\n   \
    \     \n        Optional<String> maxKey = keys.stream().max(Comparator.comparing(s\
    \ -> map.get(s)));\n        \n        if (maxKey.isPresent()) {\n            return\
    \ maxKey.get();\n        } else {\n            return \"\";\n        }\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1);\n            } else {\n         \
    \       map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Set<String> result = new HashSet<>();\n        for (String\
    \ key : keys) {\n            int count = map.get(key);\n            if (count\
    \ > result.size()) {\n                result.add(key);\n            }\n      \
    \  }\n        if (result.size() == 1) {\n            return result.get(0);\n \
    \       }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        Set<String>\
    \ result = new HashSet<>();\n        for (String key : keySet) {\n           \
    \ int count = map.get(key);\n            if (count > result.size()) {\n      \
    \          result.clear();\n                result.add(key);\n            } else\
    \ if (count == result.size()) {\n                result.add(key);\n          \
    \  }\n        }\n        if (result.size() == 1) {\n            return result.iterator().next();\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = 0;\n            for(char\
    \ c : word.toCharArray()) {\n                if(map.containsKey(c)) {\n      \
    \              count = map.get(c) + 1;\n                } else {\n           \
    \         map.put(c, 1);\n                }\n            }\n            map.put(word,\
    \ count);\n        }\n        \n        Set<Map.Entry<String, Integer>> entrySet\
    \ = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        \n        for(Map.Entry<String, Integer> entry : entrySet) {\n      \
    \      if(entry.getValue() == maxEntry.getValue()) {\n                return entry.getKey();\n\
    \            }\n        }\n        \n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keys = map.keySet();\n\
    \        if (keys.size() == 1) {\n            return keys.get(0);\n        }\n\
    \        int maxCount = keys.size();\n        for (String key : keys) {\n    \
    \        if (map.get(key) > maxCount) {\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return keys.get(0);\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n                count++;\n            }\n            if (count >\
    \ map.size()) {\n                map.put(word, count);\n            }\n      \
    \  }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = null;\n        for (Map.Entry<String, Integer> entry : set)\
    \ {\n            if (maxEntry == null || entry.getValue() > maxEntry.getValue())\
    \ {\n                maxEntry = entry;\n            }\n        }\n        return\
    \ maxEntry.getKey();\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n\
    \        return words.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Collections.sort(words, new Comparator<String>() {\n        \
    \    public int compare(String o1, String o2) {\n                int count1 =\
    \ map.get(o1);\n                int count2 = map.get(o2);\n                if\
    \ (count1 == count2) {\n                    return o1.compareTo(o2);\n       \
    \         } else {\n                    return count1 - count2;\n            \
    \    }\n            }\n        });\n        return words.get(0);\n", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                count = 0;\n            }\n            map.put(word, count +\
    \ 1);\n        }\n        \n        Set<String> keySet = map.keySet();\n     \
    \   \n        Iterator<String> iterator = keySet.iterator();\n        \n     \
    \   while(iterator.hasNext()) {\n            String key = iterator.next();\n \
    \           int value = map.get(key);\n            \n            if (value ==\
    \ 1) {\n                return key;\n            }\n        }\n        \n    \
    \    return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n \
    \       for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n  \
    \      Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n     \
    \   \n        if(keys.size() == 1) {\n            return keys.get(0);\n      \
    \  }\n        \n        int maxCount = keys.size();\n        \n        for(String\
    \ key : keys) {\n            int count = map.get(key);\n            if(count >\
    \ maxCount) {\n                maxCount = count;\n            }\n        }\n \
    \       \n        for(String key : keys) {\n            int count = map.get(key);\n\
    \            if(count == maxCount) {\n                return key;\n          \
    \  }\n        }\n        \n        return \"\";\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Integer maxCount = Collections.max(map.values());\n\
    \        Iterator<String> it = map.keySet().iterator();\n        while (it.hasNext())\
    \ {\n            String key = it.next();\n            if (maxCount == map.get(key))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        Integer maxCount = null;\n        String maxWord = null;\n        while\
    \ (iterator.hasNext()) {\n            String word = iterator.next();\n       \
    \     int count = map.get(word);\n            if (maxCount == null || count >\
    \ maxCount) {\n                maxCount = count;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            if(count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        \n        List<String> result = new ArrayList<>();\n\
    \        for(String word : map.keySet()) {\n            if(map.get(word) == map.get(word).max())\
    \ {\n                result.add(word);\n            }\n        }\n        \n \
    \       if(result.size() == 1) {\n            return result.get(0);\n        }\
    \ else {\n            return \"\";\n        }\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Set<String> keys = map.keySet();\n        Iterator<String>\
    \ iterator = keys.iterator();\n        while (iterator.hasNext()) {\n        \
    \    String key = iterator.next();\n            if (map.get(key).equals(map.size()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        Map.Entry<String, Integer> maxEntry\
    \ = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n       \
    \ return maxEntry.getKey();\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count == null ? 1 : count + 1);\n        }\n      \
    \  \n        Set<String> keys = map.keySet();\n        if(keys.size() == 1) {\n\
    \            return keys.get(0);\n        }\n        \n        Set<String> result\
    \ = new HashSet<>();\n        for(String key : keys) {\n            int count\
    \ = map.get(key);\n            if(count > result.size()) {\n                result.clear();\n\
    \                result.add(key);\n            }\n            else if(count ==\
    \ result.size()) {\n                result.add(key);\n            }\n        }\n\
    \        \n        if(result.size() == 1) {\n            return result.get(0);\n\
    \        }\n        \n        return \"\";\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  char c = word.charAt(i);\n                if (map.containsKey(c)) {\n     \
    \               count = map.get(c) + 1;\n                } else {\n          \
    \          map.put(c, 1);\n                }\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            map.put(word, count + 1);\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      String max = null;\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            if (map.get(key) > map.get(max)) {\n   \
    \             max = key;\n            }\n        }\n        return max;\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1);\n            } else {\n         \
    \       map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> result = new TreeSet<>();\n\
    \        for (String key : keySet) {\n            int count = map.get(key);\n\
    \            if (count > 1) {\n                result.add(key);\n            }\n\
    \        }\n        if (result.size() == 1) {\n            return result.iterator().next();\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n        return result.isEmpty()\
    \ ? \"\" : result.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        int\
    \ maxCount = 0;\n        String maxWord = \"\";\n        for (String word : keySet)\
    \ {\n            int count = map.get(word);\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return \"\
    \";\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Collections.sort(keySet);\n  \
    \      return keySet.iterator().next();\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        \n        Set<String> keySet = map.keySet();\n \
    \       \n        if (keySet.size() == 1) {\n            return keySet.iterator().next();\n\
    \        }\n        \n        List<String> sortedKeys = new ArrayList<>(keySet);\n\
    \        Collections.sort(sortedKeys);\n        \n        return sortedKeys.iterator().next();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n        \n   \
    \     if(maxEntry.getValue() == 1) {\n            return maxEntry.getKey();\n\
    \        }\n        \n        for(Map.Entry<String, Integer> entry : entrySet)\
    \ {\n            if(entry.getValue() == maxEntry.getValue()) {\n             \
    \   return entry.getKey();\n            }\n        }\n        \n        return\
    \ \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = map.get(word);\n          \
    \  if (count == null) {\n                map.put(word, 1);\n            } else\
    \ {\n                map.put(word, count + 1);\n            }\n        }\n   \
    \     Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        String max = null;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (max != null && value > map.get(max)) {\n                max =\
    \ key;\n            }\n        }\n        return max;\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = map.get(word);\n            map.put(word, count == null ? 1\
    \ : count + 1);\n        }\n        \n        for(String word : map.keySet())\
    \ {\n            if(map.get(word) == words.stream().filter(w -> w.equals(word)).count())\
    \ {\n                return word;\n            }\n        }\n        return \"\
    \";\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keys\
    \ = map.keySet();\n        Iterator<String> iterator = keys.iterator();\n    \
    \    while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            if (map.get(key).equals(Collections.max(map.values()))) {\n     \
    \           return key;\n            }\n        }\n        return \"\";\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<String> result = new ArrayList<>();\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if (entry.getValue() == words.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ findMax(result);\n        } else {\n            return result.get(0);\n    \
    \    }\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ Set<String> keys = map.keySet();\n        if (keys.size() == 1) {\n        \
    \    return keys.get(0);\n        }\n        Collections.sort(keys, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        return\
    \ keys.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n    \
    \    for(String word : words) {\n            int count = map.containsKey(word)\
    \ ? map.get(word) : 0;\n            map.put(word, count + 1);\n        }\n   \
    \     \n        List<String> result = new ArrayList<>(map.keySet());\n       \
    \ Collections.sort(result);\n        return result.isEmpty() ? \"\" : result.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c);\n\
    \                } else {\n                    map.put(c, count);\n          \
    \      }\n            }\n        }\n        Collections.sort(words, Comparator.comparing(s\
    \ -> map.get(s)));\n        return words.get(0);\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        Set<String>\
    \ result = new TreeSet<>();\n        for (String key : keySet) {\n           \
    \ Integer count = map.get(key);\n            if (count != null) {\n          \
    \      result.add(key + \": \" + count);\n            }\n        }\n        if\
    \ (result.size() == 1) {\n            return result.iterator().next();\n     \
    \   }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ > 1) {\n            String maxKey = keySet.toArray()[0];\n            for (String\
    \ key : keySet) {\n                if (map.get(key) > map.get(maxKey)) {\n   \
    \                 maxKey = key;\n                }\n            }\n          \
    \  return maxKey;\n        } else {\n            return keySet.toArray()[0];\n\
    \        }\n", "        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word: words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        Optional<String> maxKey = keySet.stream().max(Comparator.comparing(s\
    \ -> map.get(s)));\n        \n        if(maxKey.isPresent()) {\n            return\
    \ maxKey.get();\n        }\n        \n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n\
    \                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        return map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Iterator<Map.Entry<String, Integer>> iterator = set.iterator();\n   \
    \     Map.Entry<String, Integer> entry = iterator.next();\n        while (iterator.hasNext())\
    \ {\n            entry = iterator.next();\n            if (entry.getValue() >\
    \ entry.getKey().length()) {\n                return entry.getKey();\n       \
    \     }\n        }\n        return \"\";\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collections.sort(map.entrySet());\n        return\
    \ map.values().stream().findFirst().orElse(\"\");\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        Iterator<String>\
    \ iterator = keys.iterator();\n        String max = null;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > map.get(max)) {\n                max = key;\n       \
    \     }\n        }\n        return max;\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 0;\n            }\n            map.put(word, count + 1);\n        }\n    \
    \    Collection<String> result = new ArrayList<>();\n        for (String word\
    \ : map.keySet()) {\n            if (map.get(word) == map.size()) {\n        \
    \        result.add(word);\n            }\n        }\n        if (result.size()\
    \ == 0) {\n            return \"\";\n        }\n        if (result.size() > 1)\
    \ {\n            return findMax(result);\n        }\n        return result.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n\
    \        \n        if(keys.size() == 1) {\n            return keys.get(0);\n \
    \       }\n        \n        Collections.sort(keys, new Comparator<String>() {\n\
    \            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        \n\
    \        return keys.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n     \
    \   Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collections.sort(words, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o2) - map.get(o1);\n            }\n        });\n        return words.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      String max = null;\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            int value = map.get(key);\n            if\
    \ (value == map.size()) {\n                max = key;\n            } else if (value\
    \ > map.size()) {\n                max = key;\n            }\n        }\n    \
    \    return max;\n", "        Map<String, Integer> map = new HashMap<>();\n  \
    \      for(String word : words) {\n            int count = map.get(word);\n  \
    \          map.put(word, count == null ? 1 : count + 1);\n        }\n        \n\
    \        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \        \n        for(Map.Entry<String, Integer> entry : map.entrySet()) {\n\
    \            if(entry.getValue() == words.size()) {\n                return entry.getKey();\n\
    \            }\n        }\n        \n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.containsKey(word) ? map.get(word) + 1 : 1;\n         \
    \   map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        if (iterator.hasNext())\
    \ {\n            String maxKey = iterator.next();\n            int maxValue =\
    \ map.get(maxKey);\n            for (String key : keySet) {\n                if\
    \ (map.get(key) > maxValue) {\n                    maxKey = key;\n           \
    \         maxValue = map.get(key);\n                }\n            }\n       \
    \     return maxKey;\n        } else {\n            return \"\";\n        }\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            map.put(word, count + 1);\n        }\n      \
    \  Collection<String> maxWords = map.entrySet().stream()\n                .sorted(Map.Entry.comparingByValue())\n\
    \                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n\
    \        if (maxWords.size() > 1) {\n            return maxWords.get(0);\n   \
    \     }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collections.sort(words, new Comparator<String>() {\n     \
    \       public int compare(String o1, String o2) {\n                return map.get(o2)\
    \ - map.get(o1);\n            }\n        });\n        return words.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        if (keySet.size() == 1) {\n            return keySet.iterator().next();\n\
    \        }\n        Set<String> result = new TreeSet<>();\n        for (String\
    \ key : keySet) {\n            int count = map.get(key);\n            if (count\
    \ > result.size()) {\n                result.add(key);\n            }\n      \
    \  }\n        if (result.size() == 1) {\n            return result.iterator().next();\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        return result.isEmpty() ? \"\" : result.get(0);\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n\
    \        for (Map.Entry<String, Integer> entry : entrySet) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            if(count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        \n     \
    \   Set<String> keySet = map.keySet();\n        \n        Iterator<String> iterator\
    \ = keySet.iterator();\n        \n        while(iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            int value = map.get(key);\n\
    \            if(value > 1) {\n                iterator.remove();\n           \
    \ }\n        }\n        \n        Iterator<String> iterator = keySet.iterator();\n\
    \        \n        while(iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if(value == 1) {\n       \
    \         return key;\n            }\n        }\n        \n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Set<String> result = new TreeSet<>();\n        for (String\
    \ key : keys) {\n            if (map.get(key).equals(keys.size())) {\n       \
    \         result.add(key);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        return \"\";\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        \n        Set<String>\
    \ keySet = map.keySet();\n        \n        Integer maxValue = keySet.isEmpty()\
    \ ? null : Collections.max(keySet);\n        \n        if (maxValue != null) {\n\
    \            String maxKey = maxValue.toString();\n            \n            String\
    \ result = \"\";\n            \n            for (String word : words) {\n    \
    \            if (word.equals(maxKey)) {\n                    result = word;\n\
    \                    break;\n                }\n            }\n            \n\
    \            return result;\n        }\n        \n        return \"\";\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1);\n            } else {\n         \
    \       map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        iterator.next();\n        String maxKey = iterator.next();\n        int\
    \ maxCount = map.get(maxKey);\n        for (String key : keySet) {\n         \
    \   if (map.get(key) > maxCount) {\n                maxKey = key;\n          \
    \      maxCount = map.get(key);\n            }\n        }\n        return maxKey;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Collections.sort(keys);\n        return keys.get(0);\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1);\n            } else {\n         \
    \       map.put(word, count + 1);\n            }\n        }\n        Collections.sort(words,\
    \ (a, b) -> map.get(b).compareTo(map.get(a)));\n        return words.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            Integer count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collections.sort(words);\n\
    \        for (String word : words) {\n            Integer count = map.get(word);\n\
    \            if (count == null) {\n                return word;\n            }\n\
    \            if (count > map.size()) {\n                return word;\n       \
    \     }\n        }\n        return \"\";\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        Set<String> keys = map.keySet();\n\
    \        if (keys.size() == 1) {\n            return keys.get(0);\n        }\n\
    \        int maxCount = 1;\n        String maxWord = \"\";\n        for (String\
    \ key : keys) {\n            if (map.get(key) > maxCount) {\n                maxCount\
    \ = map.get(key);\n                maxWord = key;\n            }\n        }\n\
    \        return maxWord;\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count == null ? 1 : count + 1);\n        }\n      \
    \  \n        List<String> result = new ArrayList<>();\n        for(String word\
    \ : map.keySet()) {\n            int count = map.get(word);\n            if(count\
    \ == map.size()) {\n                result.add(word);\n            }\n       \
    \ }\n        \n        if(result.size() == 1) {\n            return result.get(0);\n\
    \        }\n        \n        Collections.sort(result);\n        \n        return\
    \ result.size() == 1 ? result.get(0) : \"\";\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keySet = map.keySet();\n\
    \        \n        Integer maxValue = keySet.isEmpty() ? null : keySet.stream().max(Comparator.comparingInt(Integer::intValue)).get();\n\
    \        \n        return maxValue == null ? \"\" : maxValue.equals(map.get(maxValue))\
    \ ? \"\" : maxValue;\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        int\
    \ maxCount = keySet.size();\n        for (String key : keySet) {\n           \
    \ if (map.get(key) > maxCount) {\n                maxCount = map.get(key);\n \
    \           }\n        }\n        return keySet.get(0);\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keySet = map.keySet();\n       \
    \ if (keySet.size() == 1) {\n            return keySet.iterator().next();\n  \
    \      }\n        Collections.sort(keySet);\n        return keySet.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n\
    \        for (Map.Entry<String, Integer> entry : entrySet) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1);\n            } else {\n         \
    \       map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Iterator<String> iterator = keySet.iterator();\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if (value > map.get(iterator.next()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key) ==\
    \ map.size()) {\n                return key;\n            }\n        }\n     \
    \   return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n  \
    \      for (String word : words) {\n            int count = 0;\n            for\
    \ (char c : word.toCharArray()) {\n                count += map.getOrDefault(String.valueOf(c),\
    \ 0);\n                map.put(String.valueOf(c), count + 1);\n            }\n\
    \        }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        Collections.sort(keySet);\n\
    \        return keySet.iterator().next();\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        iterator.next();\n        String maxKey\
    \ = iterator.next();\n        int maxCount = map.get(maxKey);\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                maxKey = key;\n        \
    \        maxCount = count;\n            }\n        }\n        return maxKey;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 0;\n            }\n            map.put(word, count\
    \ + 1);\n        }\n        Collections.sort(words);\n        for (String word\
    \ : words) {\n            if (map.get(word) == words.size()) {\n             \
    \   return word;\n            }\n        }\n        return \"\";\n", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        Iterator<String> iterator = keySet.iterator();\n\
    \        \n        while(iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if (value > 1) {\n       \
    \         return key;\n            }\n        }\n        return \"\";\n", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            Integer count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Collections.sort(keys, Comparator.comparing(s -> map.get(s)));\n\
    \        return keys.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n\
    \        return words.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n\
    \        return words.get(0);\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keys = map.keySet();\n        if (keys.size() ==\
    \ 1) {\n            return keys.get(0);\n        }\n        List<String> result\
    \ = new ArrayList<>();\n        for (String key : keys) {\n            if (map.get(key)\
    \ == map.get(keys.get(1))) {\n                result.add(key);\n            }\n\
    \        }\n        if (result.size() == 1) {\n            return result.get(0);\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (map.size() > words.size()) {\n               \
    \ return word;\n            }\n        }\n        return \"\";\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       Integer count = map.get(word);\n            if (count == null) {\n   \
    \             map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        String maxKey = null;\n        for (String key : map.keySet()) {\n  \
    \          if (maxValue == map.get(key)) {\n                maxKey = key;\n  \
    \          }\n        }\n        return maxKey;\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        Set<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return \"\";\n            }\n        }\n\
    \        return map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word: words)\
    \ {\n            int count = map.get(word);\n            map.put(word, count ==\
    \ null ? 1 : count + 1);\n        }\n        Collections.sort(words, (a, b) ->\
    \ map.get(a) > map.get(b) ? 1 : -1);\n        return words.get(0);\n", "     \
    \   Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        \n        Set<String> keys =\
    \ map.keySet();\n        if (keys.size() > 0) {\n            String maxKey = keys.iterator().next();\n\
    \            for (String key : keys) {\n                if (map.get(key) > map.get(maxKey))\
    \ {\n                    maxKey = key;\n                }\n            }\n   \
    \         return maxKey;\n        } else {\n            return \"\";\n       \
    \ }\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collections.sort(words);\n        String maxWord\
    \ = words.get(0);\n        for (String word : words) {\n            if (map.get(word)\
    \ > map.get(maxWord)) {\n                maxWord = word;\n            }\n    \
    \    }\n        return maxWord;\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            if (map.get(key) == keySet.size())\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        int maxCount = keySet.size();\n\
    \        for (String word : keySet) {\n            if (map.get(word) == maxCount)\
    \ {\n                return word;\n            }\n        }\n        return \"\
    \";\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Iterator<String> iterator = keySet.iterator();\n\
    \        int maxCount = 1;\n        String maxWord = null;\n        while (iterator.hasNext())\
    \ {\n            String word = iterator.next();\n            int count = map.get(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \        String maxWord = maxValue == null ? \"\" : maxValue.toString();\n   \
    \     for(String word : words) {\n            int count = map.get(word);\n   \
    \         if(count != maxValue) {\n                maxValue = count;\n       \
    \         maxWord = word;\n            }\n        }\n        return maxWord;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        if (keySet.size() == 1) {\n            return keySet.iterator().next();\n\
    \        }\n        List<String> sortedKeys = new ArrayList<>(keySet);\n     \
    \   Collections.sort(sortedKeys);\n        return sortedKeys.iterator().next();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n", "       \
    \ Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        if (keySet.size() == 1) {\n            return keySet.iterator().next();\n\
    \        }\n        Set<String> result = new TreeSet<>();\n        for (String\
    \ key : keySet) {\n            if (map.get(key).equals(keySet.size())) {\n   \
    \             result.add(key);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.iterator().next();\n        }\n        return\
    \ \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            Integer count = map.get(word);\n      \
    \      if (count == null) {\n                map.put(word, 1);\n            }\
    \ else {\n                map.put(word, count + 1);\n            }\n        }\n\
    \        \n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        \n\
    \        List<String> sortedKeys = new ArrayList<>(keySet);\n        Collections.sort(sortedKeys);\n\
    \        \n        int maxCount = 0;\n        String maxWord = \"\";\n       \
    \ for (String word : sortedKeys) {\n            int count = map.get(word);\n \
    \           if (count > maxCount) {\n                maxCount = count;\n     \
    \           maxWord = word;\n            }\n        }\n        return maxWord;\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        int maxCount = keys.size();\n        String maxWord\
    \ = \"\";\n        for (String key : keys) {\n            if (map.get(key) ==\
    \ maxCount) {\n                maxWord = key;\n            }\n        }\n    \
    \    return maxWord;\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count == null ? 1 : count + 1);\n        }\n      \
    \  \n        Set<String> keySet = map.keySet();\n        \n        Integer maxValue\
    \ = keySet.isEmpty() ? null : Collections.max(keySet);\n        \n        for(String\
    \ word : keySet) {\n            if(maxValue == null || maxValue < map.get(word))\
    \ {\n                maxValue = map.get(word);\n            }\n        }\n   \
    \     \n        return maxValue == null ? \"\" : maxValue.toString();\n", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        \n        List<String> result = new ArrayList<>();\n     \
    \   for(String word : words) {\n            int maxCount = -1;\n            for(char\
    \ c : word.toCharArray()) {\n                if(map.containsKey(c)) {\n      \
    \              if(maxCount < map.get(c)) {\n                        maxCount =\
    \ map.get(c);\n                    }\n                }\n            }\n     \
    \       if(maxCount > -1) {\n                result.add(word);\n            }\n\
    \        }\n        \n        if(result.size() > 1) {\n            return result.get(0);\n\
    \        }\n        \n        return \"\";\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                count =\
    \ 1;\n            } else {\n                count++;\n            }\n        \
    \    map.put(word, count);\n        }\n        \n        Set<String> uniqueWords\
    \ = new HashSet<>();\n        for (String word : map.keySet()) {\n           \
    \ uniqueWords.add(word);\n        }\n        \n        Collections.sort(uniqueWords);\n\
    \        \n        return uniqueWords.isEmpty() ? \"\" : uniqueWords.iterator().next();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        int maxCount = keySet.size();\n\
    \        for (String word : keySet) {\n            if (map.get(word) == maxCount)\
    \ {\n                return word;\n            }\n        }\n        return \"\
    \";\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        return result.isEmpty() ? \"\" : result.get(0);\n", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       Integer count = map.get(word);\n            if (count == null) {\n   \
    \             map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collections.sort(map.entrySet());\n        Map.Entry<String,\
    \ Integer> maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = 0;\n\
    \            for (int i = 0; i < word.length(); i++) {\n                char c\
    \ = word.charAt(i);\n                if (map.containsKey(c)) {\n             \
    \       count = map.get(c) + 1;\n                } else {\n                  \
    \  map.put(c, 1);\n                }\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Set<String> keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        iterator.next();\n        String maxKey = iterator.next();\n        int\
    \ maxCount = map.get(maxKey);\n        while (iterator.hasNext()) {\n        \
    \    String key = iterator.next();\n            if (map.get(key) > maxCount) {\n\
    \                maxKey = key;\n                maxCount = map.get(key);\n   \
    \         }\n        }\n        return maxKey;\n", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        int maxCount = keySet.size();\n     \
    \   while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int count = map.get(key);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n            }\n        }\n        if (maxCount\
    \ == 0) {\n            return \"\";\n        }\n        Iterator<String> iterator\
    \ = keySet.iterator();\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            int count = map.get(key);\n            if\
    \ (count > maxCount) {\n                return key;\n            }\n        }\n\
    \        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        Set<String>\
    \ result = new HashSet<>();\n        for (String word : keySet) {\n          \
    \  int count = map.get(word);\n            if (count > result.size()) {\n    \
    \            result.clear();\n                result.add(word);\n            }\
    \ else if (count == result.size()) {\n                result.add(word);\n    \
    \        }\n        }\n        if (result.size() == 1) {\n            return result.iterator().next();\n\
    \        }\n        return \"\";\n", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.containsKey(word)\
    \ ? map.get(word) : 0;\n            map.put(word, count + 1);\n        }\n   \
    \     Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        int maxCount = keys.size();\n        String maxWord = \"\"\
    ;\n        for (String key : keys) {\n            if (map.get(key) == maxCount)\
    \ {\n                maxWord = key;\n            }\n        }\n        return\
    \ maxWord;\n", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = 0;\n            for (int i\
    \ = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n \
    \               if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        if (keys.size() > 1) {\n            String maxKey\
    \ = keys.stream().max(Comparator.comparing(k -> map.get(k))).get();\n        \
    \    return maxKey;\n        } else {\n            return keys.get(0);\n     \
    \   }\n", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collections.sort(words,\
    \ (a, b) -> map.get(a).compareTo(map.get(b)));\n        return words.get(0);\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.entrySet().stream().filter(e -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().get();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collections.sort(words);\n\
    \        String maxWord = words.get(0);\n        int maxCount = map.get(maxWord);\n\
    \        for (int i = 1; i < words.size(); i++) {\n            String word = words.get(i);\n\
    \            int count = map.get(word);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;\n", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  char c = word.charAt(i);\n                if (map.containsKey(c)) {\n     \
    \               count = map.get(c) + 1;\n                } else {\n          \
    \          map.put(c, 1);\n                }\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collections.sort(map.entrySet());\n        return map.entrySet().stream().filter(e\
    \ -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().get();\n",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            map.put(word,\
    \ count);\n        }\n        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n\
    \        return map.entrySet().stream().filter(e -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().get();\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
