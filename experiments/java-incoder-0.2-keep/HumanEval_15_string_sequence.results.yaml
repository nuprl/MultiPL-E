name: HumanEval_15_string_sequence
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk1fw_z7o.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4dne7ak.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp693sc_y.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu35hr6ta.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztqguf6h.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppf6qk8ej.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppvpbwtpd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8umejkn4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzpmr_09.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsq0__2xw.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa79f5xv7.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq3w4gccb.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdktfvvdq.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhxno_pu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpygfdz2ec.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdu4qg8xe.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzg8ysocl.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \                                                  ^\n/tmp/tmpzg8ysocl.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptgqd_ff0.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\n/tmp/tmptgqd_ff0.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinvbsh_x.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxbunsx4.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppyqlwuw0.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgnpsn5u2.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmpgnpsn5u2.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj1a_zuid.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdgn60wl5.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnsda68y4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6w15wk9.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuwbhn98z.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbooip5c.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe1eyat9l.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return String.join(\" \", numbers);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0jykrenw.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\n/tmp/tmp0jykrenw.java:16:\
    \ error: no suitable method found for join(String,List<Integer>)\n        return\
    \ String.join(\" \", numbers);\n                     ^\n    method String.join(CharSequence,CharSequence...)\
    \ is not applicable\n      (varargs mismatch; List<Integer> cannot be converted\
    \ to CharSequence)\n    method String.join(CharSequence,Iterable<? extends CharSequence>)\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to Iterable<? extends CharSequence>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw715h5fn.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf001nlun.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp81yth1mx.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmjsb0evw.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpof2oe7ph.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgw73lgc8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9o3l7im1.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnh2zxnct.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgojeb77l.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtyk7ul1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyg5uis09.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0oyi2lj1.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxv_dnbv8.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxne6j98o.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvs9zhaza.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb2xz793x.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxdasid_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcl_hy3xz.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne1_d4go.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0ilqueu.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu9csa4wj.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\n/tmp/tmpu9csa4wj.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9fa_r504.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nfqyx3z.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpse7yw237.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmpse7yw237.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54d0z1ur.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        StringBuilder sb = new StringBuilder();\n        numbers.forEach(i ->\
    \ sb.append(i).append(\" \"));\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppgajnct1.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzy3d5ulg.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpigwz3r4z.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq9__78ox.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7b7jfjv3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6_t7rmvn.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmp6_t7rmvn.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1839q2w3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb2l14qul.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5gp0ho72.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcl4ruxq1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        StringBuilder sb = new StringBuilder();\n        list.forEach(i -> sb.append(i).append(\"\
    \ \"));\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoal8yqmg.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2of_lew9.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5hyfes9c.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i <= n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5pjqq8_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0vy2lha_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3r5er7x9.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxk712fr.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5440h987.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp16dqqz1t.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsfo7rlcd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9k0vipyf.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy0ttv1o9.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppc4i6vya.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnpciskz6.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe7hvt5vg.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbyg1_rxi.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp651uqkob.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3_jtlio.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        StringBuilder builder = new StringBuilder();\n        list.forEach(i\
    \ -> builder.append(i).append(\" \"));\n        return builder.toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsnlec82h.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyrrt5qhu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplywb6s8e.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(i -> numbers.get(i)).collect(Collectors.joining(\" \"));\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzo283wml.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(i -> numbers.get(i)).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp40hoyydg.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy_bn4438.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpts7wy1pm.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4lgxsh3d.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return String.join(\"\
    \ \", numbers);\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7bnoyfu.java:19: error: no suitable method found for join(String,List<Integer>)\n\
    \        return String.join(\" \", numbers);\n                     ^\n    method\
    \ String.join(CharSequence,CharSequence...) is not applicable\n      (varargs\
    \ mismatch; List<Integer> cannot be converted to CharSequence)\n    method String.join(CharSequence,Iterable<?\
    \ extends CharSequence>) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to Iterable<? extends CharSequence>)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return String.join(\"\
    \ \", numbers);\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbxt5u9b9.java:19: error: no suitable method found for join(String,List<Integer>)\n\
    \        return String.join(\" \", numbers);\n                     ^\n    method\
    \ String.join(CharSequence,CharSequence...) is not applicable\n      (varargs\
    \ mismatch; List<Integer> cannot be converted to CharSequence)\n    method String.join(CharSequence,Iterable<?\
    \ extends CharSequence>) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to Iterable<? extends CharSequence>)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp00jq4eqo.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvih4kkq.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoc8ig1hr.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5tygf7m.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmply3q1kv3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vhvjssb.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0c92gdd.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2lmq4bh5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp633vdxaf.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhw8nn2k.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxdym7_d.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4cgil1m.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvl662h87.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy4ltzxxv.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3eoshjjn.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9lhobdz.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplnzn60x_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptifammud.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpok_hf5ew.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, numbers.size()).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm73z1mhh.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp957gv6p7.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmp957gv6p7.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6c7tdbau.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ainm06_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphm6u6ifx.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmkvlfvb.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_585441p.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbiyx2k2p.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \                                                  ^\n/tmp/tmpbiyx2k2p.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe2jcmbp3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0aivr103.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppujgi024.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\n/tmp/tmppujgi024.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpux92bfj0.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw2xt65qg.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbyl9ea_t.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb64466j6.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9j0w1xf.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2dl8w9x.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdcinj_4a.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8sgchjn0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnytkha_4.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0myrxp2n.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoxnunnvo.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnfd211jl.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsyvhl_l.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlemo9m1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcknpw60p.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqu63e27.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvh82u8xz.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprtbsyesr.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9obme4p.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21tnsk48.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3tb0lcfu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3p_a03z.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i <= n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptx1em66j.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmptx1em66j.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2uikh67w.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrege7d4.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrre9eo1.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_jq9pxzj.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphw0nknjd.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwoq6a8v.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb5e_j6ts.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2c2b8als.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpia5ptfs8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwn34s3s.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb5pymyfo.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpby7s9145.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsxw3gvng.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2hqiy40m.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb982ocn0.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8_z3_u2a.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmp8_z3_u2a.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp177irff4.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return numbers.stream().map(i\
    \ -> String.valueOf(i)).collect(Collectors.joining(\" \"));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvhr_c40.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx6f2dkkz.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7cwq0nb9.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1gqrjr0a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvbchpm7.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhys0n3k.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowglsce8.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyitn48ed.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm4qymfi.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5m1wdaf.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmpi5m1wdaf.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzefv2yyy.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp987416bj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztl0b4er.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeefmwjdz.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \                                                  ^\n/tmp/tmpeefmwjdz.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgnwccy48.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb3ztpdil.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppeld6ubx.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp665y22a4.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22fkodsh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwdx0kc9k.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9pcbuh0u.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplvl6f8oa.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wmjhkeg.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ys0dahw.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6x5y5qhs.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfhvjjk7h.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmponwyy6vv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ahacj2w.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6j28_bi1.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5bu77dc.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplsr6q51i.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkic7zkcs.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3t4_7rr.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp88jnpi_k.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0i_52_gw.java:24)\n"
  exit_code: 1
  status: Exception
