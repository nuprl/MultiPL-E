name: HumanEval_15_string_sequence
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplk9qw3ox.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpibzeopa9.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpud8_rwao.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfw3bpa_z.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwo5i4_ml.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu7_541mg.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsk_pw44g.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaaq_rx7e.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76c7zcq2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptubf1du6.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp33zryohq.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxwck3k9l.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqs3zi7s.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvd7ab6jr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy35a2l1l.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpypw_a8i6.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2dp0x44i.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \                                                  ^\n/tmp/tmp2dp0x44i.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrkl78yn.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\n/tmp/tmpqrkl78yn.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13a8x6up.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4wch0o68.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfo7amjs4.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_y2m6vv.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmp0_y2m6vv.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6vj4g3co.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jdfhraj.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_nq1k5j0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1dy8wky.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7al9trn.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7lonmovt.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpos24hxbl.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return String.join(\" \", numbers);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8tyfbtfc.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\n/tmp/tmp8tyfbtfc.java:16:\
    \ error: no suitable method found for join(String,List<Integer>)\n        return\
    \ String.join(\" \", numbers);\n                     ^\n    method String.join(CharSequence,CharSequence...)\
    \ is not applicable\n      (varargs mismatch; List<Integer> cannot be converted\
    \ to CharSequence)\n    method String.join(CharSequence,Iterable<? extends CharSequence>)\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to Iterable<? extends CharSequence>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptg6hkwfv.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9c8u8m6_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5nhetyp5.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn9hviux8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve04_yl0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparuibmdk.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7388sclf.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq59p0aj7.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4pqy9at.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbwq6_lw.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeyug72vx.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc32g2ofv.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppqco92rz.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4po2tomn.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmlk52di.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7hdn6s33.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp70z5jvhl.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0xstet07.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp791nbs3u.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgf4y5vrb.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7eyd2ey.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\n/tmp/tmpi7eyd2ey.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqzi2qp0.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp28ksy1m1.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6t_px47k.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmp6t_px47k.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0oojgg5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        StringBuilder sb = new StringBuilder();\n        numbers.forEach(i ->\
    \ sb.append(i).append(\" \"));\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdd585bpc.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_9chnriv.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\n/tmp/tmp_9chnriv.java:19: error:\
    \ invalid method reference\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                              ^\n  non-static method\
    \ toString() cannot be referenced from a static context\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpan0px9tu.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktfilxlb.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbuntmjqf.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl2x6z0o4.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmpl2x6z0o4.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptjn3jcs_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp745ailvg.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsnrvcrmh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_0uqdmup.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        StringBuilder sb = new StringBuilder();\n        list.forEach(i -> sb.append(i).append(\"\
    \ \"));\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8j1u12oa.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn7oe45j3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpym0gufvo.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i <= n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_gvtet9.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6uyftpo.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzfjo5f6.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\n/tmp/tmpfzfjo5f6.java:19: error:\
    \ invalid method reference\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                              ^\n  non-static method\
    \ toString() cannot be referenced from a static context\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgy4kbcwh.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4d2fjp9g.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf1qvlke3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4j5mv_36.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7mhii60.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7th59fi4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3q49i3lw.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkufy75_8.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvygf9oz.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr2x8oqdy.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxip2otko.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc6utk07u.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        StringBuilder builder = new StringBuilder();\n        list.forEach(i\
    \ -> builder.append(i).append(\" \"));\n        return builder.toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcnojqvu7.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbwyj_wj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_aippa6.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(i -> numbers.get(i)).collect(Collectors.joining(\" \"));\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrek7ml2.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(i -> numbers.get(i)).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1icp6ljq.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfkygbs6x.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcdb5ve0.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpak0nl84x.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return String.join(\"\
    \ \", numbers);\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgs8ijs61.java:19: error: no suitable method found for join(String,List<Integer>)\n\
    \        return String.join(\" \", numbers);\n                     ^\n    method\
    \ String.join(CharSequence,CharSequence...) is not applicable\n      (varargs\
    \ mismatch; List<Integer> cannot be converted to CharSequence)\n    method String.join(CharSequence,Iterable<?\
    \ extends CharSequence>) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to Iterable<? extends CharSequence>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return String.join(\"\
    \ \", numbers);\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr5mcdder.java:19: error: no suitable method found for join(String,List<Integer>)\n\
    \        return String.join(\" \", numbers);\n                     ^\n    method\
    \ String.join(CharSequence,CharSequence...) is not applicable\n      (varargs\
    \ mismatch; List<Integer> cannot be converted to CharSequence)\n    method String.join(CharSequence,Iterable<?\
    \ extends CharSequence>) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to Iterable<? extends CharSequence>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return IntStream.range(0,\
    \ n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt6p1pciy.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\n/tmp/tmpt6p1pciy.java:19: error:\
    \ invalid method reference\n        return IntStream.range(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                              ^\n  non-static method\
    \ toString() cannot be referenced from a static context\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxiv_5lme.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp597l7ru8.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5okmv07a.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpajqpu6rw.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqn5w2c6.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc7qvkej4.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_4bdmnaw.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29c2ozhk.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeus7l872.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6j6e484j.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvxm_w73.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkp1o_uz3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpekx9__3d.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm3quft4e.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx6f67z2f.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlfwz5q9.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkcwdf7cj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9h0n92tv.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, numbers.size()).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcr4vtjdi.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxv9exhee.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmpxv9exhee.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpszfm17f8.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpya_xecyd.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6fgdeui.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzq5mtly.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm307kskr.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo7xa7sv1.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \                                                  ^\n/tmp/tmpo7xa7sv1.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_g6ge2zq.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8stpnpk.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0fl4zpqe.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0, n).boxed().collect(Collectors.toList());\n\
    \                                                   ^\n/tmp/tmp0fl4zpqe.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr4_odjq8.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8g1rjxw7.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3ij3hqh.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvtzkqjv2.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpovh4_9rh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4jufwy4i.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppb5no_op.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8essq61_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i721w5v.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqkyqf1y.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvq97bt3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_20qciv.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0d6jf1vy.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t_bkgfo.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdzrkc39m.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30cm5dx4.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_12crm7.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0jsmb4z2.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1us7fusk.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkmxbpo_8.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzo6cdd6r.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxgvf7kwy.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i <= n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8axynvtj.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmp8axynvtj.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1lua39r.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzc2ymts.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7ooel7u.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpab4esd3y.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2i0ahdga.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp85ih9apt.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3gx1wul0.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2p31uy66.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbo0uky3u.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqdfhzu2.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfbvxdqh3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5xablop.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpza_ub342.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpltu4j659.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzuucwdby.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp74j9brv.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmpp74j9brv.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkb7nthlc.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            numbers.add(i);\n        }\n        return numbers.stream().map(i\
    \ -> String.valueOf(i)).collect(Collectors.joining(\" \"));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp45k9w1yv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3how2o4y.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_9ew3rg.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj84x5m_w.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsxclcpwv.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjt8ihm_a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rdd03v_.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i\
    \ = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__cxoyeg.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpydnt3agt.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsp2eyjn.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                         ^\n/tmp/tmpxsp2eyjn.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.rangeClosed(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                        ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<String> result = new ArrayList<>();\n        for (long i\
    \ = 0; i < n; i++) {\n            result.add(String.valueOf(i));\n        }\n\
    \        return String.join(\" \", result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvjvvnwp.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4u_7nh_r.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpemv_04ad.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd2rdakwk.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> numbers = IntStream.range(0,n).boxed().collect(Collectors.toList());\n\
    \                                                  ^\n/tmp/tmpd2rdakwk.java:16:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return IntStream.range(0, n).mapToObj(i -> String.valueOf(numbers.get(i))).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxgji57zy.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphbnzpnww.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6k2y_yol.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7emamshw.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> list = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \                                                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiivdpjeb.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ry46kkk.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpws_ibclm.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplj5qmf2u.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofg85oi3.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl3wo4qjz.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2h6mzwcw.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3csc1xiq.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpya50dwa1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30zyyv1a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy3f4ibtw.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq981y25x.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpluidrlbk.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_5vwhge.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6sszvehe.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (long i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ph_d2ml.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(long\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplk_lxq1s.java:24)\n"
  exit_code: 1
  status: Exception
