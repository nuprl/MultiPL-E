name: HumanEval_147_get_max_triples
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1;\
    \ j < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++)\
    \ {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n                 \
    \       result += (a[i] + a[j] + a[k]) % 3 == 0 ? 1 : 0;\n                   \
    \ }\n                }\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmporwf4cil.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppzv3pahm.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long max = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                        if(a[i] > max) {\n                            max = a[i];\n\
    \                        }\n                        if(a[j] > max) {\n       \
    \                     max = a[j];\n                        }\n               \
    \         if(a[k] > max) {\n                            max = a[k];\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq3xhzaoe.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpimzas2dl.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7wkpoz6.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6z2jm1_.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5qjxtyv.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long max = 0;\n        long count = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    count++;\n                    }\n                }\n    \
    \        }\n            sum += count;\n            max = Math.max(max, sum);\n\
    \            count = 0;\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphg1bs671.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplm5o55n9.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkri3ejo0.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu3tmojcd.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9e0ep38d.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpms8xbj88.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        long sum = a[i]\
    \ + a[j] + a[k];\n                        if (sum % 3 == 0) {\n              \
    \              triples++;\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return triples;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vpc0fsg.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \   }\n                }\n            }\n        }\n        return triple;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplckxkm6m.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == (3 * i) + (3 * j) + (3 * k)) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp05hqdvor.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1bh94s0f.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp15xwf7va.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long max = 0;\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            sum\
    \ += a[i];\n            if(sum % 3 == 0) {\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsjric6xn.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long triple = 0;\n        long triple2 = 0;\n        long triple3 = 0;\n\
    \        long triple4 = 0;\n        long triple5 = 0;\n        long triple6 =\
    \ 0;\n        long triple7 = 0;\n        long triple8 = 0;\n        long triple9\
    \ = 0;\n        long triple10 = 0;\n        long triple11 = 0;\n        long triple12\
    \ = 0;\n        long triple13 = 0;\n        long triple14 = 0;\n        long triple15\
    \ = 0;\n        long triple16 = 0;\n        long triple17 = 0;\n        long triple18\
    \ = 0;\n        long triple19 = 0;\n        long triple20 = 0;\n        long triple21\
    \ = 0;\n        long triple22 = 0;\n        long triple23 = 0;\n        long triple24\
    \ = 0;\n        long triple25 = 0;\n        long triple26 = 0;\n        long triple27\
    \ = 0;\n        long triple28 = 0;\n        long triple29 = 0;\n        long triple30\
    \ = 0;\n        long triple31 = 0;\n        long triple32 = 0;\n        long triple33\
    \ = 0;\n        long triple34 = 0;\n        long triple35 = 0;\n        long triple36\
    \ = 0;\n        long triple37 = 0;\n        long triple38 = 0;\n        long triple39\
    \ = 0;\n        long triple40 = 0;\n        long triple41 = 0;\n        long triple42\
    \ = 0;\n        long triple43 = 0;\n        long triple44 = 0;\n        long triple45\
    \ = 0;\n        long triple46 = 0;\n        long triple47 = 0;\n        long triple48\
    \ = 0;\n        long triple49 = 0;\n        long triple50 = 0;\n        long triple51\
    \ = 0;\n        long triple52 = 0;\n        long triple53 = 0;\n        long triple54\
    \ = 0;\n        long triple55 = 0;\n        long triple56 = 0;\n        long triple57\
    \ = 0;\n        long triple58 = 0;\n        long triple59 = 0;\n        long triple60\
    \ = 0;\n        long triple61 = 0;\n        long triple62 = 0;\n        long triple63\
    \ = 0;\n        long triple64 = 0;\n        long triple65 = 0;\n        long triple66\
    \ = 0;\n        long triple67 = 0;\n        long triple68 = 0;\n        long triple69\
    \ = 0;\n        long triple70 = 0;\n        long triple71 = 0;\n        long triple72\
    \ = 0;\n        long triple73 = 0;\n        long triple74 = 0;\n        long triple75\
    \ = 0;\n        long triple76 = 0;\n        long triple77 = 0;\n        long triple78\
    \ = 0;\n        long triple79 = 0;\n        long triple80 = 0;\n        long triple81\
    \ = 0;\n        long triple82 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj9wm_l6j.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 0; i < a.length; i++){\n            for(int j = i+1; j <\
    \ a.length; j++){\n                for(int k = j+1; k < a.length; k++){\n    \
    \                if(a[i] + a[j] + a[k] == 3){\n                        result\
    \ = Math.max(result, i + j + k);\n                    }\n                }\n \
    \           }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4kck0hdq.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp074jnfmi.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[i] < a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7db_f8yp.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4so7c336.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long triple = 0;\n        long triple2 = 0;\n        long triple3 = 0;\n\
    \        long triple4 = 0;\n        long triple5 = 0;\n        long triple6 =\
    \ 0;\n        long triple7 = 0;\n        long triple8 = 0;\n        long triple9\
    \ = 0;\n        long triple10 = 0;\n        long triple11 = 0;\n        long triple12\
    \ = 0;\n        long triple13 = 0;\n        long triple14 = 0;\n        long triple15\
    \ = 0;\n        long triple16 = 0;\n        long triple17 = 0;\n        long triple18\
    \ = 0;\n        long triple19 = 0;\n        long triple20 = 0;\n        long triple21\
    \ = 0;\n        long triple22 = 0;\n        long triple23 = 0;\n        long triple24\
    \ = 0;\n        long triple25 = 0;\n        long triple26 = 0;\n        long triple27\
    \ = 0;\n        long triple28 = 0;\n        long triple29 = 0;\n        long triple30\
    \ = 0;\n        long triple31 = 0;\n        long triple32 = 0;\n        long triple33\
    \ = 0;\n        long triple34 = 0;\n        long triple35 = 0;\n        long triple36\
    \ = 0;\n        long triple37 = 0;\n        long triple38 = 0;\n        long triple39\
    \ = 0;\n        long triple40 = 0;\n        long triple41 = 0;\n        long triple42\
    \ = 0;\n        long triple43 = 0;\n        long triple44 = 0;\n        long triple45\
    \ = 0;\n        long triple46 = 0;\n        long triple47 = 0;\n        long triple48\
    \ = 0;\n        long triple49 = 0;\n        long triple50 = 0;\n        long triple51\
    \ = 0;\n        long triple52 = 0;\n        long triple53 = 0;\n        long triple54\
    \ = 0;\n        long triple55 = 0;\n        long triple56 = 0;\n        long triple57\
    \ = 0;\n        long triple58 = 0;\n        long triple59 = 0;\n        long triple60\
    \ = 0;\n        long triple61 = 0;\n        long triple62 = 0;\n        long triple63\
    \ = 0;\n        long triple64 = 0;\n        long triple65 = 0;\n        long triple66\
    \ = 0;\n        long triple67 = 0;\n        long triple68 = 0;\n        long triple69\
    \ = 0;\n        long triple70 = 0;\n        long triple71 = 0;\n        long triple72\
    \ = 0;\n        long triple73 = 0;\n        long triple74 = 0;\n        long triple75\
    \ = 0;\n        long triple76 = 0;\n        long triple77 = 0;\n        long triple78\
    \ = 0;\n        long triple79 = 0;\n        long triple80 = 0;\n        long triple81\
    \ = 0;\n        long triple82 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr9ko7e2y.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmporns6_ha.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphckdr3r4.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long max = 0;\n        for(int i = 1; i < n; i++) {\n            sum\
    \ += a[i];\n            if(sum % 3 == 0) {\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpozanxa_r.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqugclgn3.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.parallelSetAll(a, i -> i * i - i +\
    \ 1);\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n        \
    \    for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k\
    \ < n; k++) {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n       \
    \                 long triple = a[i] + a[j] + a[k];\n                        if\
    \ (triple > max) {\n                            max = triple;\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n        return max;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2wq8_iuj.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long count = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += a[i];\n\
    \                        count += 1;\n                    }\n                }\n\
    \            }\n        }\n        return sum;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmtkk_y8u.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                        sum += a[i];\n                    }\n       \
    \         }\n            }\n        }\n        return sum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7u7uqqo.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5p73ne6q.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp88axdzcf.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplsyca3dv.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpulqniu_o.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprnq3tjpi.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkro01sxu.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpplg0v6ly.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1;\
    \ j < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k]) {\n                 \
    \       count++;\n                    }\n                }\n            }\n  \
    \      }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptzoijzl2.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        long sum = 0;\n        long cur = 0;\n        long prev = 0;\n      \
    \  for(int i = 0; i < n; i++) {\n            sum += a[i];\n            if(sum\
    \ % 3 == 0) {\n                cur = a[i];\n                prev = sum;\n    \
    \        }\n            else if(sum % 3 != 0) {\n                ans += (cur -\
    \ prev);\n                cur = a[i];\n                prev = sum;\n         \
    \   }\n        }\n        ans += (cur - prev);\n        return ans;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmped3ktzar.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long max = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            sum\
    \ += a[i];\n            if(sum % 3 == 0) {\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9sw2_o82.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph50hhedt.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4b8t9o3l.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphy2nx_q_.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                      \
    \  triples += 1;\n                    }\n                }\n            }\n  \
    \      }\n        return triples;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjg7rf2ip.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp73aixgts.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            sum\
    \ += a[i];\n            for(int j = i; j < n; j++) {\n                sum += a[j];\n\
    \                for(int k = j; k < n; k++) {\n                    sum += a[k];\n\
    \                    if(sum % 3 == 0) {\n                        result += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpilhp8m7m.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpucjl7o8k.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[i] < a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcbb8buz9.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv747zs_7.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < a.length; i++) {\n            for(int j = i+1; j <\
    \ a.length; j++) {\n                for(int k = j+1; k < a.length; k++) {\n  \
    \                  if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphs_hycnc.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                    }\n                }\n            }\n        }\n        System.out.println(sum);\n\
    \        return sum;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdz02wc1v.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += a[i];\n\
    \                        sum += a[j];\n                        sum += a[k];\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqkkswiup.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpindrwf9d.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += a[i];\n\
    \                        sum += a[j];\n                        sum += a[k];\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvgpf5vto.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        count++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj4jyps3i.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1;\
    \ j < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k]) {\n                 \
    \       count++;\n                    }\n                }\n            }\n  \
    \      }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu92csvti.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long triple = 0;\n        long triple2 = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    triple = a[i] + a[j]\
    \ + a[k];\n                    if (triple % 3 == 0) {\n                      \
    \  triples += 1;\n                    }\n                }\n            }\n  \
    \      }\n        return triples;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrohp42a.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpse5swyai.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += a[i];\n\
    \                        sum += a[j];\n                        sum += a[k];\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprovo43vs.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < a.length; i++) {\n            for(int j = i + 1; j\
    \ < a.length; j++) {\n                for(int k = j + 1; k < a.length; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvt_ximc6.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < a.length - 1; i++) {\n            for (int j = i\
    \ + 1; j < a.length; j++) {\n                for (int k = j + 1; k < a.length;\
    \ k++) {\n                    if (a[i] < a[j] && a[i] < a[k]) {\n            \
    \            triples += 1;\n                    }\n                }\n       \
    \     }\n        }\n        return triples;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk949fasi.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjuuztco.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zqwgc01.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        count++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwp8avdce.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long count = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            if(a[i]\
    \ > a[i-1]) {\n                sum += a[i] - a[i-1];\n                count++;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5pcbv8kz.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxgozyspu.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp56_qp66e.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpod3k8yqd.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlj4lod0.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnuesecvs.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdatuols1.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa4sj65li.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoeoecvfn.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxpi0panj.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqr146jok.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplwgg9yje.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsio8hsy1.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp88_htc41.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprvdbb4y9.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsfvt6iqs.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(i+j+k == n) {\n                        triple++;\n          \
    \          }\n                    sum += a[i] - a[j] - a[k];\n               \
    \ }\n            }\n        }\n        return sum % 3 == 0 ? triple : 0;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuonlvi18.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1;\
    \ j < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++)\
    \ {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n                 \
    \       triples += 3;\n                    }\n                }\n            }\n\
    \        }\n        return triples;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnlxza21o.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                        if(triple > triples) {\n                            triples\
    \ = triple;\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnpz1q_f6.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp777tu1pc.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result += 1;\n              \
    \      }\n                }\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6htway7a.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdokv9t2s.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprcs7wqt9.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum\
    \ += a[i];\n            if (sum % 3 == 0) {\n                triples += 1;\n \
    \           }\n        }\n        return triples;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wfkudux.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpffp3kuhu.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprnpxj8p7.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp59zce669.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            sum += a[i];\n            for(int\
    \ j = i; j < n; j++) {\n                sum += a[j];\n                for(int\
    \ k = j; k < n; k++) {\n                    sum += a[k];\n                   \
    \ if(sum % 3 == 0) {\n                        return sum;\n                  \
    \  }\n                }\n            }\n        }\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph21l9e81.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi0dekq3j.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        triples += 3;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_gasty4g.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \   }\n                }\n            }\n        }\n        return triple;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszb94e1z.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9q8ag21j.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjw5slpml.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdugvpnpp.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triple++;\n                 \
    \   }\n                }\n            }\n        }\n        return triple;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_uvhya6.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        long sum = a[i]\
    \ + a[j] + a[k];\n                        if (sum % 3 == 0) {\n              \
    \              triples++;\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return triples;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv0_cygnn.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptw39689l.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmp9jtmm6.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    long sum = a[i] + a[j] + a[k];\n                    if (sum % 3 == 0) {\n\
    \                        ans++;\n                    }\n                }\n  \
    \          }\n        }\n        return ans;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptwu4dc63.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzmjqzrkh.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            sum += a[i] * a[i]\
    \ + a[i] * a[i] + 1;\n        }\n        return sum % 3 == 0 ? 1 : 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpihztoint.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4s844qh5.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprqm9_b27.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdnd6q63x.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        count++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxk7wae_.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            for (int j = i; j < n; j++)\
    \ {\n                for (int k = j; k < n; k++) {\n                    if (a[i]\
    \ < a[j] && a[j] < a[k]) {\n                        long sum = a[i] + a[j] + a[k];\n\
    \                        if (sum % 3 == 0) {\n                            triples++;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return triples;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ryxet0h.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3i6uy80s.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1;\
    \ j < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n  \
    \                      count++;\n                    }\n                }\n  \
    \          }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvdoa5jad.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8gjjm_u.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                        sum += a[i];\n                    }\n               \
    \ }\n            }\n        }\n        return sum;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5qpec34o.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60k3yiib.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_iklejng.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxomnvbc3.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        ans += 1;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ ans;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxg7yh4by.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprdajouc1.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i -> {\n       \
    \     int j = i + 1;\n            int k = j + 1;\n            while (j < k) {\n\
    \                a[i] = a[j] + a[k];\n                j++;\n                k++;\n\
    \            }\n        });\n        return Arrays.stream(a).filter(i -> i % 3\
    \ == 0).count();\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy5n7enbj.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8mb_mnmj.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpovppdknb.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long max = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            sum\
    \ += a[i];\n            if((sum % 3) == 0) {\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe_6rd4n2.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i -> {\n       \
    \     int j = i;\n            while (j > 0) {\n                int k = j;\n  \
    \              while (k > 0) {\n                    int l = k;\n             \
    \       while (l > 0) {\n                        int m = l;\n                \
    \        while (m > 0) {\n                            int n = m;\n           \
    \                 while (n > 0) {\n                                int o = n;\n\
    \                                while (o > 0) {\n                           \
    \         int p = o;\n                                    while (p > 0) {\n  \
    \                                      int q = p;\n                          \
    \              while (q > 0) {\n                                            int\
    \ r = q;\n                                            while (r > 0) {\n      \
    \                                          int s = r;\n                      \
    \                          while (s > 0) {\n                                 \
    \                   int t = s;\n                                             \
    \       while (t > 0) {\n                                                    \
    \    int u = t;\n                                                        while\
    \ (u > 0) {\n                                                            int v\
    \ = u;\n                                                            while (v >\
    \ 0) {\n                                                                int w\
    \ = v;\n                                                                while\
    \ (w > 0) {\n                                                                \
    \    int x = w;\n                                                            \
    \        while (x > 0) {\n                                                   \
    \                     int y = x;\n                                           \
    \                             while (y > 0) {\n                              \
    \                                              int z = y;\n                  \
    \                                                          while (z > 0) {\n \
    \                                                                            \
    \   int a = z;\n                                                             \
    \                   while (a > 0) {\n                                        \
    \                                            int b = a;\n                    \
    \                                                                while (b > 0)\
    \ {\n                                                                        \
    \                int c = b;\n                                                \
    \                                        while (c > 0) {\n                   \
    \                                                                         int\
    \ d = c;\n                                                                   \
    \                         while (d > 0) {\n                                  \
    \                                                              int e = d;\n  \
    \                                                                            \
    \                  while (e > 0) {\n                                         \
    \                                                           int f = e;\n     \
    \                                                                            \
    \                   while (f > 0) {\n                                        \
    \                                                                int g = f;\n\
    \                                                                            \
    \                            while (g > 0) {\n                               \
    \                                                                            \
    \ int h = g;\n                                                               \
    \                                             while (h > 0) {\n              \
    \                                                                            \
    \                      int i = h;\n                                          \
    \                                                                      while (i>\
    \ 0) {\n                                                                     \
    \                                               int j = i;\n                 \
    \                                                                            \
    \                       while (j > 0) {\n                                    \
    \                                                                            \
    \        int k = j;\n                                                        \
    \                                                                while (k > 0)\
    \ {\n                                                                        \
    \                                                    int l = k;\n            \
    \                                                                            \
    \                                    while (l > 0) {\n                       \
    \                                                                            \
    \                             int m = l;\n                                   \
    \                                                                            \
    \                 while (m > 0) {\n                                          \
    \                                                                            \
    \              int n = m;\n                                                  \
    \                                                                            \
    \      while (n > 0) {\n                                                     \
    \                                                                            \
    \       int o = n;\n                                                         \
    \                                                                            \
    \   while (o > 0) {\n                                                        \
    \                                                                            \
    \        int p = o;\n                                                        \
    \                                                                            \
    \        while (p > 0) {\n                                                   \
    \                                                                            \
    \                 int q = p;\n                                               \
    \                                                                            \
    \                     while (q > 0) {\n                                      \
    \                                                                            \
    \                                  int r = q;\n                              \
    \                                                                            \
    \                                          while (r > 0) {\n                 \
    \                                                                            \
    \                                                           int s = r;\n     \
    \                                                                            \
    \                                                                       while\
    \ (s > 0) {\n                                                                \
    \                                                                            \
    \                int t = s;\n                                                \
    \                                                                            \
    \                                while (t > 0) {\n                           \
    \                                                                            \
    \                                                         int u = t;\n       \
    \                                                                            \
    \                                                                            \
    \ while (u > 0) {\n                                                          \
    \                                                                            \
    \                              int v = u;\n                                  \
    \                                                                            \
    \                                                      while (v > 0) {\n     \
    \                                                                            \
    \                                                                            \
    \           int w = v;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv9a9a2q7.java:103: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpv9a9a2q7.java:103: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpv9a9a2q7.java:103: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpv9a9a2q7.java:103: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpv9a9a2q7.java:103: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpv9a9a2q7.java:110: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpv9a9a2q7.java:111: error: reached end of file while parsing\n7\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj7hcckve.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.parallelSetAll(a, i -> i * i - i +\
    \ 1);\n        return IntStream.range(0, n).filter(i -> a[i] % 3 == 0).count();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpranv_tdy.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    /tmp/tmpranv_tdy.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(0, n).filter(i -> a[i] % 3\
    \ == 0).count();\n                                  ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                      \
    \  triples += 1;\n                    }\n                }\n            }\n  \
    \      }\n        return triples;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk0p6zs3l.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp704avjaf.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzu9w0o9m.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             sum += a[k];\n                    if(sum % 3 == 0) {\n         \
    \               triples += 1;\n                    }\n                }\n    \
    \        }\n        }\n        return triples;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjezpfn_z.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpogp7bc9y.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgou4eddg.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.stream(a).forEach(i -> {\n       \
    \     int j = i + 1;\n            int k = i + 2;\n            while (j < k) {\n\
    \                a[i] = a[j] + a[k];\n                j++;\n                k++;\n\
    \            }\n        });\n        return Arrays.stream(a).filter(i -> i % 3\
    \ == 0).count();\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpldcep43u.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long max = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                        if(sum > max) {\n                            max = sum;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqb3xkya7.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfw7v77tc.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp40z8kcs8.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3zsk5wqz.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsvf3lant.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpsvf3lant.java:25: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpsvf3lant.java:26:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpsvf3lant.java:27: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpsvf3lant.java:28: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpsvf3lant.java:29: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpsvf3lant.java:30:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpsvf3lant.java:31: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpsvf3lant.java:32: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpsvf3lant.java:33: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpsvf3lant.java:34:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpsvf3lant.java:35: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpsvf3lant.java:36: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpsvf3lant.java:37: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpsvf3lant.java:38:\
    \ error: variable triples is already defined in method getMa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long triple = 0;\n        long triple2 = 0;\n        long triple3 = 0;\n\
    \        long triple4 = 0;\n        long triple5 = 0;\n        long triple6 =\
    \ 0;\n        long triple7 = 0;\n        long triple8 = 0;\n        long triple9\
    \ = 0;\n        long triple10 = 0;\n        long triple11 = 0;\n        long triple12\
    \ = 0;\n        long triple13 = 0;\n        long triple14 = 0;\n        long triple15\
    \ = 0;\n        long triple16 = 0;\n        long triple17 = 0;\n        long triple18\
    \ = 0;\n        long triple19 = 0;\n        long triple20 = 0;\n        long triple21\
    \ = 0;\n        long triple22 = 0;\n        long triple23 = 0;\n        long triple24\
    \ = 0;\n        long triple25 = 0;\n        long triple26 = 0;\n        long triple27\
    \ = 0;\n        long triple28 = 0;\n        long triple29 = 0;\n        long triple30\
    \ = 0;\n        long triple31 = 0;\n        long triple32 = 0;\n        long triple33\
    \ = 0;\n        long triple34 = 0;\n        long triple35 = 0;\n        long triple36\
    \ = 0;\n        long triple37 = 0;\n        long triple38 = 0;\n        long triple39\
    \ = 0;\n        long triple40 = 0;\n        long triple41 = 0;\n        long triple42\
    \ = 0;\n        long triple43 = 0;\n        long triple44 = 0;\n        long triple45\
    \ = 0;\n        long triple46 = 0;\n        long triple47 = 0;\n        long triple48\
    \ = 0;\n        long triple49 = 0;\n        long triple50 = 0;\n        long triple51\
    \ = 0;\n        long triple52 = 0;\n        long triple53 = 0;\n        long triple54\
    \ = 0;\n        long triple55 = 0;\n        long triple56 = 0;\n        long triple57\
    \ = 0;\n        long triple58 = 0;\n        long triple59 = 0;\n        long triple60\
    \ = 0;\n        long triple61 = 0;\n        long triple62 = 0;\n        long triple63\
    \ = 0;\n        long triple64 = 0;\n        long triple65 = 0;\n        long triple66\
    \ = 0;\n        long triple67 = 0;\n        long triple68 = 0;\n        long triple69\
    \ = 0;\n        long triple70 = 0;\n        long triple71 = 0;\n        long triple72\
    \ = 0;\n        long triple73 = 0;\n        long triple74 = 0;\n        long triple75\
    \ = 0;\n        long triple76 = 0;\n        long triple77 = 0;\n        long triple78\
    \ = 0;\n        long triple79 = 0;\n        long triple80 = 0;\n        long triple81\
    \ = 0;\n        long triple82 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphg9eglf6.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        count++;\n                  \
    \  }\n                }\n            }\n        }\n        return count;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4c3m_uqs.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += a[i];\n\
    \                        sum += a[j];\n                        sum += a[k];\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpswhzm7hr.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphrwodh82.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqu39wcie.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8wvhys1.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyr_te3s9.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.parallelSetAll(a, i -> i * i - i +\
    \ 1);\n        long max = 0;\n        for (int i = 0; i < a.length; i++) {\n \
    \           for (int j = i + 1; j < a.length; j++) {\n                for (int\
    \ k = j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[j]\
    \ < a[k]) {\n                        long triples = a[i] + a[j] + a[k];\n    \
    \                    if (triples > max) {\n                            max = triples;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn1derxoi.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd70wefp3.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjo83kb60.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjdb3fasa.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        long triples = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ for(int j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                        if(triple > triples) {\n                            triples\
    \ = triple;\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9hxnund0.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        count++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph2sa6thh.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppv4yqzdm.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplvyq3x8y.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuldjtq8x.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == (3 * i) + (3 * j) + (3 * k)) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppa4t0qbr.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjdkfe2_x.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzb4xzfkn.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        long triples = 0;\n        for(int i = 0; i < n; i++) {\n           \
    \ for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n;\
    \ k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n                \
    \        triple++;\n                    }\n                }\n            }\n\
    \        }\n        return triple;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprd4mopmj.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        ans += 1;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ ans;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpywhok40s.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0tbvpra.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                      \
    \  triple++;\n                    }\n                }\n            }\n      \
    \  }\n        return triple;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdw5wunw4.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprx7rv9fj.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        count++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxfrhqk1j.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long max = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            sum\
    \ += a[i];\n            if(sum % 3 == 0) {\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp40_kpaes.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnq9wm_6j.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxvz7ijs_.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd4bnhijv.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiejsgdf3.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpiejsgdf3.java:25: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpiejsgdf3.java:26:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpiejsgdf3.java:27: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpiejsgdf3.java:28: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpiejsgdf3.java:29: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpiejsgdf3.java:30:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpiejsgdf3.java:31: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpiejsgdf3.java:32: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpiejsgdf3.java:33: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpiejsgdf3.java:34:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmpiejsgdf3.java:35: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmpiejsgdf3.java:36: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmpiejsgdf3.java:37: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmpiejsgdf3.java:38:\
    \ error: variable triples is already defined in method getMa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqgu22y40.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += a[i];\n\
    \                        sum += a[j];\n                        sum += a[k];\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return triples;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgr0hy1tg.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4iv2fz9.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7hhabg4.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long max = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            sum\
    \ += a[i];\n            if(sum % 3 == 0) {\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wc33lo5.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        int[] a = new int[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        int count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        count++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp56dofect.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int[] a = new int[n];\n                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long max = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        sum += 1;\n\
    \                        if(sum > max) {\n                            max = sum;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsc292pr.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo_ips_ls.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long triple = 0;\n        long triple2 = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] == a[j] &&\
    \ a[j] == a[k]) {\n                        triple++;\n                    }\n\
    \                    if (a[i] == a[j] + a[k]) {\n                        triple2++;\n\
    \                    }\n                }\n            }\n        }\n        triples\
    \ = triple + triple2;\n        return triples;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp21_9btfi.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp68pnyief.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6z7qrako.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                        sum += a[i];\n                    }\n       \
    \         }\n            }\n        }\n        return sum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7v1kcf3q.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        triples += 3;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3l26qtn5.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans++;\n                    }\n\
    \                }\n            }\n        }\n        return ans;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps9oy2lkz.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                        sum += a[i];\n                        sum +=\
    \ a[j];\n                        sum += a[k];\n                    }\n       \
    \         }\n            }\n        }\n        return sum;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxn8je2tq.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples++;\n                \
    \    }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq3d46y0c.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long max = 0;\n\
    \        long sum = 0;\n        for(int i = 1; i < n; i++) {\n            sum\
    \ += a[i];\n            if(sum % 3 == 0) {\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1vjivnk.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphu3eweba.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += a[i];\n                        sum += a[j];\n                        sum\
    \ += a[k];\n                        triples += 1;\n                    }\n   \
    \             }\n            }\n        }\n        return triples;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpovnggd12.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[i] < a[k]) {\n                        triples += 3;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf18vencu.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd5cjpj4a.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 0);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long max = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 0) {\n                        continue;\n\
    \                    }\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      sum += 1;\n                        max = Math.max(max,\
    \ sum);\n                    }\n                }\n            }\n        }\n\
    \        return max;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxw8ih9f2.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long[] a = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        long sum = 0;\n        for(int i = 0; i < n; i++) {\n            sum\
    \ += a[i];\n            if(sum % 3 == 0) {\n                ans += 1;\n      \
    \      }\n        }\n        return ans;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv03hoy9k.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        triples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return triples;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwd5pmh6s.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        long triple = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triple++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triple;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqs8e8k1h.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] == a[j] && a[j] == a[k]) {\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp87wxt_uj.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9zyl3fwc.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                      \
    \  triples += 1;\n                    }\n                }\n            }\n  \
    \      }\n        return triples;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmf8fno8x.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long result = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++)\
    \ {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        result++;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuldd2puo.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long getMaxTriples(long n) {\n        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        Arrays.sort(a);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n; j++)\
    \ {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        ans += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return ans;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5h8_0rxn.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
