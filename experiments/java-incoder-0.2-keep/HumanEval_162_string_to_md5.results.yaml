name: HumanEval_162_string_to_md5
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgx20a76z.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7u0kz723.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes, 0, bytes.length);\n            byte[] md5Bytes\
    \ = digest.digest();\n            StringBuilder sb = new StringBuilder();\n  \
    \          for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (byte b : bytes) {\n            sb.append(Integer.toHexString(b\
    \ & 0xff));\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmysqfx36.java:22: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1sonb1bi.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(String.format(\"%032x\", new BigInteger(1, bytes)));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh5jpwzf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8g7lmsgz.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toString((md5Bytes[i]\
    \ & 0xff) + 0x100, 16).substring(1));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptyv3bgeg.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0l3nuz60.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < bytes.length; i++) {\n   \
    \             sb.append(Integer.toHexString((bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (byte b : digest) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.reverse().toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptzlq2wrj.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpljdrsnp6.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa9s7cj3h.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes, 0, bytes.length);\n            byte[] md5 =\
    \ digest.digest();\n            StringBuilder sb = new StringBuilder();\n    \
    \        for (int i = 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5 = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            throw new RuntimeException(e);\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1_jqie_.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprbkn_gu2.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv03luqp9.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprktf345b.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes);\n\
    \        byte[] hash = digest.digest();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < hash.length; i++) {\n            sb.append(Integer.toHexString((hash[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpltgyjanm.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toHexString(md5Bytes[i] & 0xFF));\n       \
    \ }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3musn6r.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(String.format(\"%032x\", new BigInteger(1, bytes)));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphdmxcrxd.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (byte b : md5Bytes) {\n            sb.append(String.format(\"\
    %02x\", b));\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm79qejng.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpku9n1eq_.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes);\n\
    \        byte[] md5Bytes = digest.digest();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < md5Bytes.length; i++) {\n            sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvcnktfyu.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjc3t2j5g.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoi46peyd.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpej5qvn9n.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder md5StringBuilder = new StringBuilder();\n         \
    \   for (int i = 0; i < md5Bytes.length; i++) {\n                md5StringBuilder.append(Integer.toHexString(md5Bytes[i]\
    \ & 0xFF));\n            }\n            return Optional.of(md5StringBuilder.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8mv68vsx.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : md5Bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n \
    \           }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprzizl51w.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new String(bytes, \"UTF-8\"));\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfcqg6bpr.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            return Optional.of(new\
    \ String(bytes, \"UTF-8\"));\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0f7wg3u.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1t8dgta1.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyqg7xm6n.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        md5.update(bytes, 0,\
    \ bytes.length);\n        byte[] md5Bytes = md5.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toHexString((md5Bytes[i] & 0xff) + 0x100).substring(1,3));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuj4sokjd.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj92pzp20.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes);\n\
    \        byte[] md5Bytes = digest.digest();\n        StringBuilder md5StringBuilder\
    \ = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++) {\n\
    \            md5StringBuilder.append(Integer.toHexString((md5Bytes[i] & 0xFF)\
    \ | 0x100).substring(1,3));\n        }\n        return Optional.of(md5StringBuilder.toString());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcy3p501p.java:16: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9zwovjop.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoqafhqkf.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphsime391.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm65mod04.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8s9f58x6.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n   \
    \         throw new RuntimeException(e);\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8o8dr5z5.java:25: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxb_km577.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new String(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp69aobaip.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2dpmnh27.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder md5StringBuilder = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                md5StringBuilder.append(Integer.toHexString((md5Bytes[i] & 0xFF)\
    \ | 0x100).substring(1));\n            }\n            return Optional.of(md5StringBuilder.toString());\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            throw new RuntimeException(e);\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new String(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp790isfxp.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toString((md5Bytes[i] & 0xff) + 0x100, 16).substring(1));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxz7q2qsj.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkzj7i8fj.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5pkqfwt9.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp37cbyyf7.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphacge9ju.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyw1kcr62.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg0ftmzv6.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1apql6cr.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes, 0, bytes.length);\n            byte[] md5Bytes\
    \ = digest.digest();\n            StringBuilder sb = new StringBuilder();\n  \
    \          for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkm8bp8x_.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5x5rseh7.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_m7lwdm1.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyyrnuize.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkkb0fod8.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(new String(sb.toString().getBytes()));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparswviap.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzxxagho7.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes, 0, bytes.length);\n            byte[] md5 =\
    \ digest.digest();\n            StringBuilder sb = new StringBuilder();\n    \
    \        for (int i = 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ab_ihfu.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5777ll37.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5 = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qrs92jq.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptanek8t7.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0b0omsew.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pguak3e.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5t8re2v_.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(new String(sb.toString()));\n     \
    \   } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2m1wd7h8.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78d8le_m.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp96scbhf0.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < bytes.length; i++) {\n   \
    \             sb.append(Integer.toHexString((bytes[i] & 0xff) + 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zgkvnf2.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqp5jo5u8.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_u3ywd6n.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjpncsetr.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        md5.update(bytes);\n\
    \        byte[] md5Bytes = md5.digest();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (byte b : md5Bytes) {\n            sb.append(Integer.toHexString(b\
    \ & 0xff));\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw9dj0xwo.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mynfan3.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(new String(sb.toString()));\n     \
    \   } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7puiohrx.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        return Optional.of(new BigInteger(1, digest.digest()).toString(16));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppioc2uyv.java:16: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (byte b : md5Bytes) {\n            sb.append(String.format(\"\
    %02x\", b));\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2pmqvcej.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4nir3jz6.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new BigInteger(1, bytes).xor(new BigInteger(1,\
    \ bytes)).toString(16));\n        } catch (NoSuchAlgorithmException e) {\n   \
    \         throw new RuntimeException(e);\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn7kh1pz7.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuui7bk1v.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString(md5Bytes[i]\
    \ & 0xFF));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2p3skwa7.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp15f_obbh.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        md5.update(bytes, 0,\
    \ bytes.length);\n        byte[] md5Bytes = md5.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmponzdt7b7.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5r4pcd1a.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmmulai7_.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes, 0, bytes.length);\n            byte[] md5 =\
    \ digest.digest();\n            StringBuilder sb = new StringBuilder();\n    \
    \        for (int i = 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < bytes.length; i++) {\n   \
    \             sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(String.format(\"%032x\", new BigInteger(1, bytes)));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new String(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdqu6j82h.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbbfh_euc.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6nzmkjjo.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        return Optional.of(new String(digest.digest()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzh3ac55k.java:16: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (byte b : bytes) {\n            sb.append(Integer.toHexString(b\
    \ & 0xff));\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ab4y3dh.java:22: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes, 0, bytes.length);\n            byte[] md5Bytes\
    \ = digest.digest();\n            StringBuilder sb = new StringBuilder();\n  \
    \          for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6wosrd5r.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (byte b : bytes) {\n            sb.append(Integer.toHexString(b\
    \ & 0xFF));\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5b3xhlit.java:22: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy_rqbym_.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphx2e0fsd.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy1o_yyru.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString(md5Bytes[i]\
    \ & 0xFF));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppdx3ipq9.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5bvhhev.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toString((md5Bytes[i]\
    \ & 0xff) + 0x100, 16).substring(1));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_057fy3.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ffk0ogb.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp280iukwx.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx49g6lmc.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes, 0, bytes.length);\n            byte[] md5Bytes\
    \ = digest.digest();\n            StringBuilder sb = new StringBuilder();\n  \
    \          for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(new String(sb.toString()));\n     \
    \   } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpam7k_p3r.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg3_n263_.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_59_uot.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5 = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdwvqdpqm.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbliwddfs.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9hqbw4aa.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv8iczgww.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5 = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvk82alo2.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9x0w3bha.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new String(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpm3hxn7.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeqefhreq.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph49lj53p.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz2c890uo.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ad8qhzu.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new BigInteger(1, bytes).xor(new BigInteger(1,\
    \ bytes)).toString(16));\n        } catch (NoSuchAlgorithmException e) {\n   \
    \         return Optional.empty();\n        }\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbyz6_705.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvsgcyrc8.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.reverse().toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptyk1wgh9.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes);\n            byte[] md5 = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyzrlzukw.java:18: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < digest.length; i++) {\n  \
    \              sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n        md5.update(text.getBytes());\n        byte[] digest = md5.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ digest.length; i++) {\n            sb.append(Integer.toHexString(0xFF & digest[i]));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy816b490.java:23: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpklrha4m8.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppi3qjhho.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(String.format(\"%032x\", new BigInteger(1, bytes)));\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            throw new RuntimeException(e);\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_pybo7yx.java:20: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgy9pqcpg.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new String(bytes, \"UTF-8\"));\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwjt37cmj.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            return Optional.of(new\
    \ String(bytes, \"UTF-8\"));\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplrdysp0y.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        md5.update(bytes, 0,\
    \ bytes.length);\n        byte[] digest = md5.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < digest.length; i++) {\n\
    \            int val = ((int) digest[i]) & 0xff;\n            if (val < 16) {\n\
    \                sb.append(\"0\");\n            }\n            sb.append(Integer.toHexString(val));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx19lv66y.java:28: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        md5.update(bytes, 0,\
    \ bytes.length);\n        byte[] md5Bytes = md5.digest();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n            sb.append(Integer.toString((md5Bytes[i] & 0xff) + 0x100, 16).substring(1));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcvhkh5vk.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vuv9coq.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new String(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprjnfkklu.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8fgdcaj3.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpumj20ylk.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcubvwn1n.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes,\
    \ 0, bytes.length);\n        return Optional.of(new String(digest.digest()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_nth1ea.java:16: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(String.format(\"%032x\", new BigInteger(1, bytes)));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        return new\
    \ String(bytes);\n\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"\
    password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy_a7599k.java:18: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return new String(bytes);\n               ^\n1\
    \ error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String>\
    \ stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_dbcqwmc.java:19: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
